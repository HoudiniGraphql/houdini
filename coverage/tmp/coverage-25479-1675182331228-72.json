{"result":[{"scriptId":"6","url":"node:internal/per_context/primordials","functions":[{"functionName":"SafeIterator","ranges":[{"startOffset":8127,"endOffset":8198,"count":2}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":8203,"endOffset":8252,"count":36}],"isBlockCoverage":true},{"functionName":"desc.value","ranges":[{"startOffset":9865,"endOffset":9932,"count":2}],"isBlockCoverage":true}]},{"scriptId":"8","url":"node:internal/per_context/messageport","functions":[{"functionName":"exports.emitMessage","ranges":[{"startOffset":407,"endOffset":993,"count":3},{"startOffset":683,"endOffset":991,"count":0}],"isBlockCoverage":true}]},{"scriptId":"430","url":"node:internal/timers","functions":[{"functionName":"initAsyncResource","ranges":[{"startOffset":5293,"endOffset":5571,"count":3},{"startOffset":5519,"endOffset":5569,"count":0}],"isBlockCoverage":true},{"functionName":"Timeout","ranges":[{"startOffset":5677,"endOffset":6723,"count":3},{"startOffset":5825,"endOffset":6177,"count":0},{"startOffset":6534,"endOffset":6541,"count":0}],"isBlockCoverage":true},{"functionName":"incRefCount","ranges":[{"startOffset":9146,"endOffset":9222,"count":3},{"startOffset":9199,"endOffset":9220,"count":0}],"isBlockCoverage":true},{"functionName":"decRefCount","ranges":[{"startOffset":9224,"endOffset":9301,"count":1},{"startOffset":9277,"endOffset":9299,"count":0}],"isBlockCoverage":true},{"functionName":"insert","ranges":[{"startOffset":10384,"endOffset":11035,"count":3},{"startOffset":10707,"endOffset":11008,"count":0}],"isBlockCoverage":true},{"functionName":"compareTimersLists","ranges":[{"startOffset":11892,"endOffset":12097,"count":2},{"startOffset":11994,"endOffset":12074,"count":0}],"isBlockCoverage":true},{"functionName":"setPosition","ranges":[{"startOffset":12099,"endOffset":12170,"count":2}],"isBlockCoverage":true},{"functionName":"processTimers","ranges":[{"startOffset":14422,"endOffset":14906,"count":1},{"startOffset":14622,"endOffset":14888,"count":2},{"startOffset":14653,"endOffset":14752,"count":1},{"startOffset":14730,"endOffset":14743,"count":0},{"startOffset":14752,"endOffset":14790,"count":1},{"startOffset":14790,"endOffset":14805,"count":0},{"startOffset":14805,"endOffset":14888,"count":1},{"startOffset":14888,"endOffset":14905,"count":0}],"isBlockCoverage":true},{"functionName":"listOnTimeout","ranges":[{"startOffset":14910,"endOffset":17380,"count":1},{"startOffset":15334,"endOffset":15562,"count":0},{"startOffset":15602,"endOffset":15617,"count":0},{"startOffset":15819,"endOffset":16048,"count":0},{"startOffset":16167,"endOffset":16189,"count":0},{"startOffset":16303,"endOffset":16371,"count":0},{"startOffset":16416,"endOffset":16444,"count":0},{"startOffset":16446,"endOffset":16555,"count":0},{"startOffset":16624,"endOffset":16794,"count":0},{"startOffset":17305,"endOffset":17376,"count":0}],"isBlockCoverage":true}]},{"scriptId":"431","url":"node:internal/async_hooks","functions":[{"functionName":"newAsyncId","ranges":[{"startOffset":14454,"endOffset":14524,"count":3}],"isBlockCoverage":true},{"functionName":"getDefaultTriggerAsyncId","ranges":[{"startOffset":14899,"endOffset":15189,"count":3},{"startOffset":15155,"endOffset":15188,"count":0}],"isBlockCoverage":true},{"functionName":"hasHooks","ranges":[{"startOffset":16004,"endOffset":16067,"count":7}],"isBlockCoverage":true},{"functionName":"enabledHooksExist","ranges":[{"startOffset":16069,"endOffset":16128,"count":1}],"isBlockCoverage":true},{"functionName":"initHooksExist","ranges":[{"startOffset":16130,"endOffset":16185,"count":3}],"isBlockCoverage":true},{"functionName":"destroyHooksExist","ranges":[{"startOffset":16246,"endOffset":16307,"count":1}],"isBlockCoverage":true},{"functionName":"emitBeforeScript","ranges":[{"startOffset":16798,"endOffset":16974,"count":1},{"startOffset":16946,"endOffset":16972,"count":0}],"isBlockCoverage":true},{"functionName":"emitAfterScript","ranges":[{"startOffset":16977,"endOffset":17097,"count":1},{"startOffset":17041,"endOffset":17066,"count":0}],"isBlockCoverage":true},{"functionName":"pushAsyncContext","ranges":[{"startOffset":17442,"endOffset":18012,"count":1},{"startOffset":17662,"endOffset":17712,"count":0}],"isBlockCoverage":true},{"functionName":"popAsyncContext","ranges":[{"startOffset":18077,"endOffset":18688,"count":1},{"startOffset":18193,"endOffset":18206,"count":0},{"startOffset":18285,"endOffset":18391,"count":0}],"isBlockCoverage":true}]},{"scriptId":"434","url":"node:internal/validators","functions":[{"functionName":"","ranges":[{"startOffset":10599,"endOffset":10715,"count":3},{"startOffset":10657,"endOffset":10713,"count":0}],"isBlockCoverage":true}]},{"scriptId":"436","url":"node:internal/linkedlist","functions":[{"functionName":"peek","ranges":[{"startOffset":133,"endOffset":225,"count":2},{"startOffset":186,"endOffset":224,"count":1}],"isBlockCoverage":true},{"functionName":"remove","ranges":[{"startOffset":260,"endOffset":487,"count":5},{"startOffset":306,"endOffset":358,"count":4},{"startOffset":382,"endOffset":434,"count":4}],"isBlockCoverage":true},{"functionName":"append","ranges":[{"startOffset":543,"endOffset":995,"count":3},{"startOffset":594,"endOffset":611,"count":0}],"isBlockCoverage":true},{"functionName":"isEmpty","ranges":[{"startOffset":997,"endOffset":1057,"count":1}],"isBlockCoverage":true}]},{"scriptId":"437","url":"node:internal/priority_queue","functions":[{"functionName":"peek","ranges":[{"startOffset":879,"endOffset":917,"count":2}],"isBlockCoverage":true},{"functionName":"percolateDown","ranges":[{"startOffset":921,"endOffset":1585,"count":1},{"startOffset":1363,"endOffset":1369,"count":0}],"isBlockCoverage":true},{"functionName":"removeAt","ranges":[{"startOffset":2081,"endOffset":2411,"count":1},{"startOffset":2275,"endOffset":2325,"count":0},{"startOffset":2335,"endOffset":2357,"count":0}],"isBlockCoverage":true}]},{"scriptId":"440","url":"node:internal/util/debuglog","functions":[{"functionName":"noop","ranges":[{"startOffset":1419,"endOffset":1427,"count":4}],"isBlockCoverage":true}]},{"scriptId":"458","url":"node:internal/event_target","functions":[{"functionName":"get once","ranges":[{"startOffset":10646,"endOffset":10706,"count":3}],"isBlockCoverage":true},{"functionName":"get passive","ranges":[{"startOffset":10778,"endOffset":10844,"count":3}],"isBlockCoverage":true},{"functionName":"get isNodeStyleListener","ranges":[{"startOffset":10847,"endOffset":10927,"count":6}],"isBlockCoverage":true},{"functionName":"get weak","ranges":[{"startOffset":10930,"endOffset":10990,"count":3}],"isBlockCoverage":true},{"functionName":"get removed","ranges":[{"startOffset":10993,"endOffset":11059,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17043,"endOffset":19006,"count":3},{"startOffset":17342,"endOffset":17418,"count":0},{"startOffset":17517,"endOffset":17617,"count":0},{"startOffset":17735,"endOffset":17744,"count":0},{"startOffset":17889,"endOffset":18087,"count":0},{"startOffset":18112,"endOffset":18282,"count":0},{"startOffset":18392,"endOffset":18440,"count":0},{"startOffset":18479,"endOffset":18515,"count":0},{"startOffset":18687,"endOffset":18745,"count":0},{"startOffset":18845,"endOffset":18902,"count":0},{"startOffset":18968,"endOffset":19002,"count":0}],"isBlockCoverage":true},{"functionName":"createEvent","ranges":[{"startOffset":17111,"endOffset":17311,"count":0}],"isBlockCoverage":false},{"functionName":"addCatch","ranges":[{"startOffset":25240,"endOffset":25554,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":25386,"endOffset":25546,"count":0}],"isBlockCoverage":false}]},{"scriptId":"463","url":"node:timers","functions":[{"functionName":"unenroll","ranges":[{"startOffset":2332,"endOffset":3516,"count":1},{"startOffset":2385,"endOffset":2392,"count":0},{"startOffset":2452,"endOffset":2498,"count":0},{"startOffset":2589,"endOffset":2627,"count":0},{"startOffset":2633,"endOffset":2668,"count":0}],"isBlockCoverage":true},{"functionName":"setTimeout","ranges":[{"startOffset":4218,"endOffset":4875,"count":3},{"startOffset":4385,"endOffset":4392,"count":0},{"startOffset":4422,"endOffset":4463,"count":0},{"startOffset":4468,"endOffset":4515,"count":0},{"startOffset":4520,"endOffset":4741,"count":0}],"isBlockCoverage":true},{"functionName":"clearTimeout","ranges":[{"startOffset":5194,"endOffset":5560,"count":2},{"startOffset":5258,"endOffset":5386,"count":1},{"startOffset":5388,"endOffset":5558,"count":0}],"isBlockCoverage":true}]},{"scriptId":"477","url":"node:internal/streams/writable","functions":[{"functionName":"get","ranges":[{"startOffset":24381,"endOffset":24458,"count":2}],"isBlockCoverage":true}]},{"scriptId":"551","url":"node:internal/source_map/source_map_cache","functions":[{"functionName":"ObjectGetValueSafe","ranges":[{"startOffset":260,"endOffset":438,"count":132},{"startOffset":424,"endOffset":435,"count":0}],"isBlockCoverage":true},{"functionName":"sourceMapCacheToObject","ranges":[{"startOffset":8686,"endOffset":8933,"count":1},{"startOffset":8890,"endOffset":8917,"count":0}],"isBlockCoverage":true},{"functionName":"appendCJSCache","ranges":[{"startOffset":8935,"endOffset":9224,"count":1},{"startOffset":9007,"endOffset":9222,"count":33}],"isBlockCoverage":true}]},{"scriptId":"552","url":"node:internal/util/iterable_weak_map","functions":[{"functionName":"","ranges":[{"startOffset":1391,"endOffset":1816,"count":1}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":1483,"endOffset":1735,"count":34},{"startOffset":1552,"endOffset":1566,"count":1},{"startOffset":1566,"endOffset":1630,"count":33},{"startOffset":1630,"endOffset":1644,"count":0},{"startOffset":1644,"endOffset":1734,"count":33}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1757,"endOffset":1792,"count":0}],"isBlockCoverage":false}]},{"scriptId":"584","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/tinypool@0.3.1/node_modules/tinypool/dist/esm/worker.js","functions":[{"functionName":"stdout","ranges":[{"startOffset":310,"endOffset":385,"count":1},{"startOffset":355,"endOffset":372,"count":0},{"startOffset":373,"endOffset":382,"count":0}],"isBlockCoverage":true},{"functionName":"stderr","ranges":[{"startOffset":386,"endOffset":461,"count":1},{"startOffset":431,"endOffset":448,"count":0},{"startOffset":449,"endOffset":458,"count":0}],"isBlockCoverage":true},{"functionName":"atomicsWaitLoop","ranges":[{"startOffset":2347,"endOffset":2745,"count":1},{"startOffset":2424,"endOffset":2743,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2869,"endOffset":3893,"count":0},{"startOffset":3150,"endOffset":3180,"count":1},{"startOffset":3289,"endOffset":3404,"count":1},{"startOffset":3494,"endOffset":3529,"count":1},{"startOffset":3727,"endOffset":3892,"count":1}],"isBlockCoverage":true}]},{"scriptId":"585","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/tinypool@0.3.1/node_modules/tinypool/dist/esm/chunk-QYFJIXNO.js","functions":[{"functionName":"isTransferable","ranges":[{"startOffset":1547,"endOffset":1679,"count":1},{"startOffset":1603,"endOffset":1631,"count":0},{"startOffset":1632,"endOffset":1657,"count":0},{"startOffset":1658,"endOffset":1676,"count":0}],"isBlockCoverage":true},{"functionName":"isMovable","ranges":[{"startOffset":1680,"endOffset":1769,"count":1},{"startOffset":1739,"endOffset":1766,"count":0}],"isBlockCoverage":true}]},{"scriptId":"586","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/worker.js","functions":[{"functionName":"post","ranges":[{"startOffset":3011,"endOffset":3061,"count":3}],"isBlockCoverage":true}]},{"scriptId":"597","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/vendor-index.783e7f3e.js","functions":[{"functionName":"serialize","ranges":[{"startOffset":137,"endOffset":145,"count":3}],"isBlockCoverage":true},{"functionName":"deserialize","ranges":[{"startOffset":165,"endOffset":173,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":305,"endOffset":1078,"count":3},{"startOffset":466,"endOffset":540,"count":0}],"isBlockCoverage":true},{"functionName":"sendEvent","ranges":[{"startOffset":346,"endOffset":425,"count":0}],"isBlockCoverage":true},{"functionName":"sendCall","ranges":[{"startOffset":564,"endOffset":1012,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":606,"endOffset":1002,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":833,"endOffset":969,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1090,"endOffset":1704,"count":3},{"startOffset":1176,"endOffset":1463,"count":0},{"startOffset":1593,"endOffset":1616,"count":0}],"isBlockCoverage":true},{"functionName":"nanoid","ranges":[{"startOffset":1811,"endOffset":1946,"count":3},{"startOffset":1889,"endOffset":1931,"count":63}],"isBlockCoverage":true}]},{"scriptId":"612","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/chunk-runtime-rpc.9c0386cc.js","functions":[{"functionName":"withSafeTimers","ranges":[{"startOffset":152,"endOffset":586,"count":3}],"isBlockCoverage":true},{"functionName":"rpc","ranges":[{"startOffset":599,"endOffset":930,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":680,"endOffset":922,"count":3}],"isBlockCoverage":true},{"functionName":"safeSendCall","ranges":[{"startOffset":789,"endOffset":841,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":817,"endOffset":840,"count":3}],"isBlockCoverage":true}]},{"scriptId":"615","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/chunk-utils-global.442d1d33.js","functions":[{"functionName":"getWorkerState","ranges":[{"startOffset":151,"endOffset":219,"count":3}],"isBlockCoverage":true}]},{"scriptId":"616","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@vitest+utils@0.28.3/node_modules/@vitest/utils/dist/index.js","functions":[{"functionName":"getSafeTimers","ranges":[{"startOffset":1165,"endOffset":1549,"count":5},{"startOffset":1378,"endOffset":1391,"count":0}],"isBlockCoverage":true}]},{"scriptId":"675","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/entry.js","functions":[{"functionName":"withEnv","ranges":[{"startOffset":9800,"endOffset":10206,"count":0},{"startOffset":10150,"endOffset":10204,"count":1}],"isBlockCoverage":true},{"functionName":"testRunner.onTaskUpdate","ranges":[{"startOffset":11225,"endOffset":11418,"count":1},{"startOffset":11353,"endOffset":11398,"count":0}],"isBlockCoverage":true},{"functionName":"testRunner.onAfterRun","ranges":[{"startOffset":11750,"endOffset":11997,"count":0},{"startOffset":11837,"endOffset":11938,"count":1},{"startOffset":11947,"endOffset":11991,"count":1},{"startOffset":11993,"endOffset":11996,"count":1}],"isBlockCoverage":true},{"functionName":"run","ranges":[{"startOffset":12022,"endOffset":14155,"count":0},{"startOffset":13202,"endOffset":14153,"count":3},{"startOffset":13293,"endOffset":13310,"count":0},{"startOffset":13327,"endOffset":14149,"count":0},{"startOffset":14143,"endOffset":14149,"count":1},{"startOffset":14149,"endOffset":14153,"count":1},{"startOffset":14153,"endOffset":14154,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":13721,"endOffset":14141,"count":0},{"startOffset":14033,"endOffset":14140,"count":1}],"isBlockCoverage":true}]},{"scriptId":"676","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/chunk-integrations-coverage.48e6286b.js","functions":[{"functionName":"takeCoverageInsideWorker","ranges":[{"startOffset":766,"endOffset":1012,"count":0}],"isBlockCoverage":true}]},{"scriptId":"679","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@vitest+runner@0.28.3/node_modules/@vitest/runner/dist/index.js","functions":[{"functionName":"","ranges":[{"startOffset":11832,"endOffset":11889,"count":1}],"isBlockCoverage":true},{"functionName":"sendTasksUpdate","ranges":[{"startOffset":11898,"endOffset":12200,"count":2},{"startOffset":12064,"endOffset":12198,"count":1},{"startOffset":12115,"endOffset":12123,"count":0}],"isBlockCoverage":true},{"functionName":"startTests","ranges":[{"startOffset":18133,"endOffset":18643,"count":0},{"startOffset":18592,"endOffset":18642,"count":1}],"isBlockCoverage":true}]},{"scriptId":"682","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/chunk-utils-import.0402c9db.js","functions":[{"functionName":"save","ranges":[{"startOffset":79860,"endOffset":80744,"count":1},{"startOffset":80194,"endOffset":80205,"count":0},{"startOffset":80207,"endOffset":80475,"count":0},{"startOffset":80528,"endOffset":80721,"count":0}],"isBlockCoverage":true},{"functionName":"getUncheckedCount","ranges":[{"startOffset":80747,"endOffset":80814,"count":1}],"isBlockCoverage":true},{"functionName":"getUncheckedKeys","ranges":[{"startOffset":80817,"endOffset":80885,"count":1}],"isBlockCoverage":true},{"functionName":"pack","ranges":[{"startOffset":83187,"endOffset":83943,"count":1},{"startOffset":83543,"endOffset":83570,"count":0},{"startOffset":83858,"endOffset":83861,"count":0}],"isBlockCoverage":true},{"functionName":"saveCurrent","ranges":[{"startOffset":86277,"endOffset":86469,"count":1},{"startOffset":86334,"endOffset":86341,"count":0}],"isBlockCoverage":true},{"functionName":"resetConfig","ranges":[{"startOffset":185612,"endOffset":185748,"count":1},{"startOffset":185650,"endOffset":185744,"count":0}],"isBlockCoverage":true}]},{"scriptId":"738","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/chunk-env-node.ffd1183b.js","functions":[{"functionName":"teardown","ranges":[{"startOffset":193,"endOffset":260,"count":1}],"isBlockCoverage":true}]},{"scriptId":"744","url":"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/vitest@0.28.3_@vitest+ui@0.28.3/node_modules/vitest/dist/runners-chunk.js","functions":[{"functionName":"onAfterRun","ranges":[{"startOffset":1532,"endOffset":1601,"count":1}],"isBlockCoverage":true}]}],"timestamp":28047.01551,"source-map-cache":{"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/data-uri-to-buffer@4.0.0/node_modules/data-uri-to-buffer/dist/index.js":{"lineLengths":[3,61,2,62,50,14,3,38,31,96,5,21,36,67,40,47,51,5,55,57,21,23,41,24,43,35,26,9,14,38,52,47,13,9,5,56,38,40,29,5,64,49,57,47,58,23,31,34,29,18,1,31,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/data-uri-to-buffer@4.0.0/node_modules/data-uri-to-buffer/src/index.ts"],"names":[],"mappings":"AAMA;;;;;;GAMG;AACH,MAAM,UAAU,eAAe,CAAC,GAAW;IAC1C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACzB,MAAM,IAAI,SAAS,CAClB,kEAAkE,CAClE,CAAC;KACF;IAED,iBAAiB;IACjB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAEhC,+DAA+D;IAC/D,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpC,IAAI,UAAU,KAAK,CAAC,CAAC,IAAI,UAAU,IAAI,CAAC,EAAE;QACzC,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAC;KAC3C;IAED,mDAAmD;IACnD,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAErD,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC;IACrC,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;YACzB,MAAM,GAAG,IAAI,CAAC;SACd;aAAM;YACN,QAAQ,IAAI,IAAM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;YAC5B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBACtC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;aAC/B;SACD;KACD;IACD,oDAAoD;IACpD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QAChC,QAAQ,IAAI,mBAAmB,CAAC;QAChC,OAAO,GAAG,UAAU,CAAC;KACrB;IAED,4DAA4D;IAC5D,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;IAC7C,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IACrD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAe,CAAC;IAEzD,sDAAsD;IACtD,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAE3B,8BAA8B;IAC9B,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;IAEzB,OAAO,MAAM,CAAC;AACf,CAAC;AAED,eAAe,eAAe,CAAC"},"url":null,"sourceURL":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/main.js":{"lineLengths":[13,62,386,31,56,76,58,60,66,62,72,47,121,30,75,58,27,18,19,22,20,25,500,54,28,36,36,30,28,40,38,38,46,28,20,34,30,20,18,22,72,30,42,32],"data":{"version":3,"file":"main.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/main.ts"],"names":[],"mappings":";;;;AAAA,wDAA0B;AAC1B,4EAAgD;AAChD,0DAA+B;AAC/B,4DAAiC;AACjC,kEAAuC;AACvC,8DAAmC;AACnC,wEAA6C;AAG7C,+CAA8C;AAoD5C,2FApDO,uBAAU,OAoDP;AAhDN,IAAA,KAmBF,IAAA,cAAI,EAAC;IACP,uEAAuE;IACvE,sDAAsD;IACtD,sBAAc;IACd,aAAM;IACN,cAAO;IACP,iBAAU;IACV,eAAQ;IACR,oBAAa;CACd,CAAC,EA3BA,qBAAqB,2BAAA,EACrB,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,YAAY,kBAAA,EACZ,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,cAAc,oBAAA,EACd,aAAa,mBAAA,EACb,aAAa,mBAAA,EACb,iBAAiB,uBAAA,EACL,CAAC,gBAAA,EACb,QAAQ,cAAA,EACR,IAAI,UAAA,EACJ,WAAW,iBAAA,EACX,SAAS,eAAA,EACT,IAAI,UAAA,EACJ,GAAG,SAAA,EACH,KAAK,WAUL,CAAC;AASD,sDAAqB;AACrB,4BAAQ;AACR,oCAAY;AACZ,oCAAY;AACZ,8BAAS;AAET,4BAAQ;AACR,wCAAc;AACd,sCAAa;AACb,sCAAa;AACb,8CAAiB;AAEjB,4BAAQ;AACR,oBAAI;AACJ,kCAAW;AACX,8BAAS;AACT,oBAAI;AACJ,kBAAG;AACH,sBAAK;AAzBP,wEAAwE;AACxE,8BAA8B;AAC9B,MAAM,CAAC,MAAM,CAAC,uBAAU,EAAE,CAAC,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/fork.js":{"lineLengths":[13,62,31,58,72,58,56,66,35,29,28,42,30,21,55,12,25,41,37,33,41,43,43,35,35,51,45,57,33,39,48,33,22,33,6,1,28,1,23,18,24,26,39,25,30,30,43,9,31,5,28,16,1,68,32],"data":{"version":3,"file":"fork.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/fork.ts"],"names":[],"mappings":";;;AAAA,0DAAkC;AAClC,wEAA+C;AAC/C,0DAAkC;AAClC,wDAAgC;AAChC,kEAAyC;AAEzC,mCAAiD;AAEjD,mBAAyB,OAAsB;IAC7C,IAAM,IAAI,GAAG,UAAU,EAAE,CAAC;IAE1B,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IAEpC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE1B,KAAK,CAAC,QAAQ,EAAE,CAAC;IAEjB,IAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,sBAAiB,CAAC,CAAC;IAEhD,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,YAAY,EAAE,KAAK,CAAC,YAAY;QAChC,UAAU,EAAE,KAAK,CAAC,UAAU;QAC5B,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,YAAY,EAAE,KAAK,CAAC,YAAY;QAChC,aAAa,EAAE,KAAK,CAAC,aAAa;QAClC,aAAa,EAAE,KAAK,CAAC,aAAa;QAClC,SAAS,EAAE,KAAK,CAAC,SAAS;QAC1B,SAAS,EAAE,KAAK,CAAC,SAAS;QAC1B,iBAAiB,EAAE,KAAK,CAAC,iBAAiB;QAC1C,cAAc,EAAE,KAAK,CAAC,cAAc;QACpC,qBAAqB,EAAE,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC;QAC5C,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,cAAU,CAAC;QAC1B,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,mBAAc,CAAC;QAClC,WAAW,aAAA;QACX,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,KAAK,EAAE,WAAW,CAAC,KAAK;KACzB,CAAC;AACJ,CAAC;AA/BD,4BA+BC;AAAA,CAAC;AAEF,SAAS,UAAU;IACjB,IAAM,IAAI,GAAsB,EAAE,CAAC;IACnC,IAAM,UAAU,GAAc,EAAE,CAAC;IAEjC,SAAS,GAAG,CAAI,MAAiB;QAC/B,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;YACd,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAClB,UAAU,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;SAChC;QACD,OAAO,UAAU,CAAC,GAAG,CAAM,CAAC;IAC9B,CAAC;IAED,IAAI,IAAI,GAAS,EAAE,GAAG,KAAA,EAAE,CAAC;IAEzB,OAAO,IAAI,CAAC;AACd,CAAC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/types.js":{"lineLengths":[13,62,21,31,35,26,27,31,43,25,5,56,39,46,66,9,20,6,46,28,39,6,20,5,50,41,34,46,34,33,21,5,48,41,6,56,25,113,6,21,13,53,44,34,46,28,36,21,5,51,34,6,59,42,52,30,9,22,6,24,13,51,42,33,46,30,34,21,5,49,52,6,57,61,48,65,16,6,22,13,47,38,28,46,28,30,21,5,45,38,6,53,85,24,9,41,30,9,21,6,18,13,54,45,45,46,26,36,37,21,5,52,25,6,60,49,52,30,9,22,6,25,13,38,34,25,33,28,45,64,49,71,32,37,45,40,29,79,35,31,71,31,30,5,51,34,42,42,36,13,66,9,14,52,9,6,59,39,38,48,9,41,40,34,46,43,9,32,40,59,6,39,32,55,47,9,35,29,57,36,13,61,53,40,17,13,24,9,52,78,73,46,37,13,11,37,6,15,5,18,40,51,25,25,35,31,5,44,60,6,47,35,43,25,9,51,45,9,21,6,17,5,34,31,66,5,45,61,43,29,5,33,1,29,16,25,27,59,42,13,86,10,38,45,48,46,42,49,29,13,73,45,39,34,13,41,39,41,91,17,58,13,60,40,78,73,20,13,46,62,37,55,17,47,52,17,54,13,82,76,76,45,43,10,82,81,82,79,80,34,50,36,61,10,37,51,9,6,28,30,44,44,105,67,53,40,9,20,5,72,77,72,53,54,65,46,48,49,52,47,52,46,61,47,48,69,24,25,29,23,25,25,21,25,27,21,31,25,6,77,76,39,34,49,34,43,46,39,34,29,17,13,9,20,5,52,43,36,150,25,9,58,42,90,13,57,62,29,13,43,24,80,82,81,79,63,57,51,60,17,81,61,29,13,78,82,82,40,56,13,78,81,81,61,44,29,13,81,22,24,28,13,78,76,51,53,10,47,29,33,59,48,13,82,40,43,33,80,59,28,13,72,80,68,79,59,34,73,46,27,42,47,48,17,39,38,26,37,32,17,43,71,53,56,17,22,83,79,63,45,44,45,17,41,61,58,54,17,37,14,82,88,95,28,39,30,63,45,17,39,39,83,40,17,57,63,35,62,21,26,60,21,19,71,45,56,19,76,52,40,17,29,14,91,100,48,43,39,83,40,17,57,71,50,65,21,26,60,21,19,76,52,40,17,29,14,76,33,30,15,24,10,81,77,79,56,76,33,69,66,51,28,13,87,41,10,50,29,80,53,34,47,55,56,45,45,39,57,65,21,26,65,50,45,59,49,21,19,78,50,52,43,50,60,55,56,21,17,73,66,37,36,19,38,64,73,37,72,70,17,13,10,23,12,77,73,42,47,32,9,35,35,32,9,40,5,77,78,14,54,23,46,45,49,40,39,39,47,13,62,55,61,52,26,17,13,9,21,5,39,74,27,72,73,39,38,64,38,39,9,14,36,56,33,35,27,15,9,19,5,39,71,45,26,34,82,61,24,82,79,62,76,56,13,11,5,48,44,63,5,24,76,36,37,16,41,9,31,65,45,9,35,5,74,30,47,37,16,47,24,46,13,9,43,5,76,77,76,46,51,55,67,20,5,71,76,71,44,51,59,74,20,5,57,66,59,60,45,34,19,73,57,43,21,19,35,26,59,41,13,79,10,36,26,59,41,13,84,10,40,5,52,24,28,43,53,33,39,39,36,13,73,47,50,48,13,76,37,51,47,9,49,76,42,40,13,9,25,5,33,51,36,11,20,5,25,55,38,11,5,12,19,35,45,65,27,35,39,57,31,37,37,29,29,27,6,1,30,1,68,33],"data":{"version":3,"file":"types.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/types.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/shared.js":{"lineLengths":[13,62,39,31,58,26,42,26,37,34,76,24,24,120,5,5,75,45,20,76,75,26,45,49,47,45,37,58,6,117,50,27,24,32,32,34,25,9,20,36,12,17,27,33,6,1,28,1,71,78,79,77,75,80,80,80,37,46,9,40,49,55,5,16,80,79,78,75,80,80,15,5,24,44,46,73,73,69,84,66,60,41,80,9,76,72,43,5,1,54,34],"data":{"version":3,"file":"shared.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/shared.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/path-visitor.js":{"lineLengths":[13,62,31,58,66,35,45,34,42,49,43,45,49,18,46,45,87,9,27,40,61,35,58,59,52,72,31,37,6,46,44,41,49,67,13,9,74,50,55,48,49,43,60,56,55,13,9,31,5,73,45,27,9,39,32,35,9,42,45,87,13,35,10,56,33,28,37,53,41,27,6,37,38,48,52,13,9,22,5,55,66,6,36,29,29,94,72,9,71,30,37,37,36,35,40,35,9,45,66,9,52,37,24,13,55,31,9,17,35,55,67,75,78,76,72,74,77,57,37,13,9,20,6,51,29,27,39,49,78,71,66,38,44,10,22,6,62,69,6,45,43,73,73,69,56,9,42,32,9,31,33,40,45,46,25,52,17,63,13,21,45,13,9,14,76,37,45,9,6,43,42,32,9,48,32,9,31,35,58,9,42,36,9,14,56,73,75,41,47,33,53,44,13,47,32,50,46,53,77,17,53,13,50,57,13,9,26,5,42,54,42,9,60,6,45,49,32,9,49,35,6,37,36,6,41,36,6,46,32,45,36,13,49,36,13,46,36,13,52,31,32,33,35,15,36,43,30,9,48,32,9,78,67,60,33,46,23,5,69,74,70,56,37,30,50,36,13,46,36,13,36,43,24,10,51,50,50,36,13,58,36,13,79,35,82,75,57,48,13,44,81,57,71,46,75,56,52,17,13,52,99,13,40,38,10,40,45,50,36,13,46,36,13,58,36,13,44,98,10,37,42,50,36,13,46,36,13,58,36,13,44,101,10,72,37,6,56,40,29,6,23,1,36,1,68,40],"data":{"version":3,"file":"path-visitor.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/path-visitor.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/node-path.js":{"lineLengths":[13,62,31,58,56,58,35,31,42,29,27,45,43,40,42,63,42,84,9,49,6,66,22,28,30,27,30,9,7,34,15,30,53,39,46,19,33,13,10,17,30,55,39,48,19,35,13,10,16,30,54,39,47,19,34,13,9,7,31,25,27,26,61,6,29,44,23,57,6,66,36,31,34,25,9,33,37,6,77,38,31,33,35,51,35,13,21,35,13,9,47,31,9,26,6,58,37,31,33,35,34,43,43,9,29,6,44,53,6,7,78,62,6,74,73,25,6,75,76,77,52,7,58,33,18,25,9,30,45,40,25,9,46,41,25,9,41,31,22,29,13,9,30,28,35,33,34,57,45,46,36,37,38,42,53,54,43,41,42,36,44,53,54,44,47,39,49,50,46,48,40,40,25,67,55,71,29,40,25,21,28,37,17,38,38,40,77,82,81,39,37,47,58,28,84,80,36,17,35,38,44,45,43,41,42,42,44,41,49,43,36,28,37,17,27,57,49,45,46,40,41,38,43,41,42,44,45,36,42,53,54,49,51,52,44,53,54,28,37,17,20,54,45,45,56,17,9,47,44,36,24,21,6,29,45,47,5,79,32,44,76,75,63,66,5,24,12,15,14,14,14,35,51,28,19,23,34,36,31,11,7,43,43,24,9,34,53,9,33,66,53,15,9,21,5,45,29,48,47,6,40,38,6,37,65,29,38,49,46,34,46,59,17,28,13,54,45,49,59,17,28,13,53,53,34,53,59,17,25,13,49,41,45,59,17,25,13,51,41,45,59,17,25,13,56,39,43,59,17,25,13,35,39,43,59,17,25,13,50,33,43,47,59,17,25,13,25,9,20,5,7,100,7,56,66,75,61,49,13,9,71,61,49,13,9,63,60,9,33,5,56,59,59,61,40,80,57,9,44,85,93,64,13,67,61,51,9,5,20,1,33,1,68,37],"data":{"version":3,"file":"node-path.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/node-path.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/path.js":{"lineLengths":[13,62,31,35,58,26,31,27,42,43,45,55,38,80,9,25,48,36,13,9,14,30,24,9,66,58,27,50,37,74,36,25,75,75,33,6,28,34,66,76,78,5,39,40,59,36,40,60,51,89,9,25,5,74,38,59,32,6,29,23,55,38,9,24,33,41,48,9,20,6,48,28,36,18,77,39,45,44,13,9,78,77,80,51,34,35,45,54,13,9,6,46,24,40,56,20,22,6,52,24,40,49,39,13,20,22,6,29,49,35,27,30,9,39,25,30,9,36,25,22,25,9,30,39,25,9,14,39,40,9,31,29,40,40,43,45,44,43,40,17,42,42,44,32,13,9,28,28,41,48,51,40,17,44,55,13,10,5,33,38,40,15,22,6,37,22,55,37,9,47,64,15,22,6,31,22,55,37,9,35,42,55,6,29,35,40,44,28,32,6,44,36,51,47,24,9,35,40,53,9,15,20,6,47,22,55,37,9,33,31,39,40,39,9,51,6,45,22,55,37,9,33,31,43,40,39,9,51,6,49,38,32,9,33,18,59,24,9,35,44,57,52,42,9,46,78,66,52,25,50,13,9,14,71,77,73,48,42,9,52,32,9,54,32,9,20,5,48,25,48,57,37,43,41,52,75,44,45,46,13,79,47,36,13,70,36,13,19,30,34,46,41,13,18,61,40,17,49,45,45,17,45,69,17,42,40,17,13,9,31,45,41,13,62,31,9,31,42,30,37,76,48,9,14,54,9,23,6,16,1,29,1,68,32],"data":{"version":3,"file":"path.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/path.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/scope.js":{"lineLengths":[13,62,31,35,58,45,28,42,26,38,31,43,43,27,51,39,81,9,56,41,9,18,26,50,36,13,42,9,14,31,22,9,39,34,40,64,36,43,36,33,11,6,28,45,24,55,49,25,73,42,28,77,47,244,98,45,75,6,29,67,23,35,20,48,6,39,20,45,6,45,21,44,36,13,9,14,26,9,72,65,48,20,22,47,20,9,34,69,6,54,61,45,62,44,9,105,26,6,32,37,45,58,43,13,42,55,40,13,60,32,9,6,34,20,29,6,31,20,26,6,52,30,49,62,46,50,60,19,13,9,36,53,79,72,67,56,13,18,63,13,9,5,61,30,26,68,34,56,9,20,67,9,39,44,68,15,9,51,58,48,15,71,81,9,78,95,99,99,55,9,61,49,71,9,51,55,53,23,72,72,73,71,43,54,9,63,58,47,54,40,17,68,15,9,5,40,35,24,9,78,72,40,38,35,33,24,9,21,5,61,30,46,51,9,62,31,49,9,47,54,31,49,81,9,52,59,49,65,55,9,41,53,59,58,53,71,76,77,50,75,73,78,75,55,34,52,17,13,9,14,59,9,5,48,40,43,51,54,57,13,18,55,13,9,48,58,58,9,44,54,72,50,57,55,17,63,49,69,68,17,53,64,71,17,15,9,43,53,69,48,56,54,17,52,62,70,17,15,9,46,56,61,9,52,62,38,57,48,67,62,9,5,49,40,43,51,51,54,13,18,52,13,9,5,53,44,52,49,54,9,14,52,9,5,33,59,37,22,21,6,37,59,41,22,21,6,37,25,31,33,21,6,17,1,30,1,68,33],"data":{"version":3,"file":"scope.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/scope.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/equiv.js":{"lineLengths":[13,62,31,35,58,26,42,44,44,43,45,41,45,49,55,41,35,9,14,31,9,48,5,52,29,56,43,30,59,17,13,18,72,68,13,9,6,45,51,34,9,52,5,47,22,24,9,31,58,9,32,59,9,30,50,9,32,65,40,46,47,9,22,5,53,26,31,56,30,43,13,25,9,43,30,36,13,36,29,13,58,29,13,30,56,44,58,17,13,9,20,5,54,27,33,25,9,56,32,30,41,13,25,9,38,39,38,39,40,50,37,52,52,34,43,17,66,33,17,34,60,51,62,21,17,13,24,9,27,25,9,76,66,44,42,40,9,42,29,48,39,29,13,35,9,33,35,18,9,21,5,33,1,28,1,68,33],"data":{"version":3,"file":"equiv.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/equiv.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es-proposals.js":{"lineLengths":[13,62,31,59,58,60,26,31,42,26,29,21,44,35,26,33,55,50,17,20,22,28,48,19,77,27,77,20,22,39,20,40,31,31,30,41,71,57,26,22,30,60,43,25,31,33,31,85,7,52,48,27,28,28,101,26,28,26,80,56,48,27,22,22,39,1,28,1,68,40],"data":{"version":3,"file":"es-proposals.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es-proposals.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es2022.js":{"lineLengths":[13,62,31,60,59,36,26,31,42,29,22,29,22,43,1,28,68,34],"data":{"version":3,"file":"es2022.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es2022.ts"],"names":[],"mappings":";;;AACA,4DAAiC;AACjC,2DAAmC;AACnC,oCAAkD;AAElD,mBAAyB,IAAU;IACjC,IAAI,CAAC,GAAG,CAAC,gBAAS,CAAC,CAAC;IAEpB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAE3B,GAAG,CAAC,aAAa,CAAC;SACf,KAAK,CAAC,aAAa,CAAC;SACpB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC;AAVD,4BAUC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es2021.js":{"lineLengths":[13,62,31,70,60,36,26,81,52,31,31,1,28,68,34],"data":{"version":3,"file":"es2021.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es2021.ts"],"names":[],"mappings":";;;AACA,sEAA8C;AAC9C,4DAAiC;AACjC,oCAAkD;AAElD,mBAAyB,IAAU;IACjC,6EAA6E;IAC7E,gDAAgD;IAChD,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC;IACvB,IAAI,CAAC,GAAG,CAAC,gBAAS,CAAC,CAAC;AACtB,CAAC;AALD,4BAKC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/operators/es2021.js":{"lineLengths":[13,62,31,39,60,26,44,81,58,51,32,63,54,9,7,18,1,28,68,34],"data":{"version":3,"file":"es2021.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/operators/es2021.ts"],"names":[],"mappings":";;;AAAA,uCAAqD;AACrD,4DAAoC;AAEpC,mBAAyB,IAAgC;IACvD,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC;IAEtC,6EAA6E;IAC7E,sDAAsD;IACtD,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAA,EAAE;QAChC,IAAM,QAAQ,GAAG,EAAE,GAAG,GAAG,CAAC;QAC1B,IAAI,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpD,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3C;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAbD,4BAaC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/operators/es2020.js":{"lineLengths":[13,62,31,39,60,26,44,68,58,52,43,5,18,1,28,68,34],"data":{"version":3,"file":"es2020.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/operators/es2020.ts"],"names":[],"mappings":";;;AAAA,uCAAqD;AACrD,4DAAoC;AAEpC,mBAAyB,IAAgC;IACvD,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC;IAEtC,gEAAgE;IAChE,sDAAsD;IACtD,IAAI,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC7C,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAVD,4BAUC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/operators/es2016.js":{"lineLengths":[13,62,31,39,56,26,42,67,68,63,51,42,5,56,47,5,18,1,28,68,34],"data":{"version":3,"file":"es2016.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/operators/es2016.ts"],"names":[],"mappings":";;;AAAA,uCAAqD;AACrD,wDAAgC;AAEhC,mBAAyB,IAAgC;IACvD,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,cAAU,CAAC,CAAC;IAEpC,+DAA+D;IAC/D,gEAAgE;IAChE,2DAA2D;IAC3D,IAAI,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC5C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnC;IACD,IAAI,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;QACjD,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACxC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAdD,4BAcC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/operators/core.js":{"lineLengths":[13,62,39,22,12,26,37,33,30,36,16,27,25,10,30,46,33,29,10,27,23,10,6,1,28,68,32],"data":{"version":3,"file":"core.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/operators/core.ts"],"names":[],"mappings":";;AAAA,uCAAqD;AAErD;IACE,OAAO;QACL,eAAe,EAAE;YACf,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK;YACxB,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI;YACpB,IAAI,EAAE,IAAI,EAAE,KAAK;YACjB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACvB,GAAG;YACH,GAAG,EAAE,GAAG,EAAE,IAAI;YACd,YAAY;SACb;QAED,mBAAmB,EAAE;YACnB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;YACjC,KAAK,EAAE,KAAK,EAAE,MAAM;YACpB,IAAI,EAAE,IAAI,EAAE,IAAI;SACjB;QAED,gBAAgB,EAAE;YAChB,IAAI,EAAE,IAAI;SACX;KACF,CAAC;AACJ,CAAC;AAtBD,4BAsBC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es2020.js":{"lineLengths":[13,62,31,70,60,59,58,26,81,49,31,31,42,29,27,44,35,27,28,24,44,31,29,36,40,82,24,23,22,55,25,45,27,45,26,28,28,50,33,32,49,54,87,35,34,60,54,1,28,1,68,34],"data":{"version":3,"file":"es2020.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es2020.ts"],"names":[],"mappings":";;;AACA,sEAA8C;AAC9C,4DAAiC;AACjC,2DAAmC;AACnC,0DAAgE;AAEhE,mBAAyB,IAAU;IACjC,6EAA6E;IAC7E,6CAA6C;IAC7C,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC;IAEvB,IAAI,CAAC,GAAG,CAAC,gBAAS,CAAC,CAAC;IAEpB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAC3B,IAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IAEzB,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC;IACtC,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAEjC,GAAG,CAAC,kBAAkB,CAAC;SACpB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,QAAQ,CAAC;SACf,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAEtC,GAAG,CAAC,sBAAsB,CAAC;SACxB,KAAK,CAAC,aAAa,CAAC;SACpB,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC;SAC3B,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;SAC/B,KAAK,CAAC,UAAU,EAAE,EAAE,CACnB,GAAG,CAAC,YAAY,CAAC,EACjB,IAAI,EACJ,KAAK,CAAC,CACP,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAEvB,oBAAoB;IACpB,GAAG,CAAC,cAAc,CAAC;SAChB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IAEjD,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IAEvC,GAAG,CAAC,kBAAkB,CAAC;SACpB,KAAK,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IAEvC,GAAG,CAAC,iBAAiB,CAAC;SACnB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;IAE5C,GAAG,CAAC,wBAAwB,CAAC;SAC1B,KAAK,CAAC,gBAAgB,CAAC;SACvB,KAAK,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC;SACxC,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAEhD,mFAAmF;IACnF,GAAG,CAAC,0BAA0B,CAAC;SAC5B,KAAK,CAAC,kBAAkB,CAAC;SACzB,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;SACnD,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AAClD,CAAC;AAvDD,4BAuDC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es2019.js":{"lineLengths":[13,62,31,60,59,58,26,31,42,29,27,55,22,68,1,28,1,68,34],"data":{"version":3,"file":"es2019.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es2019.ts"],"names":[],"mappings":";;;AACA,4DAAiC;AACjC,2DAAmC;AACnC,0DAAgE;AAEhE,mBAAyB,IAAU;IACjC,IAAI,CAAC,GAAG,CAAC,gBAAS,CAAC,CAAC;IAEpB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAC3B,IAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC,QAAQ,CAAC;IAEjD,GAAG,CAAC,aAAa,CAAC;SACf,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AAChE,CAAC;AAVD,4BAUC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es2018.js":{"lineLengths":[13,62,31,60,59,58,26,31,42,29,27,55,25,52,13,25,22,26,46,27,82,32,26,71,13,32,25,26,43,24,126,1,28,1,68,34],"data":{"version":3,"file":"es2018.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es2018.ts"],"names":[],"mappings":";;;AACA,4DAAiC;AACjC,2DAAmC;AACnC,0DAAgE;AAEhE,mBAAyB,IAAU;IACjC,IAAI,CAAC,GAAG,CAAC,gBAAS,CAAC,CAAC;IAEpB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAC3B,IAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC,QAAQ,CAAC;IAEjD,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IAE9C,SAAS;IACT,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAExC,GAAG,CAAC,kBAAkB,CAAC;SACpB,KAAK,CAAC,YAAY,EAAE,CAAC,EAAE,CACtB,GAAG,CAAC,UAAU,CAAC,EACf,GAAG,CAAC,gBAAgB,CAAC,EAAE,SAAS;QAChC,GAAG,CAAC,eAAe,CAAC,CACrB,CAAC,CAAC,CAAC;IAEN,GAAG,CAAC,iBAAiB,CAAC;SACnB,KAAK,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC;IAE/D,SAAS;IACT,GAAG,CAAC,uBAAuB,CAAC;SACzB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAErC,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,GAAG,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1H,CAAC;AAnCD,4BAmCC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es2017.js":{"lineLengths":[13,62,31,60,59,58,26,31,42,29,55,19,52,26,28,26,46,1,28,1,68,34],"data":{"version":3,"file":"es2017.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es2017.ts"],"names":[],"mappings":";;;AACA,4DAAiC;AACjC,2DAAmC;AACnC,0DAAgE;AAEhE,mBAAyB,IAAU;IACjC,IAAI,CAAC,GAAG,CAAC,gBAAS,CAAC,CAAC;IAEpB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAC3B,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC,QAAQ,CAAC;IAEjD,GAAG,CAAC,UAAU,CAAC;SACZ,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IAE9C,GAAG,CAAC,iBAAiB,CAAC;SACnB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;AAC1C,CAAC;AAdD,4BAcC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es2016.js":{"lineLengths":[13,62,31,70,54,36,26,73,80,50,31,28,1,28,1,68,34],"data":{"version":3,"file":"es2016.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es2016.ts"],"names":[],"mappings":";;;AACA,sEAA8C;AAC9C,sDAA2B;AAC3B,oCAAkD;AAElD,mBAAyB,IAAU;IACjC,qEAAqE;IACrE,4EAA4E;IAC5E,8CAA8C;IAC9C,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC;IACvB,IAAI,CAAC,GAAG,CAAC,aAAM,CAAC,CAAC;AACnB,CAAC;AAND,4BAMC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/es6.js":{"lineLengths":[13,62,31,56,59,58,26,29,42,29,27,55,19,55,56,78,17,70,58,22,25,26,42,86,80,31,25,26,43,30,65,74,50,29,66,34,40,46,71,66,44,63,68,73,55,54,25,27,39,70,42,41,26,28,38,55,55,30,28,42,41,53,54,34,28,42,41,53,54,29,22,39,38,42,32,19,79,62,52,55,55,25,56,26,25,32,79,41,55,24,25,28,76,23,25,26,55,24,22,26,46,26,100,24,75,25,75,78,73,77,74,73,74,28,25,31,38,43,27,29,48,65,40,40,54,53,156,24,29,21,79,55,53,29,28,61,47,20,29,22,43,27,29,42,49,40,76,26,28,42,67,40,76,16,28,17,68,47,35,63,78,76,74,26,27,77,77,37,70,78,76,50,67,70,40,26,33,35,46,28,33,33,24,33,35,33,24,28,29,52,143,40,63,23,7,33,29,53,59,75,69,26,33,35,46,35,29,29,73,31,29,24,41,35,28,30,40,48,26,28,39,50,51,26,22,31,60,32,23,28,34,41,46,1,28,1,68,31],"data":{"version":3,"file":"es6.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/es6.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/core.js":{"lineLengths":[13,62,31,66,59,58,26,42,26,23,21,44,35,25,162,78,18,20,79,15,27,30,79,25,40,38,61,19,30,33,15,22,33,41,59,18,22,22,43,19,22,67,42,45,55,52,35,78,63,53,25,27,22,43,60,59,30,27,28,48,22,27,49,41,46,74,27,27,31,42,41,25,27,23,71,28,27,23,71,24,27,32,43,41,26,27,50,49,44,54,26,27,26,56,25,27,26,46,23,27,47,46,69,57,6,62,50,72,76,79,22,22,40,39,70,46,25,27,30,41,41,27,27,30,40,42,23,27,48,79,51,53,41,25,27,39,73,42,41,56,42,30,41,38,40,29,40,39,30,29,38,49,60,29,22,28,36,70,36,54,26,28,26,58,27,28,28,48,63,19,66,38,48,60,43,29,28,29,51,75,26,28,48,41,45,74,43,52,59,27,28,43,42,41,43,67,31,28,43,46,67,43,40,27,28,48,42,45,34,61,28,28,43,43,41,43,32,28,49,41,47,47,24,28,37,43,75,76,37,49,25,28,37,43,47,49,27,28,48,43,68,49,38,33,42,42,24,9,21,7,33,21,22,36,51,49,21,39,22,30,55,18,28,23,75,62,18,27,31,72,76,76,73,33,52,55,1,28,1,68,32],"data":{"version":3,"file":"core.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/core.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/jsx.js":{"lineLengths":[13,62,31,72,59,58,26,37,42,29,27,55,23,22,31,74,58,50,38,37,30,25,24,28,22,31,28,22,35,49,45,30,34,36,78,48,52,104,29,22,26,46,77,33,28,28,79,199,11,21,28,62,58,86,60,52,73,72,70,66,38,40,37,52,47,37,57,46,38,28,22,51,38,64,58,28,22,22,39,22,28,64,60,60,61,29,22,17,29,22,17,18,25,30,31,43,26,7,29,22,17,25,22,28,48,1,28,1,68,31],"data":{"version":3,"file":"jsx.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/jsx.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/flow.js":{"lineLengths":[13,62,31,72,80,59,58,26,37,41,42,29,27,55,17,30,34,23,28,26,17,30,26,17,30,26,17,29,26,17,31,26,17,31,26,17,31,26,17,38,26,30,31,30,41,42,39,26,30,31,30,38,26,30,29,30,31,26,17,38,26,30,31,30,32,26,17,39,26,30,32,30,25,22,32,50,33,26,32,50,36,26,17,29,26,17,29,26,17,31,26,17,31,26,17,33,26,64,52,45,58,76,28,22,52,51,49,36,30,26,29,47,31,26,58,30,70,6,75,86,69,51,86,19,22,22,44,68,29,22,42,60,40,35,61,28,22,36,39,38,40,60,53,33,22,23,54,53,34,22,37,86,40,32,26,38,75,78,31,26,36,43,90,28,26,41,45,45,36,26,53,45,44,36,30,26,23,43,37,26,23,43,31,26,26,44,35,22,26,44,33,22,61,39,40,35,33,34,35,22,24,49,37,22,24,44,24,26,54,30,60,74,71,24,61,26,22,20,39,75,96,34,26,33,51,81,31,29,39,39,93,51,53,27,38,40,27,22,20,39,96,20,29,47,39,75,41,27,27,48,21,29,63,39,75,43,55,28,28,51,54,29,28,46,47,56,30,26,23,43,26,27,20,40,26,27,20,39,78,23,38,21,24,27,28,59,46,31,27,32,56,35,29,64,34,138,43,58,39,108,69,38,29,24,69,28,93,39,28,31,17,28,31,23,43,19,78,25,95,24,95,12,26,29,28,39,120,26,41,53,40,25,41,52,40,25,41,86,40,25,25,56,28,28,39,52,27,28,39,39,27,28,39,39,30,20,40,1,28,1,68,32],"data":{"version":3,"file":"flow.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/flow.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/type-annotations.js":{"lineLengths":[13,3,59,75,34,3,62,31,59,58,26,42,29,27,55,82,101,21,67,24,67,19,62,66,24,58,52,52,67,24,26,35,21,69,141,124,7,1,28,1,68,44],"data":{"version":3,"file":"type-annotations.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/type-annotations.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAGH,2DAAmC;AACnC,0DAAgE;AAEhE,mBAAyB,IAAU;IACjC,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IAClC,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IACzB,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IACvB,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC,QAAQ,CAAC;IAE/C,IAAI,cAAc,GAAG,EAAE,CACrB,GAAG,CAAC,gBAAgB,CAAC,EACrB,GAAG,CAAC,kBAAkB,CAAC,EACvB,IAAI,CACL,CAAC;IAEF,IAAI,aAAa,GAAG,EAAE,CACpB,GAAG,CAAC,0BAA0B,CAAC,EAC/B,GAAG,CAAC,4BAA4B,CAAC,EACjC,IAAI,CACL,CAAC;IAEF,GAAG,CAAC,YAAY,CAAC;SACd,KAAK,CAAC,gBAAgB,EAAE,cAAc,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAE7D,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,gBAAgB,EAAE,cAAc,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAE7D,GAAG,CAAC,UAAU,CAAC;SACZ,KAAK,CAAC,YAAY,EAAE,cAAc,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;SACrD,KAAK,CAAC,gBAAgB,EAAE,aAAa,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAE5D,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,CAAC;SACjD,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;SAC3C,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC3C,KAAK,CAAC,gBAAgB,EAAE,cAAc,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAE7D,CAAC,kBAAkB;QAClB,iBAAiB;KACjB,CAAC,OAAO,CAAC,UAAA,QAAQ;QAChB,GAAG,CAAC,QAAQ,CAAC;aACV,KAAK,CAAC,gBAAgB,EAAE,aAAa,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;aACxD,KAAK,CAAC,qBAAqB,EACrB,EAAE,CAAC,GAAG,CAAC,4BAA4B,CAAC,EACjC,GAAG,CAAC,8BAA8B,CAAC,EACnC,IAAI,CAAC,EACR,QAAQ,CAAC,MAAM,CAAC,CAAC;aACvB,KAAK,CAAC,YAAY,EACZ,EAAE,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,EACxB,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAC1C,QAAQ,CAAC,UAAU,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC;AAjDD,4BAiDC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/esprima.js":{"lineLengths":[13,62,31,72,59,58,26,37,42,55,29,27,30,101,12,19,82,7,23,77,24,145,12,73,42,26,33,29,27,31,27,17,28,29,64,34,91,10,108,69,16,25,61,15,25,61,1,28,1,68,35],"data":{"version":3,"file":"esprima.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/esprima.ts"],"names":[],"mappings":";;;AACA,wEAA4C;AAC5C,2DAAmC;AACnC,0DAAgE;AAEhE,mBAAyB,IAAU;IACjC,IAAI,CAAC,GAAG,CAAC,sBAAc,CAAC,CAAC;IAEzB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IAClC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC,QAAQ,CAAC;IAC/C,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IACzB,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IAEvB,GAAG,CAAC,qBAAqB,CAAC;SACvB,KAAK,CAAC,cAAc,EAAE,CAAC,EAAE,CACxB,GAAG,CAAC,oBAAoB,CAAC,EACzB,GAAG,CAAC,YAAY,CAAC,CAAC,qBAAqB;SACxC,CAAC,CAAC,CAAC;IAEN,GAAG,CAAC,UAAU,CAAC;SACZ,KAAK,CAAC,OAAO,EAAE,EAAE,CAChB,GAAG,CAAC,YAAY,CAAC,EACjB,GAAG,CAAC,SAAS,CAAC,CAAC,qBAAqB;KACrC,CAAC,CAAC;IAEL,GAAG,CAAC,cAAc,CAAC;SAChB,KAAK,CAAC,UAAU,EAAE,CAAC,EAAE,CACpB,GAAG,CAAC,SAAS,CAAC,EACd,GAAG,CAAC,eAAe,CAAC,EACpB,IAAI,CACL,CAAC,CAAC,CAAC;IAEN,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,YAAY,EAAE,CAAC,EAAE,CACtB,GAAG,CAAC,UAAU,CAAC,EACf,GAAG,CAAC,iBAAiB,CAAC,EACtB,GAAG,CAAC,uBAAuB,CAAC,EAC5B,GAAG,CAAC,gBAAgB,CAAC,CAAC,mBAAmB;SAC1C,CAAC,CAAC,CAAC;IAEN,qEAAqE;IACrE,sCAAsC;IACtC,GAAG,CAAC,iBAAiB,CAAC;SACnB,KAAK,CAAC,iBAAiB,CAAC;SACxB,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAEvB,uBAAuB;IACvB,GAAG,CAAC,sBAAsB,CAAC;SACxB,KAAK,CAAC,WAAW,CAAC;SAClB,KAAK,EAAE,CAAC;IAEX,GAAG,CAAC,mBAAmB,CAAC;SACrB,KAAK,CAAC,aAAa,CAAC;SACpB,KAAK,CAAC,SAAS,EAAE,aAAa,EAAE,YAAY,EAAE,QAAQ,CAAC;SACvD,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;SACzB,KAAK,CAAC,aAAa,EAAE,EAAE,CACtB,GAAG,CAAC,aAAa,CAAC,EAClB,GAAG,CAAC,YAAY,CAAC,EAAE,mBAAmB;IACtC,IAAI,CACL,CAAC;SACD,KAAK,CAAC,YAAY,EAAE,CAAC,EAAE,CACtB,GAAG,CAAC,iBAAiB,CAAC,EACtB,GAAG,CAAC,sBAAsB,CAAC,CAC5B,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC;SACvB,KAAK,CAAC,QAAQ,EAAE,EAAE,CACjB,GAAG,CAAC,SAAS,CAAC,EACd,IAAI,CACL,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAEvB,GAAG,CAAC,OAAO,CAAC;SACT,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAEvD,GAAG,CAAC,MAAM,CAAC;SACR,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACzD,CAAC;AAvED,4BAuEC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/babel.js":{"lineLengths":[13,62,31,59,68,56,36,26,42,29,35,29,48,32,28,22,31,48,49,25,28,17,1,28,68,33],"data":{"version":3,"file":"babel.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/babel.ts"],"names":[],"mappings":";;;AACA,2DAAmC;AACnC,oEAAwC;AACxC,wDAA6B;AAC7B,oCAAkD;AAElD,mBAAyB,IAAU;IACjC,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IACpC,IAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAE3B,IAAI,CAAC,GAAG,CAAC,oBAAY,CAAC,CAAC;IACvB,IAAI,CAAC,GAAG,CAAC,cAAO,CAAC,CAAC;IAElB,4CAA4C;IAC5C,GAAG,CAAC,uBAAuB,CAAC;SACzB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAEzB,4CAA4C;IAC5C,6CAA6C;IAC7C,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,EAAE,CAAC;AACb,CAAC;AAlBD,4BAkBC;AAED,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/babel-core.js":{"lineLengths":[13,62,31,72,59,58,26,27,37,42,55,29,27,51,15,27,17,23,28,22,43,25,28,34,53,44,34,28,28,48,35,27,26,46,33,27,26,46,23,25,61,22,25,61,20,22,23,49,27,36,23,56,31,22,23,32,25,27,22,42,70,18,22,22,42,69,87,52,63,16,20,13,39,28,14,35,63,24,36,62,18,14,10,5,20,30,25,23,32,99,31,25,23,31,58,51,30,25,23,73,49,44,89,47,48,31,25,23,32,89,22,25,16,48,25,25,23,33,30,25,34,33,31,45,52,7,165,24,21,20,16,34,30,10,7,144,56,27,28,28,57,61,23,34,59,50,79,42,45,54,55,51,45,47,77,25,22,30,79,62,45,47,55,262,38,20,29,22,43,22,41,69,80,29,41,69,42,32,29,66,80,54,23,71,19,29,35,21,103,49,90,91,7,19,29,32,35,21,58,56,58,97,80,58,58,58,59,7,147,37,35,24,49,24,25,28,53,77,25,22,26,46,23,22,26,46,28,27,39,73,42,41,59,17,28,17,1,28,1,68,38],"data":{"version":3,"file":"babel-core.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/babel-core.ts"],"names":[],"mappings":";;;AACA,wEAA4C;AAC5C,2DAAmC;AACnC,0DAAgE;AAGhE,mBAAyB,IAAU;;IACjC,IAAI,CAAC,GAAG,CAAC,sBAAc,CAAC,CAAC;IAEzB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAW,CAAC,CAAC;IACpC,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAY,CAAC,CAAC,QAAQ,CAAC;IACjD,IAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAC3B,IAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IAEvB,IAAW,WAAW,GACpB,KAAK,CAAC,YAAY,UADE,CACD;IAEvB,GAAG,CAAC,MAAM,CAAC;SACR,KAAK,CAAC,WAAW,CAAC;SAClB,KAAK,EAAE,CAAC;IAEX,GAAG,CAAC,cAAc,CAAC;SAChB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAErC,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;SACzB,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;SAC5C,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAEtC,GAAG,CAAC,yBAAyB,CAAC;SAC3B,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAE1C,GAAG,CAAC,0BAA0B,CAAC;SAC5B,KAAK,CAAC,WAAW,CAAC;SAClB,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAExC,GAAG,CAAC,wBAAwB,CAAC;SAC1B,KAAK,CAAC,WAAW,CAAC;SAClB,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAExC,GAAG,CAAC,cAAc,CAAC;SAChB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAEvD,GAAG,CAAC,aAAa,CAAC;SACf,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAEvD,GAAG,CAAC,WAAW,CAAC;SACb,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAE3C,GAAG,CAAC,kBAAkB,CAAC;SACpB,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC;SAC3B,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IAElD,GAAG,CAAC,sBAAsB,CAAC;SACxB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAE1B,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,WAAW,CAAC;SAClB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;SACjC,KAAK,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;IAEhE,GAAG,CAAC,SAAS,CAAC;SACX,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;SACjC,KAAK,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC;SAC5D,KAAK,CAAC,aAAa,EAAE,EAAE,CAAC,GAAG,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAEjF,SAAS,gBAAgB,CAMvB,YAA0B,EAC1B,KAA8B;QAD9B,6BAAA,EAAA,qBAA0B;QAG1B,OAAO;YACL,OAAO;YACP;gBACE,QAAQ,EAAE,YAAY;gBACtB,GAAG,EAAE,MAAM;aACZ;YACD,SAAS,UAAU;gBACjB,IAAM,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACjD,OAAO;oBACL,QAAQ,EAAE,KAAK;oBACf,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;iBAC1C,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IAED,gBAAgB;IAChB,CAAA,KAAA,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;SACtB,KAAK,WAAI,gBAAgB,CAAkB,MAAM,EAAE,UAAA,GAAG,IAAI,OAAA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAnB,CAAmB,CAAC,EAAE;IAEnF,CAAA,KAAA,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC;SACtB,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;SAChD,KAAK,WAAI,gBAAgB,CAAmB,MAAM,CAAC,EAAE;IAExD,CAAA,KAAA,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,CAAC;QACf,iEAAiE;QACjE,yCAAyC;SACxC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAA;SAClC,KAAK,WAAI,gBAAgB,CAAkB,MAAM,EAAE,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,GAAG,EAAT,CAAS,CAAC,EAAE;IAEzE,2CAA2C;IAC3C,4CAA4C;IAC5C,CAAA,KAAA,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;SACtB,KAAK,WAAI,gBAAgB,CAAmB,MAAM,EAAE,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,GAAG,EAAT,CAAS,CAAC,EAAE;IAE1E,GAAG,CAAC,aAAa,CAAC;SACf,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,EAAE;SACP,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAE1C,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAE3B,CAAA,KAAA,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;SACzB,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC;SACxB,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC;SACtB,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE;QACtB,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAA;SACD,KAAK,WAAI,gBAAgB,CACxB,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,EACvB,UAAA,GAAG,IAAI,OAAA,WAAI,GAAG,CAAC,OAAO,cAAI,GAAG,CAAC,KAAK,IAAI,EAAE,CAAE,EAApC,CAAoC,CAC5C,EAGA,KAAK,CAAC,OAAO,EAAE;QACd,OAAO,EAAE,MAAM;QACf,KAAK,EAAE,MAAM;KACd,EAAE;QACD,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,IAAI,wBAAwB,GAAG,EAAE,CAC/B,GAAG,CAAC,UAAU,CAAC,EACf,GAAG,CAAC,cAAc,CAAC,EACnB,GAAG,CAAC,gBAAgB,CAAC,EACrB,GAAG,CAAC,gBAAgB,CAAC,EACrB,GAAG,CAAC,eAAe,CAAC,CACrB,CAAC;IAEF,oDAAoD;IACpD,GAAG,CAAC,kBAAkB,CAAC;SACpB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,YAAY,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC;IAEnD,yDAAyD;IACzD,GAAG,CAAC,cAAc,CAAC;SAChB,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC;SACzB,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC;SAClD,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;SACzC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;SACtE,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;SACjC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,gBAAgB,CAAC,CAAC;SACpC,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC7C,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC9C,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC1C,KAAK,CAAC,eAAe,EAAE,aAAa;IAC9B,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC;SACvB,KAAK,CAAC,YAAY,EACZ,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAE3B,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC;SACrB,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;SACtE,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;SACrD,KAAK,CAAC,eAAe,EAAE,aAAa;IAC9B,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC;SACvB,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IAEjD,IAAI,gBAAgB,GAAG,EAAE,CACvB,GAAG,CAAC,kBAAkB,CAAC,EACvB,GAAG,CAAC,oBAAoB,CAAC,EACzB,GAAG,CAAC,yBAAyB,CAAC,EAC9B,GAAG,CAAC,eAAe,CAAC,EACpB,GAAG,CAAC,sBAAsB,CAAC,EAC3B,GAAG,CAAC,aAAa,CAAC,EAClB,GAAG,CAAC,oBAAoB,CAAC,EACzB,GAAG,CAAC,uBAAuB,CAAC,EAC5B,GAAG,CAAC,aAAa,CAAC,CACnB,CAAC;IAEF,kCAAkC;IAClC,GAAG,CAAC,WAAW,CAAC;SACb,KAAK,CAAC,aAAa,CAAC;SACpB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,MAAM,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAErC,GAAG,CAAC,aAAa,CAAC;SACf,KAAK,CAAC,aAAa,EAAE,UAAU,CAAC;SAChC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC;SAC5D,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAE1E,GAAG,CAAC,oBAAoB,CAAC;SACtB,KAAK,CAAC,aAAa,EAAE,UAAU,CAAC;SAChC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC;SAC5D,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpC,GAAG,CAAC,uBAAuB,CAAC;SACzB,KAAK,CAAC,aAAa,CAAC;SACpB,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,CAAC;SACzD,KAAK,CAAC,KAAK,EAAE,EAAE,CACd,GAAG,CAAC,SAAS,CAAC,EACd,GAAG,CAAC,YAAY,CAAC,EACjB,GAAG,CAAC,aAAa,CAAC;IAClB,kDAAkD;IAClD,GAAG,CAAC,YAAY,CAAC,CAClB,CAAC;SACD,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAEjE,CAAC,aAAa;QACb,oBAAoB;KACpB,CAAC,OAAO,CAAC,UAAA,QAAQ;QAChB,GAAG,CAAC,QAAQ,CAAC;aACV,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,aAAa,CAAC,EAAE,cAAM,OAAA,QAAQ,EAAR,CAAQ,CAAC;aACxE,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,gBAAgB,CAAC,CAAC;YACrC,8EAA8E;aAC7E,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;IAClF,CAAC,CAAC,CAAC;IAEH,CAAC,aAAa;QACb,oBAAoB;QACpB,uBAAuB;KACvB,CAAC,OAAO,CAAC,UAAA,QAAQ;QAChB,GAAG,CAAC,QAAQ,CAAC;aACV,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7C,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC3C,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7C,KAAK,CAAC,eAAe,EAAE,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;aACpF,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;aACnE,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7C,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7C,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7C,KAAK,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,IAAI,qBAAqB,GAAG,EAAE,CAC5B,GAAG,CAAC,UAAU,CAAC,EACf,GAAG,CAAC,iBAAiB,CAAC,EACtB,GAAG,CAAC,uBAAuB,CAAC,EAC5B,GAAG,CAAC,gBAAgB,CAAC,EAAE,kBAAkB;IACzC,GAAG,CAAC,gBAAgB,CAAC,EAAE,UAAU;IACjC,GAAG,CAAC,cAAc,CAAC,EAAE,UAAU;IAC/B,GAAG,CAAC,aAAa,CAAC,CACnB,CAAC;IAEF,6CAA6C;IAC7C,GAAG,CAAC,eAAe,CAAC;SACjB,KAAK,CAAC,SAAS,CAAC;SAChB,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,CAAC,YAAY,EAAE,CAAC,qBAAqB,CAAC,CAAC;SAC5C,KAAK,CAAC,YAAY,EACZ,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAE3B,GAAG,CAAC,gBAAgB,CAAC;SAClB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAExC,GAAG,CAAC,cAAc,CAAC;SAChB,KAAK,CAAC,MAAM,CAAC;SACb,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAExC,GAAG,CAAC,mBAAmB,CAAC;SACrB,KAAK,CAAC,WAAW,CAAC;SAClB,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;SAC9B,KAAK,CAAC,MAAM,EAAE,EAAE,CACf,GAAG,CAAC,qBAAqB,CAAC,EAC1B,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;SACpB,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;SACjC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;IAEnC,uDAAuD;IACvD,GAAG,CAAC,QAAQ,CAAC;SACV,KAAK,CAAC,YAAY,CAAC;SACnB,KAAK,EAAE,CAAC;AACb,CAAC;AA5TD,4BA4TC;AAAA,CAAC;AAEF,IAAA,8BAAqB,EAAC,cAAM,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/def/typescript.js":{"lineLengths":[13,62,31,68,80,59,58,26,76,39,35,41,42,29,29,27,55,64,30,49,24,9,24,43,46,24,9,21,24,17,23,69,26,67,44,41,75,38,50,98,75,38,38,104,75,38,38,86,26,22,31,36,38,25,39,46,47,47,80,31,28,46,47,48,32,39,46,47,48,30,39,28,48,5,23,26,27,25,24,26,26,26,26,29,27,24,29,21,38,24,28,21,7,22,24,29,45,24,24,25,168,26,80,83,77,47,72,19,29,35,21,28,27,45,7,28,24,67,42,44,41,43,22,24,31,56,30,24,32,48,112,22,28,35,21,90,32,49,7,28,60,44,53,51,55,67,42,41,84,29,26,60,45,51,55,42,38,54,100,52,54,54,89,41,23,43,109,48,72,76,41,84,29,23,24,49,68,55,68,76,22,24,30,79,29,24,50,42,54,45,21,24,32,48,25,24,32,48,30,24,41,43,43,25,24,26,34,48,27,22,32,77,27,60,46,65,55,30,60,51,40,54,54,54,77,28,91,53,40,54,54,45,26,44,60,73,85,54,34,42,35,21,95,50,49,7,23,22,35,58,77,22,24,26,66,56,180,24,24,25,42,26,28,47,53,78,76,26,39,46,47,47,80,37,29,24,51,36,71,46,48,39,22,24,42,28,29,31,39,51,53,48,77,33,60,38,39,53,48,24,22,22,43,30,29,28,53,53,52,101,23,67,57,41,77,36,29,39,39,54,86,36,29,28,44,29,27,28,48,39,29,20,40,26,22,22,39,40,67,46,43,33,60,28,34,53,93,47,30,25,27,100,54,77,24,48,73,32,61,45,20,259,40,48,1,28,1,68,38],"data":{"version":3,"file":"typescript.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/def/typescript.ts"],"names":[],"mappings":"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"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/lib/gen/namedTypes.js":{"lineLengths":[13,62,28,15,24,65,38],"data":{"version":3,"file":"namedTypes.js","sourceRoot":"","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/ast-types@0.16.1/node_modules/ast-types/src/gen/namedTypes.ts"],"names":[],"mappings":";;;AAIA,IAAiB,UAAU,CA69D1B;AA79DD,WAAiB,UAAU;AA69D3B,CAAC,EA79DgB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QA69D1B"},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/lib/index.js":{"lineLengths":[13,0,62,0,58,32,18,39,13,0,43,24,45,30,3,0,16,1,0,16,33,23,25,24,21,22,23,3,0,1,22,27,24,22,27,33,23,19,3,0,1,65,9,9,11,9,15,73,1,0,39,43,66,3,0,52,9,59,4,0,14,84,3,0,3,0,233,20,19,222,20,63,0,27,89,47,5,95,47,4,4,0,26,46,48,45,55,50,37,37,27,46,27,48,54,30,21,29,30,4,45,37,2,0,28,7,8,111,0,29,27,8,47,85,119,91,101,92,112,80,76,79,95,80,96,72,67,65,37,8,55,192,109,142,75,75,68,130,70,75,23,14,93,59,64,60,59,29,14,14,169,101,30,8,119,75,79,110,28,8,76,112,52,29,14,122,99,23,20,110,68,69,87,111,52,51,76,40,20,9,46,61,75,34,16,55,25,18,49,18,12,69,25,12,77,38,96,32,14,49,81,37,18,59,65,101,71,26,13,53,104,72,62,51,90,44,21,17,136,27,17,156,72,118,87,97,41,7,71,40,21,105,29,13,49,59,55,58,59,133,114,87,94,94,39,74,63,27,18,150,32,18,54,180,184,186,72,72,144,78,170,69,74,178,182,184,71,130,68,87,25,11,44,95,102,92,91,56,30,16,55,79,23,13,14,113,124,72,87,109,84,31,11,25,93,88,102,143,50,60,57,52,24,18,69,85,79,84,4,0,31,61,27,17,59,34,15,52,107,83,81,41,4,0,149,37,176,147,84,34,9,190,128,31,8,80,8,40,126,103,106,89,100,153,4,0,34,0,40,7,13,11,68,0,31,8,11,6,67,9,9,29,40,28,163,69,11,8,0,16,23,25,8,16,15,84,10,0,20,50,17,13,9,0,8,12,29,24,8,52,41,24,7,7,4,1,0,67,24,101,18,1,49,32,97,3,0,63,36,0,61,80,40,16,23,18,45,3,0,32,1,187,0,7,16,11,0,69,20,20,3,0,33,60,56,14,1,0,54,11,49,0,30,54,5,0,16,3,0,22,12,9,6,21,0,9,41,18,0,48,18,14,11,6,16,3,0,29,15,0,9,29,23,20,5,0,49,46,16,3,0,30,25,50,47,16,3,0,29,47,3,0,29,42,3,0,30,42,3,0,22,41,3,0,30,42,3,0,30,45,72,92,62,48,89,61,77,3,0,31,38,28,3,0,26,54,40,12,35,5,3,0,40,31,3,0,26,30,0,231,3,0,33,40,82,54,27,3,0,94,106,0,32,58,35,5,0,32,3,0,22,42,5,61,20,7,5,60,3,0,47,46,16,19,21,36,16,3,0,23,5,61,41,7,5,45,3,0,26,5,61,44,7,5,21,3,0,29,49,30,22,16,3,0,62,61,58,3,0,104,36,30,118,41,25,26,0,40,28,5,0,30,39,3,0,31,59,5,61,28,7,5,45,24,3,0,38,66,5,61,28,7,5,45,34,24,3,0,72,92,0,15,29,53,29,5,0,16,3,0,81,101,0,15,25,29,5,0,16,3,0,30,76,3,0,33,54,54,5,0,47,3,0,37,54,13,12,13,15,0,36,82,7,0,38,12,38,5,3,0,42,53,45,20,9,29,43,20,9,12,59,5,3,0,40,47,0,40,37,38,0,47,29,0,99,7,0,28,25,5,0,16,3,0,31,43,13,5,0,38,3,0,21,28,0,24,34,29,14,0,36,101,45,54,33,9,0,14,5,0,16,3,0,60,80,0,36,95,43,7,0,23,49,32,57,7,84,28,5,0,16,3,0,34,42,29,5,0,48,3,0,25,43,3,0,26,76,3,0,24,69,3,0,36,68,3,0,45,52,27,3,0,61,41,27,3,0,3,0,18,37,24,32,23,41,3,0,1,15,29,33,34,48,2,1,45,1,0,24,24,20,22,20,21,25,33,24,26,29,29,35,25,27,25,26,24,23,32,40,40,52,32,36,32,34,56,5,32,5,3,0,1,29,0,44,25,43,30,15,1,0,35,28,15,9,5,1,0,26,22,23,23,28,28,25,0,42,80,0,21,25,83,106,106,91,56,26,1,0,48,84,0,21,41,25,85,108,108,93,58,26,1,0,12,30,15,14,5,35,15,14,5,34,15,14,5,29,33,28,15,14,5,32,15,14,5,33,15,14,5,27,31,28,15,14,5,27,27,14,5,26,14,5,27,14,5,34,14,5,24,30,14,5,33,28,14,5,36,32,14,5,31,14,5,35,15,14,5,37,14,5,41,15,14,5,23,26,14,5,45,24,15,12,5,29,15,12,5,34,15,12,5,32,15,12,5,35,15,12,5,32,11,12,14,5,26,15,11,14,5,27,15,11,14,5,34,14,5,31,14,5,33,42,34,35,33,34,34,44,34,34,42,40,41,41,31,15,13,11,14,5,28,14,14,5,26,13,5,30,31,15,14,26,5,28,15,12,5,44,15,12,5,33,32,14,5,33,39,39,38,14,5,32,14,5,37,40,14,5,27,36,14,5,35,34,15,11,14,5,29,29,33,31,30,15,14,5,32,14,5,34,14,5,34,14,5,38,14,5,35,36,14,5,32,14,5,32,14,5,34,14,5,36,15,11,14,5,32,15,11,14,5,36,15,11,14,5,28,11,14,5,30,10,5,34,10,5,32,14,5,40,14,5,38,14,5,38,14,5,36,14,5,34,14,5,34,14,5,36,14,5,32,14,5,36,14,5,34,14,5,40,14,5,38,14,5,42,14,5,40,14,5,42,14,5,40,14,5,48,14,5,46,14,5,38,14,5,32,14,5,40,14,5,38,14,5,42,14,5,38,14,5,44,14,5,40,14,5,44,14,5,42,14,5,36,14,5,40,14,5,46,14,5,46,14,5,36,14,5,40,14,5,29,14,5,33,14,5,27,14,5,33,14,5,35,14,5,33,14,5,37,14,5,26,34,35,20,5,43,20,5,38,34,20,4,2,35,37,1,51,21,1,44,37,1,44,37,1,44,33,1,41,33,1,35,36,1,52,38,1,29,36,1,32,36,1,33,36,1,32,22,1,31,30,1,39,38,1,43,38,1,32,28,1,41,28,1,41,22,1,33,36,1,34,27,1,1,44,18,4,0,105,30,4,0,45,57,20,12,35,5,4,0,46,45,4,1,0,4306,2652,85,106,62,1987,978,0,35,20,0,60,18,33,22,33,3,0,15,1,0,34,36,30,36,31,0,23,83,3,0,57,1,33,36,29,30,30,36,31,0,23,78,3,0,103,1,0,23,329,109,35,2,48,61,69,41,57,1,47,76,1,45,46,1,51,84,1,26,28,1,0,48,67,1,491,34,39,1,0,32,34,35,32,39,32,39,32,39,36,67,39,38,38,42,43,39,40,42,48,49,50,92,66,58,68,68,48,96,62,46,63,67,64,56,40,40,40,90,90,90,64,64,30,0,18,17,35,45,3,0,27,43,44,12,55,0,40,21,7,0,57,0,53,91,23,9,7,0,18,5,3,0,33,26,0,101,3,0,1,0,46,44,37,10,47,3,1,0,45,43,36,10,46,3,1,0,43,41,34,10,44,3,1,0,57,25,26,0,41,32,3,0,68,47,10,57,3,1,0,41,23,60,38,3,0,24,11,18,19,51,41,35,42,0,43,39,10,5,0,11,22,13,0,25,40,39,0,35,40,40,34,14,39,40,9,0,14,7,5,3,0,30,11,14,18,0,76,43,61,7,0,44,61,7,12,13,29,27,20,0,59,28,34,31,34,66,18,0,32,40,65,18,0,37,36,41,30,29,36,62,18,0,33,30,33,64,18,0,40,35,66,18,0,18,13,47,13,9,14,41,7,5,3,0,31,11,18,19,0,56,44,5,0,33,3,0,43,11,18,19,11,12,21,29,47,0,41,35,5,3,0,45,11,18,19,51,41,35,0,25,40,39,43,0,33,37,40,38,38,14,7,5,3,0,1,0,43,53,26,17,12,12,14,14,18,0,12,19,3,1,55,78,150,29,17,16,16,16,12,13,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,0,12,19,3,1,0,13,17,25,26,28,27,25,21,31,24,40,40,24,36,32,34,33,51,25,34,25,6,27,44,21,31,23,27,17,20,22,19,17,30,32,26,33,35,29,34,26,3,0,8,15,15,14,15,6,102,29,34,74,3,0,17,75,3,0,21,30,35,0,60,26,26,0,46,26,7,0,23,5,0,17,3,0,1,0,25,26,0,39,34,2,76,43,57,33,2,42,36,34,34,82,2,13,22,27,29,29,25,64,3,0,1,40,31,12,30,21,29,29,23,31,29,3,0,20,49,28,30,3,0,10,31,0,30,44,5,0,47,49,53,21,3,0,13,27,18,18,12,19,5,3,0,15,36,3,0,31,12,21,18,23,25,21,35,27,31,41,29,33,36,6,3,0,15,27,48,28,21,29,28,21,16,3,0,20,52,3,0,28,35,76,3,0,23,56,3,0,23,40,0,64,47,0,40,62,7,5,0,14,3,0,21,31,0,17,88,10,10,38,5,3,0,16,61,3,0,15,21,38,74,0,40,28,13,5,0,63,3,0,22,17,63,33,52,0,21,52,36,9,5,0,29,37,0,72,27,50,5,0,33,21,27,46,12,19,65,6,53,19,3,0,30,33,17,63,64,0,39,64,51,7,5,0,33,31,59,21,26,12,12,10,65,6,53,19,3,0,15,38,24,0,48,55,0,19,16,17,15,27,16,0,16,65,29,11,0,16,18,18,27,31,48,16,0,16,62,20,15,56,0,44,43,73,17,0,22,15,0,20,15,56,0,44,43,73,17,0,22,15,0,20,25,11,0,16,0,16,33,29,51,39,0,156,54,0,42,41,71,15,20,25,13,51,39,0,138,54,0,42,41,71,15,20,25,13,18,23,11,0,7,5,0,30,33,33,26,12,17,26,27,28,8,54,5,3,0,26,36,49,37,27,27,0,28,35,5,3,0,22,27,25,3,0,26,63,13,5,0,39,46,0,35,57,36,9,5,0,74,42,0,76,147,38,11,7,0,26,0,25,28,14,28,7,41,23,50,29,23,46,12,27,5,3,0,19,59,0,35,28,13,5,0,74,26,27,12,23,27,5,3,0,21,59,0,22,27,12,27,5,3,0,27,62,55,32,33,24,0,62,49,5,0,62,32,16,3,0,31,37,18,57,0,37,14,55,16,5,0,44,14,35,5,0,31,3,0,28,59,0,24,61,29,14,49,7,0,13,5,0,23,24,29,15,7,0,61,77,78,40,13,9,0,28,28,15,7,0,60,77,77,40,13,9,0,28,28,15,7,5,0,22,27,13,5,0,45,3,0,21,59,0,44,27,67,23,22,10,27,65,0,31,32,7,12,27,5,3,0,22,59,0,60,23,22,10,27,12,27,5,3,0,28,59,0,24,27,13,5,0,22,27,12,27,5,3,0,18,11,9,19,48,0,22,50,29,15,7,0,27,13,5,0,22,27,13,5,0,25,3,0,18,11,9,19,48,0,22,65,0,53,36,15,7,0,30,13,5,0,22,27,13,5,0,25,3,0,27,59,0,22,82,13,5,0,37,26,27,13,5,0,44,3,0,24,59,60,0,22,25,29,14,29,7,62,26,27,12,23,27,5,3,0,26,19,14,29,15,0,14,25,29,15,0,14,25,29,15,0,14,25,29,15,0,14,25,29,15,0,14,100,79,81,42,15,11,0,30,30,16,27,30,9,0,15,0,14,25,28,15,0,15,100,79,82,42,15,11,0,30,30,16,27,30,9,0,15,0,15,25,28,15,0,14,97,31,16,27,31,9,0,15,0,14,34,15,0,14,33,15,0,14,9,65,0,44,37,19,11,0,44,36,19,11,0,43,36,19,11,9,0,14,14,14,14,14,14,14,14,14,31,15,0,14,14,30,15,0,14,31,15,0,14,14,41,15,0,15,14,38,15,0,14,31,15,0,14,14,38,15,0,14,28,15,0,14,28,15,0,14,14,37,15,0,15,29,15,0,14,32,15,0,14,36,15,0,14,24,15,0,14,38,30,17,9,0,5,0,55,35,44,7,3,0,24,72,27,32,3,0,16,41,39,25,9,9,19,0,20,31,53,57,11,7,0,44,0,26,53,57,11,7,0,20,24,14,24,25,42,26,43,16,9,0,28,7,5,0,49,10,18,0,84,0,31,42,43,0,38,25,60,0,35,58,27,15,11,32,35,58,27,15,11,9,0,34,51,25,13,9,53,49,23,11,14,14,7,0,12,19,5,0,25,27,23,17,7,3,0,59,33,129,227,24,18,0,67,57,14,0,56,63,63,0,33,63,40,13,129,57,40,13,9,0,25,17,7,0,23,29,30,29,34,24,14,23,7,0,25,53,18,43,41,17,13,30,18,25,16,16,9,7,0,23,34,5,0,95,18,5,0,17,3,0,26,46,25,24,36,0,22,39,56,13,9,5,0,55,0,23,23,22,30,47,20,9,5,0,65,49,36,9,5,0,19,88,33,13,5,0,31,3,0,29,33,46,24,25,26,28,24,0,54,40,36,9,5,0,94,0,25,62,62,20,9,0,31,51,0,32,56,71,13,9,7,0,56,5,0,53,0,34,23,23,21,51,5,0,52,53,0,39,25,7,0,38,53,22,11,7,0,21,25,51,5,0,23,38,49,22,11,7,0,23,22,5,0,23,61,0,42,43,22,11,7,0,23,23,5,0,65,49,36,9,5,0,78,0,19,33,13,5,0,20,33,13,5,0,61,31,3,0,33,53,13,0,21,23,110,23,0,45,29,47,40,13,16,22,9,7,12,56,5,0,16,3,0,21,17,38,0,14,42,53,33,11,7,0,55,30,0,22,60,43,36,46,25,29,46,33,53,33,11,14,25,7,5,0,58,31,3,0,30,25,31,5,0,21,29,3,0,23,17,36,32,21,0,14,42,55,68,11,7,0,55,0,22,25,60,59,15,7,0,75,28,60,59,15,7,0,22,60,51,0,31,33,16,25,9,0,36,33,60,25,0,21,18,63,31,13,0,18,24,18,0,18,43,18,9,0,29,46,36,14,25,7,5,3,0,40,6,6,27,0,67,32,10,9,12,61,5,3,0,31,39,55,21,0,17,15,20,0,15,20,0,15,9,66,66,9,0,15,9,58,67,9,0,15,20,0,14,20,0,15,24,0,15,20,0,14,59,27,9,0,14,46,29,0,16,16,18,0,14,14,25,22,16,67,76,13,9,0,14,35,87,98,34,44,0,28,45,42,11,0,48,61,0,63,29,26,20,71,27,17,13,11,0,44,9,0,39,5,3,0,46,45,53,0,21,27,50,21,11,14,43,7,5,0,13,3,0,24,35,18,33,36,0,34,52,5,0,42,53,0,33,47,29,38,61,50,96,0,62,51,40,13,42,19,9,0,25,45,0,27,38,59,26,15,11,0,44,9,0,36,14,14,7,5,0,63,3,0,23,43,38,0,29,51,12,34,5,3,0,25,11,10,19,0,57,53,32,42,9,5,3,0,40,11,8,24,78,0,59,32,10,13,7,49,57,17,3,0,49,11,8,24,79,0,59,26,37,0,50,30,0,36,41,14,17,11,7,0,39,5,0,53,3,0,28,0,25,46,51,49,7,3,0,33,37,18,5,0,44,50,33,7,3,0,32,58,52,32,34,9,5,3,0,1,0,13,22,25,29,31,23,3,0,1,20,33,25,25,27,38,25,29,3,0,20,62,3,0,20,60,3,0,26,67,3,0,17,60,3,0,41,47,71,3,0,23,52,13,13,29,0,39,20,7,0,46,21,7,5,3,0,28,63,3,0,29,64,3,0,22,28,3,0,16,50,3,0,10,26,3,0,37,123,3,0,39,36,0,80,68,0,46,34,14,32,7,0,45,45,7,46,61,35,70,28,45,43,7,5,0,62,41,5,3,0,35,62,41,5,3,0,60,61,50,16,28,9,5,3,0,49,55,0,43,89,5,0,44,103,5,0,194,3,0,24,11,10,11,45,0,113,52,5,3,0,18,55,3,0,26,52,13,13,29,0,30,21,7,5,3,0,27,52,13,13,29,0,72,21,7,5,3,0,1,0,31,24,19,38,3,0,1,0,45,22,32,3,0,39,38,0,51,68,43,39,13,5,0,36,3,0,49,61,0,51,105,5,0,17,3,0,24,60,33,5,3,0,1,0,18,17,34,35,43,3,0,1,25,23,25,20,43,25,3,0,13,45,3,0,11,38,3,0,10,43,35,0,80,20,55,55,9,14,65,18,30,11,7,5,3,0,46,11,19,20,27,23,43,0,52,60,0,21,63,66,63,66,67,51,30,45,7,5,0,20,58,16,28,9,5,0,27,39,3,0,29,19,0,36,52,5,0,21,54,12,63,16,28,9,5,3,0,1,0,22,42,47,32,0,23,35,23,21,3,0,36,111,3,0,37,47,3,0,1,0,53,21,16,39,3,0,45,6,6,27,63,3,0,32,41,3,0,27,45,3,0,1,0,30,23,25,41,25,3,0,16,27,3,0,10,21,3,0,49,12,6,20,24,6,11,11,13,29,25,0,54,51,59,14,15,7,0,25,5,0,44,3,0,43,12,6,11,11,13,42,20,24,6,0,50,39,56,50,12,13,5,3,0,35,6,6,11,11,13,29,25,0,52,64,69,12,11,7,0,25,5,3,0,23,11,11,13,49,63,57,39,15,9,31,27,0,54,47,27,7,7,3,0,1,41,52,1,30,68,1,31,73,1,31,31,1,0,21,27,27,28,24,34,17,21,3,0,16,28,3,0,10,22,3,0,18,47,3,0,18,51,3,0,18,51,3,0,19,52,3,0,15,48,3,0,1,46,71,1,0,36,49,22,48,0,21,25,12,41,19,13,9,5,3,0,23,64,3,0,41,44,0,56,52,73,5,0,17,3,0,31,39,49,3,0,24,35,18,18,5,0,17,3,0,41,37,33,40,33,11,7,0,41,5,3,0,24,76,3,0,27,94,3,0,27,57,54,3,0,22,53,3,0,30,66,41,34,7,3,0,21,49,3,0,47,25,16,6,0,9,40,32,26,9,0,62,37,30,57,16,15,58,24,25,19,10,7,0,14,13,20,22,23,23,8,21,35,28,0,41,16,21,16,23,25,19,10,7,0,34,16,33,22,24,24,19,10,7,0,18,5,3,0,56,43,11,25,21,20,27,28,109,0,20,23,5,0,37,54,30,9,5,0,33,41,26,9,5,0,32,49,25,9,5,0,40,45,5,3,0,27,55,3,0,23,39,3,0,26,24,3,0,34,127,3,0,25,94,3,0,26,42,3,0,24,40,3,0,69,40,27,60,41,38,29,32,48,50,40,54,42,50,52,60,18,36,56,34,28,36,38,48,6,3,0,24,27,0,24,32,5,0,36,37,3,0,50,11,19,28,0,33,63,5,3,0,1,24,17,35,31,30,38,3,0,1,0,12,33,19,21,17,39,71,79,3,0,1,0,37,1,39,31,35,0,60,26,0,95,33,7,5,0,19,4,1,0,33,31,1,0,32,9,9,10,8,8,10,10,8,11,46,21,23,19,19,23,23,21,0,31,44,3,0,16,1,35,9,9,10,8,8,10,9,11,0,31,34,3,0,46,21,23,19,19,23,0,31,26,10,25,3,0,28,16,1,36,15,65,3,0,25,36,3,0,25,56,3,0,26,67,3,0,36,0,21,28,26,58,62,16,3,0,45,23,30,51,3,0,61,28,26,58,3,0,50,78,3,0,1,0,178,47,113,202,26,16,59,84,105,84,39,15,12,148,31,15,12,133,36,12,195,31,20,12,145,46,12,131,47,13,15,16,141,46,13,14,102,47,13,14,146,29,13,15,14,169,38,13,14,107,49,12,130,75,211,103,104,70,132,136,93,82,106,40,5,75,63,92,135,75,88,78,144,95,111,30,16,53,92,97,94,86,108,170,36,26,14,104,110,58,4,0,38,248,1,0,34,68,1,0,37,57,1,0,27,30,28,22,31,2,0,32,19,19,0,41,59,3,0,24,1,0,51,52,24,19,32,3,0,21,28,3,0,22,77,3,0,22,51,3,0,26,53,42,31,7,5,0,40,3,0,23,40,60,0,55,33,43,35,14,50,7,5,0,37,3,0,33,40,29,27,38,34,16,3,0,24,34,42,16,31,0,56,65,21,9,5,0,23,42,22,56,12,56,5,3,0,42,40,29,20,20,25,0,25,36,44,12,34,36,0,27,46,7,5,0,29,3,0,31,16,43,49,3,0,34,16,48,38,43,0,25,73,12,37,5,0,20,51,33,29,30,20,88,87,73,30,21,82,52,3,0,40,25,46,32,49,32,49,41,27,56,14,27,54,42,13,9,0,49,7,40,50,40,51,40,50,32,72,12,30,5,3,0,34,16,60,70,21,52,3,0,32,34,0,26,37,12,39,5,0,50,36,19,0,28,38,0,27,20,0,57,70,42,13,9,0,35,14,83,57,7,0,26,5,0,22,19,48,20,32,33,40,34,61,27,13,9,0,20,63,30,64,27,13,9,0,28,61,27,13,9,0,26,31,7,7,35,50,3,0,57,20,0,23,45,67,14,48,25,7,0,26,63,12,114,39,67,34,39,46,11,7,0,89,67,29,65,129,38,0,53,42,31,33,9,0,42,20,7,5,0,28,3,0,39,16,31,57,21,57,3,0,35,16,34,35,16,3,0,36,16,41,36,16,3,0,35,16,37,53,3,0,48,65,100,0,25,69,12,33,5,0,22,25,21,0,23,10,60,41,5,0,33,18,0,10,59,29,5,0,33,18,0,10,63,29,5,0,42,27,24,25,26,25,7,3,0,31,34,54,0,25,71,12,33,5,0,53,3,0,28,37,57,3,0,28,23,59,31,9,5,3,0,50,41,97,19,24,7,3,0,55,79,41,3,0,28,62,74,0,25,69,12,33,5,0,51,21,46,3,0,38,31,61,74,0,25,69,12,33,5,0,26,0,25,57,5,0,25,0,19,56,5,0,21,47,3,0,50,45,34,46,60,27,29,38,0,25,19,42,12,27,56,26,11,7,5,0,50,3,0,39,40,34,21,29,0,44,18,12,24,5,0,32,0,8,73,38,0,34,31,7,0,28,24,7,30,0,20,34,61,3,0,41,34,40,21,29,20,64,42,0,29,45,0,28,24,7,5,0,58,20,34,63,3,0,50,34,40,21,29,20,0,29,68,0,28,24,7,5,0,20,34,63,3,0,28,34,31,22,0,23,10,60,29,5,0,42,25,24,25,24,25,7,60,3,0,32,98,3,0,56,27,0,39,50,49,12,21,38,5,0,19,49,29,54,3,0,51,27,48,19,19,0,43,25,28,99,12,26,0,25,29,7,0,51,5,0,59,3,0,38,21,21,31,21,0,25,69,5,0,20,0,25,56,28,0,28,24,7,5,0,48,63,0,28,24,7,5,0,23,57,5,0,20,54,59,3,0,51,39,27,62,59,3,0,23,16,15,16,15,16,6,40,29,39,34,30,28,33,17,14,24,0,38,21,19,19,12,21,19,20,5,0,28,0,35,27,31,33,36,0,49,43,0,61,22,46,30,9,7,0,50,43,0,61,22,26,9,7,0,48,0,24,36,41,9,0,26,25,48,11,0,93,16,93,9,52,36,41,9,0,23,46,9,0,92,14,26,0,62,45,0,59,36,24,11,9,0,169,0,37,25,55,16,51,9,7,0,37,0,64,66,29,11,7,5,0,26,0,22,34,5,0,67,34,15,3,0,105,23,96,0,27,27,57,42,13,35,53,42,13,9,0,23,50,24,13,9,0,20,7,0,25,53,40,11,7,0,34,39,7,0,21,47,22,11,7,0,43,63,12,51,29,41,23,27,0,45,27,0,36,41,9,0,23,46,9,0,101,0,47,49,9,0,81,63,31,13,9,14,47,28,0,27,26,9,0,53,33,7,0,31,57,5,3,0,41,55,80,0,30,121,31,9,5,0,32,91,20,9,5,0,57,49,20,9,5,3,0,29,77,24,5,3,0,60,44,47,62,0,26,57,33,58,63,5,0,16,3,0,48,54,31,76,0,25,71,5,0,58,3,0,25,34,20,48,57,3,0,24,34,20,19,0,60,44,31,22,5,0,19,56,3,0,37,20,25,30,34,32,42,0,43,29,53,18,11,7,0,42,0,25,24,0,21,60,20,13,9,7,0,55,12,44,5,0,21,29,41,54,3,0,44,62,21,26,31,54,3,0,44,20,21,0,25,52,24,0,28,24,7,5,0,48,58,0,28,24,7,5,0,23,52,5,0,12,13,11,11,6,3,0,59,22,17,58,0,18,21,62,0,19,60,0,19,60,0,20,61,0,20,61,0,20,61,0,14,41,65,5,3,0,26,38,41,34,12,13,30,64,0,30,13,41,29,28,28,28,28,11,0,13,41,29,27,28,28,29,11,0,13,46,41,62,20,0,14,71,24,49,33,29,30,24,24,47,63,0,14,20,0,49,69,48,57,18,33,11,9,0,28,48,38,64,0,117,28,24,18,25,11,9,0,19,98,16,51,9,0,33,29,30,24,24,47,35,63,0,15,82,0,14,14,36,20,69,0,14,39,22,0,32,99,11,0,32,99,11,0,69,35,13,9,0,32,0,15,82,0,15,82,0,14,20,59,0,14,20,66,0,14,20,59,0,14,20,61,0,14,42,0,14,46,56,22,53,56,39,49,11,0,98,9,0,5,0,28,3,0,26,38,41,43,42,0,77,56,36,72,21,0,39,32,20,60,14,31,46,23,0,40,35,68,16,60,9,7,5,0,16,3,0,25,34,0,23,55,61,12,41,5,3,0,40,45,0,57,66,69,23,23,45,33,61,5,0,17,3,0,31,34,17,59,24,0,26,65,5,0,96,3,0,24,34,17,50,24,0,26,56,5,0,89,3,0,19,40,29,43,34,16,3,0,42,62,40,43,42,65,12,34,5,3,0,29,34,58,51,3,0,62,105,0,25,60,35,5,0,17,3,0,29,57,72,27,3,0,23,24,0,25,34,0,37,31,14,32,7,0,18,44,5,0,20,3,0,66,30,110,5,0,58,3,0,60,25,40,94,101,5,0,59,3,0,37,54,41,0,55,38,20,45,7,67,36,18,49,5,0,57,0,72,29,5,0,16,3,0,40,37,36,121,45,9,54,40,47,42,47,44,55,9,7,5,0,54,3,0,34,11,10,19,0,94,37,5,0,48,3,0,30,11,10,19,0,94,36,5,0,44,3,0,34,60,36,18,49,5,0,48,3,0,67,37,0,44,46,0,77,61,20,7,5,0,20,37,51,54,9,17,12,45,68,0,39,47,0,31,27,41,0,50,43,9,0,10,21,16,50,68,7,0,39,58,28,11,7,0,41,27,39,41,10,21,16,50,7,5,0,51,45,20,21,33,116,58,3,0,35,64,54,35,47,12,17,12,6,3,0,50,25,22,0,32,31,0,52,54,43,16,28,9,0,30,57,36,35,7,5,0,26,63,26,5,0,97,3,0,31,20,0,122,51,41,22,3,0,49,15,0,74,66,23,49,12,23,5,0,18,3,0,44,58,0,23,27,34,5,0,25,64,37,67,65,5,0,16,3,0,33,250,13,5,0,40,3,0,21,41,0,89,51,5,0,16,3,0,32,33,31,47,18,0,26,59,35,20,14,56,7,40,31,47,18,62,40,31,47,18,54,67,32,47,18,60,12,48,5,3,0,23,55,0,65,31,18,18,18,5,0,17,3,0,44,11,14,19,72,0,53,32,5,0,24,3,0,47,54,0,25,69,5,3,0,46,11,14,19,0,33,65,15,7,0,28,5,0,53,0,25,126,52,22,11,32,61,26,11,7,5,3,0,20,59,3,0,18,35,33,0,55,44,37,32,9,5,0,36,3,0,26,59,0,39,33,67,53,50,24,36,7,0,34,88,26,33,12,42,5,3,0,33,45,59,12,49,5,3,0,37,100,54,5,0,37,3,0,55,47,31,0,73,53,7,5,0,62,3,0,51,47,22,0,31,0,174,50,33,11,7,5,0,20,3,0,69,89,0,61,43,5,0,16,3,0,30,77,3,0,28,25,59,5,0,42,3,0,35,25,59,5,0,49,3,0,19,51,3,0,21,53,3,0,34,67,3,0,94,26,49,5,0,27,0,25,71,5,0,101,0,41,35,0,61,61,20,11,7,92,41,0,61,61,20,11,7,5,3,0,67,26,49,5,0,27,0,25,71,5,0,74,3,0,25,32,0,44,76,5,0,33,18,47,0,10,38,59,0,29,75,16,37,9,0,67,29,5,3,0,35,42,61,0,28,30,0,61,58,19,11,43,58,19,11,7,5,3,0,41,45,3,0,113,24,47,5,0,25,23,0,40,64,45,5,0,120,0,25,59,5,3,0,39,23,40,50,19,11,7,0,36,58,19,11,7,0,28,5,0,25,60,41,58,17,9,5,0,52,49,17,9,5,0,33,17,3,0,47,67,0,115,52,31,9,5,0,16,3,0,34,35,50,5,0,49,3,0,52,120,70,3,0,42,30,20,0,25,22,40,20,5,0,15,34,13,12,13,0,43,39,7,0,68,20,31,7,5,0,56,3,0,90,42,33,0,43,39,35,48,37,7,5,0,26,0,69,50,0,87,38,49,52,14,40,36,49,7,12,86,56,49,14,31,58,26,40,13,9,0,40,36,7,0,35,49,14,25,62,7,5,0,63,0,54,66,21,9,5,0,54,84,5,0,69,84,5,0,68,3,0,22,30,14,42,0,14,40,5,3,0,45,27,0,61,69,5,0,52,3,0,26,33,0,25,62,37,5,3,0,49,25,66,43,55,60,5,0,63,3,0,27,59,3,0,57,13,0,21,12,0,71,33,100,38,13,15,21,57,0,79,22,7,5,0,63,23,0,42,25,44,34,0,66,93,85,66,24,11,116,73,61,45,62,31,16,33,0,108,45,33,84,32,15,11,0,28,9,0,37,7,0,48,35,24,7,0,28,37,31,7,0,65,42,70,26,9,5,0,71,3,0,20,25,42,68,45,42,96,62,57,47,24,9,37,54,107,5,0,34,3,0,28,60,3,0,44,74,27,12,53,5,3,0,55,93,13,5,0,50,54,53,28,11,7,5,0,43,3,0,50,121,3,0,54,111,18,56,25,68,53,87,39,121,60,106,59,0,23,37,26,7,0,24,38,27,7,0,40,5,0,68,3,0,69,55,48,0,20,35,20,7,0,18,56,25,70,22,68,27,51,71,56,25,42,81,24,70,70,83,9,0,24,56,27,7,5,0,83,3,0,24,31,21,0,52,92,5,0,31,3,0,57,54,35,39,60,3,0,31,59,0,66,40,26,23,13,5,0,38,3,0,28,59,0,39,26,13,5,0,35,3,0,32,56,0,36,54,36,9,5,0,20,3,0,22,67,38,56,33,11,7,0,38,47,39,13,5,0,36,64,0,23,54,38,11,7,0,35,13,5,0,36,3,0,21,11,9,19,38,0,86,34,5,0,71,75,0,35,43,5,0,117,44,5,0,35,39,5,0,17,3,0,30,57,0,21,52,36,9,5,3,0,49,13,14,6,60,14,17,14,7,3,0,59,262,13,21,3,0,48,13,14,6,59,14,15,16,7,3,0,60,12,6,70,15,14,7,3,0,24,41,0,60,0,30,15,9,69,0,28,20,29,37,28,14,11,0,18,28,25,12,9,0,15,9,68,0,28,20,29,37,28,14,11,0,18,28,25,12,9,0,14,14,9,67,0,28,20,30,37,28,14,11,0,18,28,25,12,9,0,14,16,26,23,10,5,3,0,23,36,42,61,19,9,6,12,9,10,6,3,0,65,11,18,16,0,32,13,5,0,40,63,5,3,0,19,13,16,6,32,21,25,24,24,26,6,34,0,28,25,33,14,7,0,42,13,11,12,35,33,0,30,17,7,0,38,54,17,21,72,18,11,7,0,38,56,17,21,18,11,7,0,32,23,17,21,18,8,25,0,26,23,11,81,41,90,18,11,0,22,11,80,41,88,18,11,0,22,11,80,41,88,18,11,0,23,11,80,11,0,20,11,35,29,81,22,0,28,80,22,0,22,98,13,11,7,0,27,24,7,5,0,12,14,23,6,3,0,63,12,6,42,30,47,32,69,48,73,18,11,7,0,30,12,46,73,18,11,7,0,32,5,3,0,29,12,6,46,0,46,75,32,16,9,5,0,11,11,19,16,0,96,54,32,17,30,9,5,0,17,3,0,26,29,33,57,14,7,19,11,14,23,30,15,18,7,47,0,27,21,33,46,23,56,0,20,33,45,23,55,0,20,33,100,18,11,23,55,0,20,48,23,55,0,14,9,31,30,27,59,12,0,36,57,55,55,63,0,67,27,45,104,22,15,27,59,72,60,79,25,42,17,13,0,50,27,60,72,60,78,25,42,17,13,0,49,27,59,18,65,26,22,15,27,11,9,5,3,0,34,38,17,56,52,3,0,25,39,0,45,56,50,5,0,17,3,0,39,71,3,0,3,0,18,18,17,11,17,10,10,17,18,17,18,19,16,19,17,16,17,17,18,16,16,16,17,16,19,17,17,18,18,17,19,18,17,17,18,19,19,19,19,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,18,19,19,19,18,17,19,18,18,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,19,19,19,19,18,17,19,18,17,18,18,19,19,17,17,17,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,18,16,20,16,16,16,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,19,18,16,20,16,16,16,18,21,18,16,17,17,19,17,16,16,16,18,18,18,18,18,18,18,18,19,19,17,19,19,18,18,19,19,18,18,17,18,19,17,18,20,17,17,17,17,17,18,17,17,17,17,17,19,17,18,18,18,17,18,15,17,16,18,19,18,17,18,16,16,15,16,16,16,19,16,17,18,15,18,15,15,16,16,17,17,17,18,19,17,17,18,18,19,19,17,17,16,19,18,19,17,2,0,45,86,32,18,75,81,142,23,15,14,104,91,58,133,4,0,29,103,1,0,38,40,23,3,0,44,58,3,0,46,91,3,0,62,1,0,51,18,17,36,0,14,42,60,33,11,7,0,55,0,19,16,17,52,61,31,43,13,0,46,11,0,62,44,0,16,62,38,38,16,0,16,17,0,16,30,64,45,40,18,29,11,0,7,5,3,0,33,53,12,21,0,68,23,42,12,36,5,0,25,42,15,3,0,24,17,38,0,14,42,53,33,11,7,0,55,30,0,22,60,36,36,33,60,42,36,14,25,7,5,0,58,38,3,0,19,38,0,53,23,21,0,56,19,25,7,0,70,0,77,25,47,7,12,20,23,0,115,25,7,0,17,64,38,25,0,21,24,9,7,5,0,30,15,3,0,17,11,33,0,8,51,48,0,74,3,0,24,34,0,26,35,49,50,12,24,5,0,16,50,3,0,28,38,41,43,35,54,26,42,54,3,0,25,38,41,45,0,44,18,5,0,26,59,28,51,61,5,0,16,3,0,28,13,0,30,13,32,37,20,68,0,60,50,20,13,9,0,20,0,15,15,36,0,14,57,33,11,5,3,0,29,92,78,3,0,29,16,45,34,41,19,51,3,0,54,24,55,12,48,35,5,0,37,41,19,59,3,0,23,34,0,24,35,18,22,53,36,43,21,57,5,0,46,69,49,3,0,48,54,0,24,57,5,0,43,54,3,0,41,26,0,49,48,5,0,33,36,21,54,3,0,48,54,0,24,57,5,0,43,21,54,3,0,41,54,24,77,30,0,38,26,34,19,40,43,24,0,31,81,29,13,0,70,18,0,19,48,18,0,17,13,44,43,26,0,35,62,22,84,15,0,20,13,0,18,36,9,7,0,97,57,28,11,77,56,29,66,11,78,100,58,31,68,13,9,7,5,0,37,44,44,12,43,43,5,0,29,0,25,64,31,9,5,0,115,3,0,21,38,41,16,54,3,0,26,11,13,19,45,3,0,38,26,60,33,36,80,29,36,12,54,5,3,0,15,41,53,3,0,26,38,0,35,33,5,0,63,36,34,7,0,24,25,37,7,0,69,40,7,5,0,107,23,35,5,0,40,3,0,27,11,14,10,19,0,42,42,44,30,33,30,46,0,76,22,85,14,38,45,7,12,71,5,3,0,3,0,37,24,19,27,27,32,29,40,3,0,1,0,51,22,38,3,0,39,38,0,50,43,41,13,5,0,36,0,39,45,70,45,7,0,28,5,0,64,75,64,3,0,49,32,45,67,52,36,7,0,18,5,0,68,36,49,14,21,7,5,0,64,18,5,0,51,3,0,24,45,11,10,11,0,88,33,5,3,0,1,0,89,0,21,18,46,3,0,11,1,0,20,11,35,3,1,0,51,39,14,95,38,16,96,102,81,22,8,39,80,82,183,97,23,8,52,90,99,38,12,48,25,12,46,31,9,44,63,65,103,76,29,13,86,88,38,12,83,86,91,84,96,35,12,66,38,12,69,47,12,107,29,20,93,217,88,89,98,101,130,89,137,105,88,38,12,83,117,142,128,98,87,94,47,21,124,84,148,128,145,145,106,104,72,82,90,107,41,8,105,4,0,37,18,15,28,0,19,32,0,18,31,0,17,30,0,18,31,0,18,31,0,18,31,0,18,31,0,21,34,0,19,32,0,12,23,3,1,0,39,85,1,0,44,49,1,0,58,21,34,3,0,20,46,3,0,30,164,3,0,34,16,43,3,0,68,72,23,5,0,38,0,52,76,25,7,0,74,24,7,5,0,21,3,0,20,13,21,24,34,56,6,60,51,52,18,43,11,7,6,0,57,87,52,18,33,11,7,6,0,14,13,16,21,156,27,0,41,37,63,25,20,13,16,65,63,65,44,9,53,33,50,25,20,13,9,0,34,54,14,61,50,25,20,13,16,65,65,67,67,66,65,9,0,34,7,0,82,35,23,18,11,7,5,3,0,28,19,25,25,29,0,35,29,0,31,29,0,39,30,5,0,35,3,0,35,22,0,44,34,5,0,18,3,0,65,99,3,0,86,22,30,0,14,42,14,7,0,28,37,0,28,25,7,0,27,0,25,51,17,7,0,42,14,7,0,26,24,7,0,23,5,0,30,51,5,0,18,3,0,90,26,20,23,14,24,7,5,0,86,0,18,21,12,22,5,0,18,3,0,23,34,20,20,0,27,58,31,9,5,0,41,20,0,23,48,5,0,25,56,5,0,49,3,0,48,58,0,26,48,25,60,56,5,0,18,3,0,26,34,45,0,58,56,5,0,52,3,0,33,16,43,29,60,25,52,3,0,25,34,16,47,3,0,22,34,20,0,25,47,12,47,5,0,58,56,5,0,48,3,0,31,27,21,38,109,60,7,3,0,30,27,21,27,41,69,7,3,0,79,34,25,48,50,47,52,3,0,44,25,56,5,3,0,41,34,0,44,18,12,24,5,0,33,15,6,161,0,35,48,16,9,5,0,43,70,5,0,63,3,0,35,50,16,54,0,39,43,35,21,9,5,0,25,3,0,43,51,35,43,63,20,65,0,30,88,41,88,5,3,0,36,57,147,64,22,28,11,7,0,21,7,3,0,32,52,22,5,3,0,38,35,38,39,3,0,37,16,0,45,18,28,5,0,17,3,0,34,96,23,5,0,19,38,53,30,19,27,49,41,38,53,3,0,52,43,25,0,43,21,57,18,11,7,0,29,0,42,62,38,11,7,0,39,40,37,45,0,34,43,45,40,13,0,55,68,42,15,11,9,41,45,45,40,13,16,54,0,49,68,42,15,11,0,80,72,42,15,11,0,54,68,42,15,11,9,0,36,63,37,13,9,14,31,7,0,58,12,31,45,51,47,40,62,5,3,0,23,34,0,43,77,5,0,25,34,18,0,45,84,14,52,66,7,5,0,27,21,37,106,7,52,0,14,17,5,0,33,0,150,32,35,5,0,72,3,0,24,34,51,50,3,0,30,19,87,19,19,3,0,27,16,0,23,36,5,0,33,18,5,0,25,19,5,0,16,0,33,19,5,0,16,26,3,0,32,34,48,53,52,3,0,23,34,19,0,25,39,18,33,41,27,5,0,19,59,71,19,0,25,39,18,22,30,27,5,0,48,21,19,49,3,0,22,34,125,36,31,46,27,0,11,12,22,0,146,57,25,11,7,0,134,0,34,49,32,7,0,54,100,0,42,63,25,11,7,7,48,3,0,29,11,22,14,19,30,34,34,33,0,18,53,38,0,107,42,14,54,18,11,33,7,0,51,64,26,58,45,65,5,0,15,60,37,53,5,0,16,3,0,30,34,20,45,20,56,3,0,52,34,0,39,33,32,18,5,0,80,39,3,0,28,34,0,27,32,17,17,17,16,16,38,0,16,34,7,9,0,50,3,0,32,34,45,50,3,0,31,53,45,3,0,40,51,0,66,56,12,25,5,3,0,25,30,15,15,15,14,14,45,0,14,39,40,45,0,65,36,11,0,48,56,9,0,14,0,14,57,0,14,39,0,14,40,0,13,126,0,13,39,0,14,47,0,14,14,49,0,14,9,17,16,25,0,70,131,0,76,44,26,53,13,0,47,11,9,5,0,28,3,0,30,42,0,58,26,48,32,23,52,14,48,31,44,23,60,7,5,0,16,3,0,25,34,38,16,29,61,0,34,50,5,0,51,3,0,42,39,25,25,15,0,14,49,18,11,5,3,0,22,34,31,43,57,91,75,48,3,0,35,23,92,0,76,26,7,5,3,0,33,93,185,3,0,72,34,50,21,0,8,41,33,0,52,22,5,0,23,39,3,0,37,118,3,0,30,115,3,0,29,25,18,5,0,100,3,0,26,63,18,18,5,0,24,13,14,21,47,0,11,38,52,25,21,7,5,0,24,18,13,14,21,47,0,11,43,52,26,21,7,5,0,17,3,0,42,16,0,43,18,5,0,38,81,20,7,0,27,20,0,29,22,9,7,5,0,17,3,0,53,32,33,31,36,85,0,38,74,0,54,49,30,37,71,16,67,43,9,0,45,54,7,0,121,0,35,23,54,9,0,52,31,35,68,54,7,0,53,49,33,29,66,52,7,3,0,45,86,3,0,30,69,3,0,20,39,3,0,32,38,0,66,18,16,5,3,0,33,34,19,5,0,47,16,0,65,19,5,0,22,53,39,31,9,5,0,16,3,0,64,25,36,44,7,50,3,0,17,30,50,0,104,18,5,0,44,26,104,20,84,20,85,54,3,0,36,66,3,0,31,41,69,5,0,25,72,55,78,5,0,43,3,0,26,73,50,31,9,5,0,34,0,56,0,63,20,45,52,3,0,32,49,84,36,49,0,27,58,7,0,68,7,0,32,52,29,13,9,5,0,25,3,0,54,50,31,48,0,45,39,55,12,21,49,31,9,5,0,95,0,23,59,5,0,34,72,57,59,3,0,37,37,48,47,97,22,0,67,38,20,59,7,0,32,7,21,59,3,0,21,42,41,0,9,18,15,38,5,3,0,16,40,29,0,9,18,15,36,5,3,0,43,94,56,0,9,18,15,90,5,3,0,40,94,57,0,9,18,15,90,5,3,0,29,71,3,0,32,60,3,0,25,53,3,0,25,32,11,32,7,3,0,23,34,82,0,23,56,5,0,49,3,0,49,44,48,31,37,82,19,95,19,54,3,0,24,34,34,19,73,22,50,3,0,61,37,0,18,55,5,0,23,37,60,24,12,40,34,44,28,24,5,0,56,3,0,49,33,25,39,33,37,12,24,5,0,24,40,34,44,28,24,12,23,5,0,56,3,0,50,38,37,48,20,58,0,93,53,27,9,5,0,43,21,62,3,0,33,69,3,0,28,118,3,0,36,34,31,20,0,27,30,5,0,43,20,62,3,0,18,37,20,23,15,3,0,25,58,57,52,23,3,0,17,37,23,0,51,20,12,25,23,5,3,0,27,34,13,5,0,36,13,0,32,21,19,5,0,42,29,28,62,7,0,29,28,50,7,0,30,50,23,11,7,0,30,66,7,0,49,69,30,78,9,0,24,50,22,23,11,7,0,30,63,23,11,34,7,0,41,69,7,7,3,0,33,77,3,0,42,24,21,9,59,0,28,39,31,11,0,16,9,0,20,28,44,38,27,28,24,47,28,32,61,9,0,14,0,14,63,5,3,0,41,20,22,105,55,9,0,14,0,20,47,32,70,58,66,11,9,0,14,0,23,85,64,9,0,14,0,18,85,56,9,0,14,5,3,0,31,15,53,18,18,5,0,36,3,0,59,26,23,5,0,72,45,47,56,57,38,71,22,18,7,66,0,15,23,5,0,54,3,0,38,34,23,5,0,39,3,0,26,34,64,22,97,8,0,35,47,16,9,5,0,20,65,3,0,26,54,3,0,30,50,44,3,0,55,38,41,22,25,25,0,39,26,29,17,84,9,45,35,35,0,80,58,22,11,7,5,0,42,44,73,0,48,54,0,30,35,7,0,58,43,43,0,74,63,16,11,7,0,25,56,5,0,28,35,5,0,15,3,0,27,123,3,0,60,25,70,5,0,168,0,68,42,13,5,0,78,61,16,9,0,25,71,15,7,5,0,59,3,0,37,32,53,12,54,5,3,0,37,27,75,55,33,11,7,7,3,0,42,46,20,3,0,27,47,0,42,53,5,0,16,3,0,60,58,44,18,69,42,71,5,0,31,0,60,20,26,20,7,0,56,18,5,0,43,31,52,58,92,0,29,32,11,9,0,70,35,0,48,58,17,9,0,47,93,48,24,9,0,39,60,29,72,58,46,0,42,43,11,0,76,9,0,42,0,122,17,9,0,58,31,44,66,9,0,33,50,7,0,19,131,82,35,13,9,0,22,7,5,0,74,3,0,24,22,0,31,11,12,13,0,130,50,38,5,3,0,58,106,64,29,0,58,0,19,37,14,57,7,0,46,26,73,5,0,72,3,0,63,39,72,5,3,0,28,0,21,30,0,80,35,0,98,33,20,33,7,0,68,57,7,5,0,47,0,141,67,22,9,5,0,22,3,0,21,25,18,0,70,33,20,14,34,7,0,61,30,26,49,23,59,40,24,33,39,23,67,12,66,20,33,14,34,7,0,37,5,3,0,21,66,3,0,34,33,35,18,26,39,17,5,0,26,72,32,5,0,48,3,0,66,11,22,19,105,46,0,16,9,10,36,26,0,52,68,18,11,250,98,18,11,7,5,0,23,3,0,44,63,36,22,48,19,9,5,0,33,59,5,0,33,72,32,5,0,58,3,0,25,68,3,0,41,39,41,49,7,0,32,7,3,0,29,70,3,0,46,114,27,23,34,41,42,69,7,0,52,43,20,20,0,57,62,40,13,9,0,54,14,85,7,6,0,25,64,12,41,5,3,0,68,54,0,14,31,0,28,56,20,11,7,0,33,61,21,40,11,7,0,27,55,20,11,7,0,28,56,20,11,7,0,13,5,0,57,62,18,9,5,0,26,33,52,20,11,7,5,0,75,3,0,46,34,47,0,50,51,24,9,5,0,49,50,24,9,5,3,0,40,102,62,3,0,34,49,48,3,0,67,64,83,5,0,89,0,23,25,76,7,0,18,5,0,52,23,3,0,44,58,0,23,27,34,5,0,25,64,37,65,67,5,0,16,3,0,32,65,78,5,0,38,41,46,0,88,68,31,9,5,0,60,113,34,0,118,31,5,0,20,63,33,5,0,23,3,0,47,65,13,5,0,99,96,61,3,0,38,41,27,5,0,49,41,3,0,28,44,0,56,60,31,9,5,0,42,13,11,15,59,32,122,9,5,0,42,3,0,35,24,54,16,9,5,0,29,59,17,36,9,5,0,44,49,3,0,94,59,0,42,57,26,9,5,0,11,22,10,15,0,56,44,19,12,9,5,0,63,101,3,0,67,59,63,74,3,0,48,48,69,55,3,0,25,32,0,64,73,5,0,34,65,5,3,0,36,59,61,43,3,0,45,59,61,52,3,0,26,33,0,89,27,5,0,49,0,15,36,37,5,3,0,49,25,53,5,0,63,3,0,29,69,0,14,12,17,0,71,33,72,38,13,15,21,57,0,79,22,7,5,0,67,45,5,0,67,23,42,39,0,52,51,0,119,16,7,0,104,62,7,0,43,18,14,0,41,76,24,5,0,15,37,77,48,5,0,46,33,22,5,0,21,35,76,24,5,0,59,38,27,5,0,63,40,83,137,3,0,38,20,0,171,51,16,9,5,3,0,40,51,41,12,56,5,3,0,20,25,45,73,66,26,9,33,0,27,56,38,7,5,0,34,3,0,39,23,94,48,19,11,7,0,28,5,0,49,42,33,17,3,0,33,24,34,61,0,33,20,0,14,51,5,3,0,37,24,37,62,14,0,28,33,29,20,105,20,13,16,62,20,13,9,0,50,14,0,34,66,58,9,0,14,40,5,3,0,52,35,28,33,29,37,50,14,0,14,40,5,3,0,45,24,28,29,33,59,14,0,14,56,5,3,0,57,21,33,39,40,100,100,76,3,0,22,30,14,42,0,14,40,5,3,0,38,43,68,0,27,62,44,20,7,0,32,5,0,52,3,0,30,94,18,19,12,46,5,3,0,19,51,3,0,21,71,3,0,30,50,0,115,54,31,9,5,0,16,3,0,26,28,24,36,7,0,24,36,7,5,0,40,3,0,18,11,10,19,0,22,26,26,29,26,26,5,3,0,15,11,10,19,0,22,26,27,16,5,0,16,3,0,30,47,31,0,75,53,7,5,0,41,3,0,29,57,72,27,3,0,28,25,65,5,0,42,3,0,27,59,3,0,29,69,3,0,41,43,99,61,5,0,55,3,0,45,70,61,33,71,55,3,0,27,48,49,0,15,34,35,5,0,17,3,0,26,60,39,0,9,18,15,56,5,3,0,29,58,49,0,9,45,15,54,5,3,0,36,25,27,48,40,42,29,71,18,11,54,7,12,32,5,3,0,24,46,0,26,85,0,20,15,13,19,62,21,124,11,7,5,0,18,3,0,30,44,25,3,0,33,55,3,0,11,45,41,5,0,25,3,0,19,45,41,5,0,33,3,0,73,39,75,54,5,0,30,87,3,0,90,47,83,59,5,0,35,104,3,0,80,56,57,37,18,33,33,35,0,32,45,0,34,48,0,58,34,29,87,36,16,31,36,9,63,34,85,14,32,27,7,61,30,0,21,46,0,37,80,9,14,48,7,5,0,55,114,15,9,5,0,33,35,59,56,0,54,92,5,0,30,62,5,0,19,61,5,3,0,3,0,44,59,9,13,12,17,0,130,17,3,0,62,1,0,56,52,59,40,62,1,0,62,54,56,4,60,34,26,36,18,27,46,27,23,56,5,3,0,41,76,37,68,3,0,26,74,35,5,0,48,3,0,19,84,3,0,21,86,3,0,27,66,3,0,22,84,3,0,30,70,3,0,22,84,36,12,39,5,3,0,18,31,18,5,0,33,19,5,0,30,39,0,33,18,5,0,17,3,0,29,64,44,3,0,40,80,58,5,0,25,24,62,18,47,55,5,0,21,26,53,3,0,16,85,3,0,21,86,3,0,45,70,16,30,40,60,0,22,63,30,46,23,69,43,14,65,33,11,7,12,55,5,0,31,104,39,3,0,21,60,61,0,52,27,25,76,61,5,0,43,39,37,77,35,3,0,30,25,41,0,52,93,22,9,7,5,0,44,3,0,42,56,18,5,0,64,3,0,21,11,16,13,0,50,88,5,0,28,33,3,0,21,60,61,25,0,52,73,23,56,5,0,56,34,57,36,0,23,69,64,5,0,30,43,21,54,3,0,23,91,3,0,19,60,53,36,9,5,3,0,3,0,59,22,25,54,36,18,0,47,64,61,50,0,29,28,9,7,0,43,5,3,0,19,72,3,0,3,0,45,117,52,59,28,32,58,12,44,0,40,21,7,0,39,58,23,9,7,0,18,5,5,1,49,41,32,32,12,29,5,5,0,40,29,3,0,14,1,66,49,54,35,41,50,89,5,0,100,0,41,296,61,69,5,3,0,71,67,3,0,80,76,3,0,47,78,0,49,76,116,5,0,69,24,8,0,30,47,84,7,0,46,83,7,0,84,0,47,69,151,7,0,52,162,7,59,144,5,3,0,47,5,51,89,7,0,106,0,63,186,7,5,3,0,146,162,3,0,89,124,43,16,3,1,22,9,6,7,13,14,14,2,51,0,24,23,28,17,15,35,36,37,33,32,14,19,16,16,40,23,21,2,27,21,0,50,79,3,0,17,1,0,87,0,47,105,2,0,36,37,34,0,34,0,117,58,0,18,50,104,20,13,63,61,20,13,9,14,59,18,11,7,5,0,24,24,27,26,31,25,14,0,30,36,0,94,27,0,42,36,69,0,126,50,45,15,11,9,0,14,0,28,9,17,16,17,19,0,40,86,11,0,42,16,9,0,27,9,159,9,0,29,35,130,14,0,34,36,52,33,13,9,0,40,29,44,14,0,37,48,14,5,3,0,57,39,116,20,9,47,32,32,45,36,0,20,46,18,11,7,12,37,5,3,0,55,36,0,36,30,25,0,41,33,33,46,38,14,38,7,0,39,22,48,19,13,38,48,32,13,9,7,5,3,0,33,24,24,27,26,31,25,20,0,30,9,50,53,124,13,9,0,28,45,0,27,48,0,29,94,0,34,37,0,37,50,0,30,38,26,0,14,21,5,3,0,51,20,3,0,55,57,0,34,70,49,7,5,3,0,54,34,16,99,50,3,0,22,34,16,44,48,3,0,22,30,13,9,40,22,61,55,9,0,13,45,5,0,34,3,0,70,20,21,0,30,18,22,14,24,7,0,41,24,35,14,34,78,0,55,29,16,9,14,30,0,61,60,35,13,9,0,32,49,9,0,76,7,5,0,16,3,0,34,16,43,34,48,3,0,26,34,11,11,22,14,19,0,22,49,30,58,65,41,12,35,5,0,24,80,16,3,0,55,42,44,73,0,28,35,5,0,15,3,0,39,17,3,0,47,36,0,80,77,68,35,54,21,48,54,3,0,57,19,32,30,30,44,31,33,13,3,0,25,17,24,25,30,63,36,6,26,0,33,48,0,38,34,58,24,11,7,0,13,5,0,43,93,13,12,21,0,25,37,40,26,13,16,33,9,7,0,13,5,0,222,34,0,29,99,35,23,58,35,33,13,29,9,9,13,5,0,129,172,0,53,18,31,27,18,23,35,28,61,11,7,5,3,0,118,142,38,48,13,32,11,14,55,13,30,11,7,5,0,48,46,10,9,5,0,37,54,5,3,0,50,75,3,0,45,24,37,66,14,0,24,30,14,0,29,30,32,0,14,57,18,11,5,3,0,30,26,19,5,0,105,29,7,16,3,0,1,0,43,61,104,13,5,0,25,66,0,31,21,42,17,11,15,7,0,26,34,60,63,11,16,45,19,13,9,7,0,27,5,3,0,48,86,3,0,19,30,21,40,0,27,24,5,0,37,40,36,0,30,32,5,0,16,3,0,52,21,85,5,0,80,3,0,44,38,41,60,0,25,56,32,0,28,74,7,0,46,57,5,0,16,3,0,67,96,3,0,64,93,3,0,64,25,0,165,3,0,57,38,41,0,33,36,37,0,29,69,9,0,20,7,5,0,28,0,30,34,12,51,33,5,0,11,10,19,0,49,53,5,0,63,0,25,65,5,0,45,56,40,31,0,27,38,25,0,113,52,9,0,121,56,9,0,111,62,51,9,14,25,7,0,18,43,28,57,9,18,37,60,5,0,16,3,0,46,38,41,57,56,0,60,18,5,0,80,3,0,67,23,56,23,55,22,47,60,5,0,16,3,0,49,97,3,0,37,38,41,57,68,0,60,18,5,0,58,3,0,58,35,48,0,95,48,19,31,11,7,0,60,5,0,31,0,75,45,0,27,24,48,0,54,24,11,0,64,9,0,66,25,41,47,35,0,23,45,9,0,20,0,62,29,14,66,71,37,15,11,9,0,57,94,39,0,87,62,35,13,9,0,75,7,5,0,16,3,0,34,38,41,0,17,14,71,22,55,46,15,0,23,55,70,60,41,19,15,0,117,15,0,24,62,56,15,9,0,14,55,5,3,0,38,38,41,128,3,0,23,20,0,11,14,19,41,83,0,100,50,21,23,9,5,0,56,42,20,9,5,0,16,3,0,36,25,61,25,9,5,3,0,50,38,41,42,0,43,18,55,59,18,5,0,34,34,0,41,39,25,0,27,46,7,0,38,18,55,60,0,42,34,0,40,43,20,13,56,49,20,13,9,7,0,20,61,56,7,5,0,69,0,18,13,12,21,138,0,51,60,22,11,51,7,5,0,16,3,0,50,17,37,53,9,18,5,0,38,41,61,76,0,75,56,39,26,27,18,28,60,9,5,0,16,3,0,44,38,41,57,57,0,60,18,5,0,58,3,0,54,19,33,55,17,6,0,8,75,36,26,0,16,3,0,60,11,10,19,0,34,70,39,81,5,0,25,0,22,55,26,20,7,0,50,18,5,0,37,93,12,35,0,49,85,14,26,20,7,5,3,0,68,54,23,29,0,19,45,21,33,34,46,22,11,7,0,76,46,12,49,5,0,36,31,63,12,55,5,3,0,55,54,23,16,41,22,102,3,0,78,72,35,45,16,52,23,11,22,25,14,0,26,55,51,5,0,30,31,5,0,19,61,12,135,5,0,57,0,71,24,58,47,34,96,12,28,62,36,7,0,39,5,0,66,16,3,0,52,67,3,0,66,54,20,42,0,36,53,20,9,5,0,61,3,0,30,217,3,0,40,40,40,9,52,50,11,9,7,0,69,44,19,108,11,14,43,45,57,21,15,11,9,7,5,0,89,3,0,107,20,21,80,50,0,30,18,22,14,24,0,32,108,64,44,15,11,0,29,59,11,0,22,16,9,7,0,86,5,0,74,16,3,0,27,56,3,0,49,20,0,49,20,134,0,29,49,5,0,39,59,5,0,16,3,0,21,38,41,80,3,0,38,13,11,10,19,0,19,14,33,0,14,32,20,0,29,52,9,0,30,48,42,13,9,0,47,0,14,32,20,55,0,14,9,55,9,0,14,14,9,28,59,9,0,15,58,0,15,57,0,15,58,0,15,57,0,14,39,0,14,46,0,14,47,0,14,9,78,69,9,0,13,13,9,81,9,0,13,9,74,9,0,13,13,9,82,9,0,13,9,76,9,0,14,50,0,14,31,0,14,32,34,44,0,14,42,0,14,14,41,0,14,9,34,22,29,62,0,51,59,18,54,24,15,11,9,0,15,9,50,36,44,13,41,9,0,14,9,65,9,0,14,9,65,9,0,14,14,9,50,9,0,14,14,14,9,84,0,29,58,18,36,11,9,0,14,9,76,0,69,64,18,18,36,11,9,0,14,38,108,48,11,0,78,53,44,0,82,19,18,27,0,30,57,26,83,49,52,83,22,26,15,37,57,66,13,11,0,75,24,84,11,0,20,16,34,9,0,5,3,0,70,78,0,23,39,41,23,23,80,52,12,30,5,3,0,37,34,41,38,16,78,3,0,65,82,101,0,60,104,22,11,7,0,36,45,12,59,21,40,9,5,3,0,70,27,18,9,54,49,14,9,0,19,32,0,14,61,22,11,5,3,0,38,71,44,26,0,39,52,36,9,5,0,20,50,16,3,0,26,39,0,18,46,5,0,25,16,40,27,0,18,40,36,28,12,36,5,0,34,49,3,0,16,34,16,0,98,42,16,9,81,42,16,9,5,0,63,43,16,9,5,0,42,3,0,22,34,155,34,16,46,48,3,0,33,34,16,0,52,81,18,0,28,42,51,26,7,0,56,5,0,36,3,0,47,21,47,47,0,61,50,26,26,43,9,5,0,49,3,0,33,75,16,0,33,27,52,16,11,7,0,36,5,0,52,3,0,41,43,77,23,16,39,3,0,29,34,54,3,0,29,53,3,0,30,54,3,0,29,53,3,0,30,54,3,0,29,65,33,29,16,3,0,30,34,23,16,51,3,0,22,34,16,48,3,0,50,38,41,12,16,52,72,80,45,50,43,46,24,55,21,23,30,0,29,18,22,14,127,0,29,54,16,9,7,0,27,52,55,45,108,0,44,16,9,14,94,7,5,0,49,20,66,74,57,0,100,58,47,34,60,23,5,0,32,0,27,50,5,0,70,56,58,46,0,30,59,33,49,46,12,24,5,0,57,3,0,51,55,55,56,89,24,5,0,65,44,64,27,3,0,28,38,3,0,20,23,18,5,3,0,44,16,3,0,25,34,16,0,25,76,18,68,0,66,48,22,11,7,0,22,5,0,31,3,0,18,30,0,23,42,34,28,12,26,5,0,50,3,0,24,41,0,40,53,23,9,51,48,36,9,30,48,31,9,5,3,0,34,11,12,15,10,11,19,32,90,0,25,22,58,57,11,7,5,0,34,39,36,18,72,63,6,23,16,45,101,16,3,0,27,34,26,53,27,0,26,62,38,69,5,0,52,3,0,31,34,3,0,68,19,42,5,0,80,50,41,21,34,25,16,0,32,18,22,14,24,0,32,49,16,9,7,0,15,0,22,43,14,65,71,7,0,86,50,18,11,7,0,27,47,7,0,33,5,0,16,74,34,0,20,29,26,32,5,0,39,3,0,37,66,79,3,0,34,129,3,0,48,24,0,25,41,57,33,11,7,0,30,47,7,5,0,34,24,27,17,17,0,25,47,32,5,0,28,35,22,5,0,24,0,30,34,37,5,0,35,47,47,66,0,78,31,0,65,23,52,35,37,7,0,51,26,52,28,0,29,29,50,41,25,13,22,9,0,37,7,5,0,115,16,3,0,45,41,3,0,40,25,3,0,35,16,0,70,61,0,39,89,18,9,5,0,125,49,18,9,5,3,0,72,21,79,41,18,5,0,51,39,27,25,88,5,3,0,81,27,0,23,145,53,5,0,59,77,0,22,91,34,55,0,42,64,72,11,16,58,34,13,9,0,91,14,47,7,0,28,53,5,3,0,113,177,33,16,3,0,48,22,27,48,21,12,13,13,13,21,14,0,45,41,14,23,19,50,18,0,19,49,18,0,19,49,18,0,19,50,18,0,19,13,56,0,48,65,68,17,22,59,35,19,15,0,44,20,13,0,18,36,9,7,0,21,0,25,30,7,5,0,20,3,0,31,19,27,27,3,0,104,37,35,41,132,65,51,54,26,22,16,3,0,69,18,42,5,0,80,50,34,16,83,74,82,3,0,65,51,46,0,49,24,5,0,32,37,72,0,17,47,70,5,0,46,39,26,22,66,60,3,0,62,59,25,3,0,60,50,32,3,0,62,59,53,0,23,42,60,12,42,42,29,73,74,63,0,50,59,111,13,9,0,66,134,0,43,73,9,9,28,36,5,0,32,3,0,27,38,3,0,29,56,59,5,0,16,3,0,81,55,30,30,6,0,38,29,29,26,21,25,9,5,3,0,71,20,21,0,30,18,22,14,24,0,32,29,59,11,0,22,16,9,7,0,73,5,0,16,3,0,72,12,0,25,24,44,39,25,11,7,0,17,32,50,53,111,32,46,0,30,58,33,11,7,0,36,18,57,12,83,5,0,15,3,0,28,34,63,45,3,0,32,21,35,47,3,0,37,13,11,15,10,19,0,43,30,12,30,5,0,67,0,18,27,31,7,12,68,5,0,16,16,3,0,63,27,13,5,0,35,13,5,0,27,36,51,22,11,15,7,34,36,51,22,11,15,7,0,37,64,22,11,15,7,0,60,20,9,38,55,45,22,11,15,7,5,0,43,44,21,21,9,13,5,0,123,0,44,49,21,26,9,5,3,0,20,45,0,75,18,5,0,17,3,0,34,54,97,14,7,0,23,44,16,9,5,0,76,36,48,14,38,7,5,0,32,55,5,0,52,3,0,22,50,11,10,19,156,3,0,16,34,83,14,7,16,27,24,0,40,32,0,32,16,17,15,16,15,15,16,16,33,0,16,45,7,5,0,31,29,52,3,0,52,45,23,10,47,59,26,11,7,5,3,0,64,58,0,44,34,63,12,56,38,66,5,3,0,33,30,30,81,0,24,20,0,14,21,5,3,0,48,25,52,31,9,5,0,56,46,20,9,5,3,0,37,59,31,34,25,6,0,9,24,15,55,5,3,0,48,45,23,10,61,33,36,27,8,0,11,26,17,57,7,12,24,5,3,0,44,60,32,0,9,24,15,56,5,3,0,24,48,45,0,25,45,0,11,26,17,30,7,5,0,22,3,0,27,48,46,0,27,46,0,11,26,17,30,7,5,0,22,3,0,28,46,3,0,45,65,3,0,43,103,3,0,33,38,41,51,80,49,92,74,15,3,0,27,38,34,16,16,53,30,37,0,9,58,15,21,5,0,16,53,3,0,42,0,1,0,19,14,2,21,16,2,28,29,37,31,41,53,0,44,43,28,11,10,14,0,35,7,27,17,16,18,18,15,20,39,74,41,39,23,25,28,32,30,25,40,25,30,21,33,27,14,14,19,9,0,36,17,16,18,18,15,20,41,79,25,0,47,36,41,25,27,32,34,37,15,18,36,40,25,27,32,34,37,15,11,0,81,0,28,41,80,71,34,41,25,40,23,46,29,15,18,41,80,71,34,41,26,40,23,46,29,15,11,0,53,39,33,32,36,38,41,24,17,19,9,7,42,5,3,0,16,1,0,48,32,46,40,0,30,64,5,0,41,3,0,74,36,59,50,0,104,78,50,13,19,11,7,5,0,47,3,0,25,27,33,43,32,45,51,79,58,48,53,72,47,21,3,0,31,26,18,5,0,34,34,16,57,3,0,18,33,19,5,0,38,3,0,25,39,45,0,41,18,5,0,30,36,0,36,49,0,55,79,0,55,23,9,7,0,18,5,0,17,3,0,37,25,33,5,0,57,3,0,44,36,34,13,0,30,21,19,5,0,24,14,60,0,14,61,0,14,49,0,14,43,0,14,44,0,14,51,0,22,34,47,37,15,63,47,37,15,11,9,0,66,0,14,39,43,0,14,43,0,14,47,0,14,47,0,14,46,0,14,44,0,14,14,40,0,40,59,35,13,9,0,50,0,14,46,0,14,45,0,13,33,0,14,46,0,14,9,61,0,69,18,11,9,0,14,9,71,55,37,15,11,0,22,21,0,33,44,0,111,44,13,18,44,0,261,44,13,11,0,45,24,9,0,14,9,39,26,72,39,17,13,0,24,69,11,9,5,0,39,40,0,85,72,12,55,5,3,0,33,70,46,16,9,5,3,0,24,87,0,28,35,59,75,5,3,0,29,26,3,0,32,101,0,28,46,47,5,0,25,25,26,7,0,106,49,33,11,7,49,59,31,9,5,3,0,20,62,34,16,0,39,41,40,43,15,0,27,42,45,20,38,24,62,14,43,0,30,60,29,53,32,59,9,7,0,64,38,12,51,5,0,46,3,0,38,23,46,25,68,44,53,5,0,16,3,0,46,16,0,34,24,12,42,23,5,0,44,83,3,0,38,10,0,52,39,0,63,72,41,7,5,0,41,68,47,17,12,9,5,3,0,32,16,21,54,3,0,27,20,39,20,15,3,0,26,16,38,89,28,20,45,17,53,3,0,27,16,38,23,0,58,43,5,0,34,20,0,25,29,33,7,0,39,5,0,48,55,0,52,36,52,18,38,51,0,89,52,7,0,29,33,7,0,39,5,0,50,55,65,43,0,18,26,37,18,11,7,0,78,39,18,11,7,5,0,36,58,36,65,28,13,14,9,9,50,12,60,5,0,27,31,5,0,37,3,0,62,16,114,3,0,26,16,45,48,69,48,3,0,30,80,40,31,9,5,0,16,0,34,27,12,45,23,5,0,52,3,0,30,16,53,34,19,40,34,12,0,43,45,38,52,43,28,20,0,21,44,16,27,57,44,15,11,0,28,26,9,0,24,14,18,57,16,28,9,7,5,0,22,48,16,28,52,3,0,29,16,0,39,44,36,9,5,0,43,21,51,3,0,27,42,47,54,27,11,27,8,28,36,7,17,3,0,27,16,35,24,0,25,38,18,0,27,24,52,24,14,28,38,7,0,97,24,60,5,0,61,0,43,43,16,9,5,0,49,3,0,66,16,62,21,56,3,0,29,16,45,38,92,28,51,3,0,28,28,37,31,9,5,0,16,47,91,50,3,0,29,16,51,3,0,57,44,37,47,19,30,11,7,5,0,90,0,61,41,0,48,48,26,14,14,7,5,0,28,22,17,38,7,119,28,22,53,3,0,40,27,21,56,3,0,86,34,0,26,38,5,0,19,0,32,36,5,0,74,0,32,24,5,0,51,3,0,26,131,3,0,73,32,44,117,3,0,81,40,39,35,0,30,55,0,46,42,55,37,0,82,42,33,11,0,19,9,0,34,40,7,0,22,5,0,26,57,5,0,21,28,5,0,16,3,0,24,21,26,63,26,65,20,90,22,28,49,3,0,35,35,16,0,18,53,12,36,5,0,190,49,17,59,9,5,0,44,37,17,19,30,9,9,5,0,21,83,20,90,22,28,80,3,0,64,48,21,0,14,36,34,116,0,59,102,60,41,33,13,85,60,41,25,13,9,7,0,69,31,5,0,16,3,0,26,38,29,11,34,8,55,7,3,0,67,51,66,71,37,0,47,60,31,9,5,0,34,0,22,48,5,0,72,46,37,65,0,23,39,5,0,42,51,104,7,26,22,0,45,45,5,0,66,16,3,0,30,91,3,0,45,20,63,71,32,3,0,37,25,186,3,0,45,16,30,40,29,53,31,66,87,3,0,21,61,3,0,19,26,3,0,34,123,3,0,44,28,19,28,19,6,24,39,24,19,51,30,27,38,57,42,15,11,0,19,9,0,29,49,19,9,0,40,0,32,41,65,26,9,0,56,0,97,51,22,13,9,7,7,34,16,0,28,50,31,9,5,0,27,51,3,0,51,43,0,31,28,29,30,23,28,74,18,40,26,28,21,26,57,18,5,0,48,17,3,0,46,44,0,19,65,15,7,0,24,54,15,7,5,0,74,3,0,68,32,33,30,31,32,32,38,29,49,0,23,29,44,41,0,26,75,15,7,0,54,51,30,11,7,0,79,13,5,0,87,38,51,59,52,0,31,29,0,22,76,15,7,0,70,36,0,26,42,0,68,51,19,13,9,0,79,52,19,13,9,0,36,48,7,0,100,40,22,62,14,54,7,82,50,39,0,34,52,7,0,29,40,41,54,0,22,81,14,56,49,32,13,9,0,87,7,124,50,29,40,47,0,22,76,14,56,52,32,13,9,0,82,7,0,49,85,50,50,40,45,73,41,22,62,14,54,7,12,24,5,3,0,33,11,11,11,19,0,83,42,31,9,5,0,23,36,57,33,11,7,0,42,23,17,5,0,42,3,0,44,27,0,69,40,27,32,34,64,26,22,34,64,0,88,47,18,9,5,3,0,38,98,48,20,9,5,0,55,3,0,45,54,30,113,3,0,57,39,27,0,70,50,17,11,7,5,0,55,30,0,20,115,5,3,0,94,127,3,0,67,106,30,233,54,3,0,48,98,3,0,47,0,35,32,21,57,3,0,28,32,21,50,3,0,36,32,21,58,3,0,26,48,53,32,70,32,26,22,3,0,73,45,39,0,24,61,7,12,39,23,14,51,33,11,7,5,3,0,25,71,3,0,21,67,58,66,82,85,49,0,35,40,39,59,5,0,69,0,129,37,5,0,23,0,42,29,49,12,62,5,0,60,57,61,5,0,23,61,41,63,5,0,35,3,0,23,24,3,0,42,42,45,41,54,79,18,5,0,17,3,0,44,32,49,94,18,56,83,18,5,0,17,3,0,41,24,49,54,72,25,30,0,47,29,7,0,18,5,0,17,3,0,37,46,27,25,0,47,29,7,0,59,18,5,0,17,3,0,21,45,39,114,3,0,34,34,43,0,36,18,0,20,20,7,0,82,5,0,25,47,5,0,25,105,50,33,11,7,0,34,47,5,0,59,57,31,9,5,0,47,21,15,3,0,32,37,3,0,30,11,10,19,0,34,66,21,7,0,70,15,24,29,0,79,55,23,9,7,33,19,5,0,39,60,0,94,18,5,0,36,86,58,5,0,17,3,0,33,33,45,29,59,0,23,37,41,7,24,24,5,0,21,3,0,34,11,10,19,0,22,64,0,41,75,58,35,13,9,0,20,7,5,0,110,3,0,52,21,22,52,0,50,33,0,47,0,217,62,29,15,11,9,61,50,17,20,24,93,60,0,43,19,19,26,0,46,56,30,39,26,17,20,79,49,13,11,9,36,110,41,56,52,69,68,50,11,9,7,5,0,101,0,42,59,16,9,5,3,0,26,37,50,47,43,36,7,46,41,19,38,9,7,48,40,45,43,51,39,5,3,0,43,51,37,51,18,11,14,44,19,20,11,7,5,0,45,3,0,41,21,21,19,0,26,18,22,14,24,31,7,0,53,39,36,48,93,5,0,17,3,0,73,33,51,26,53,32,50,5,0,52,3,0,27,26,63,58,0,22,61,21,55,11,7,0,20,5,0,38,3,0,28,34,36,12,13,13,114,9,5,0,17,3,0,31,80,13,18,15,0,36,71,23,0,53,39,60,42,11,0,39,111,11,11,0,53,58,50,13,9,7,5,3,0,21,25,0,27,69,52,76,71,32,5,0,43,57,0,21,35,12,59,0,23,37,7,5,0,37,21,54,3,0,23,44,32,3,0,34,46,3,0,52,45,70,3,0,42,37,20,27,7,44,3,0,24,21,32,0,8,26,14,7,0,36,39,0,35,62,34,22,11,7,0,29,0,28,52,14,46,7,0,22,0,29,62,33,11,7,0,61,47,23,27,0,17,3,0,32,58,44,18,12,56,18,5,0,21,33,0,8,36,44,0,37,61,22,11,7,0,42,62,23,28,11,7,0,36,22,0,29,62,33,11,7,0,61,47,23,27,0,17,3,0,32,65,44,18,12,56,18,5,0,16,44,16,17,3,0,42,46,87,18,5,0,17,3,0,39,25,41,18,32,82,18,5,0,17,3,0,36,21,19,0,26,18,22,14,27,59,35,13,9,0,24,31,7,0,41,47,53,56,162,44,5,3,0,90,33,47,12,13,16,20,0,29,56,24,36,11,7,0,77,0,29,52,7,5,0,68,3,0,22,64,3,0,1,0,38,31,34,26,27,28,52,43,3,0,21,24,3,0,11,30,34,37,21,23,38,36,16,3,0,1,0,30,30,0,33,74,65,3,0,19,1,0,32,15,0,88,41,0,9,36,47,33,0,37,19,7,0,47,13,40,51,28,14,42,7,0,17,27,11,38,49,27,0,24,5,10,45,3,1,42,43,0,34,31,3,0,32,1,0,57,24,0,59,74,3,0,20,1,0,48,0,36,19,0,43,37,42,3,0,33,1,0,28,0,45,90,35,34,0,13,17,0,38,38,5,0,32,3,0,13,1,0,22,42,28,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/location.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parse-error/credentials.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parse-error/module-errors.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parse-error/to-node-description.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parse-error/standard-errors.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parse-error/strict-mode-errors.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parse-error.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/estree.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/tokenizer/context.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/tokenizer/types.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/identifier.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/scopeflags.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/base.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/comments.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/whitespace.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/tokenizer/state.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/tokenizer/index.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/scope.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/flow/scope.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/class-scope.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/expression-scope.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/util/production-parameter.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/util.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/node.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/flow/index.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/jsx/xhtml.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/jsx/index.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/typescript/scope.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/typescript/index.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/placeholders.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugins/v8intrinsic.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/plugin-utils.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/options.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/lval.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/expression.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/statement.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/parser/index.js","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.18.9/node_modules/@babel/parser/src/index.js"],"sourcesContent":["// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","// @flow\n\nexport const ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ParseErrorCode = $Values<typeof ParseErrorCodes>;\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode,\n  reasonCode: string,\n  syntaxPlugin?: SyntaxPlugin,\n\n  toMessage: ToMessage<ErrorDetails>,\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce(\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: () => any,\n  properties: Object,\n  descriptors: Object,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign((new constructor(): T), properties),\n    );\n\nexport { instantiate };\n","// @flow\n\nimport { ParseErrorCodes, toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  ImportMetaOutsideModule: _(\n    `import.meta may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n  ImportOutsideModule: _(\n    `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n});\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = $Keys<\n  $Diff<typeof NodeDescriptions, { UpdateExpression: any }>,\n>;\ntype NodeWithDescription =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | { type: NodeTypesWithDescriptions };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix)]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"Identfier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\",\n    };\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  AccessorIsGenerator: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `A ${kind}ter cannot be a generator.`,\n  ),\n\n  ArgumentsInClass: _(\n    \"'arguments' is only allowed in functions and class methods.\",\n  ),\n  AsyncFunctionInSingleStatementContext: _(\n    \"Async functions can only be declared at the top level or inside a block.\",\n  ),\n  AwaitBindingIdentifier: _(\n    \"Can not use 'await' as identifier inside an async function.\",\n  ),\n  AwaitBindingIdentifierInStaticBlock: _(\n    \"Can not use 'await' as identifier inside a static block.\",\n  ),\n  AwaitExpressionFormalParameter: _(\n    \"'await' is not allowed in async function parameters.\",\n  ),\n  AwaitNotInAsyncContext: _(\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  ),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\n    \"Classes may not have a private field named '#constructor'.\",\n  ),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _<{| kind: \"const\" | \"destructuring\" |}>(\n    ({ kind }) => `Missing initializer in ${kind} declaration.`,\n  ),\n  DecoratorBeforeExport: _(\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  ),\n  DecoratorConstructor: _(\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  ),\n  DecoratorExportClass: _(\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  ),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  ),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _<{| exportName: string |}>(\n    ({ exportName }) =>\n      `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  ),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _<{| localName: string, exportName: string |}>(\n    ({ localName, exportName }) =>\n      `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ),\n  ExportDefaultFromAsIdentifier: _(\n    \"'from' is not allowed as an identifier after 'export default'.\",\n  ),\n\n  ForInOfLoopInitializer: _<{| type: \"ForInStatement\" | \"ForOfStatement\" |}>(\n    ({ type }) =>\n      `'${\n        type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n      }' loop variable declaration may not have an initializer.`,\n  ),\n\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\n    \"Generators can only be declared at the top level or inside a block.\",\n  ),\n\n  IllegalBreakContinue: _<{| type: \"BreakStatement\" | \"ContinueStatement\" |}>(\n    ({ type }) =>\n      `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  ),\n\n  IllegalLanguageModeDirective: _(\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  ),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _<{| importName: string |}>(\n    ({ importName }) =>\n      `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ),\n  ImportCallArgumentTrailingComma: _(\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ),\n  ImportCallArity: _<{| maxArgumentCount: 1 | 2 |}>(\n    ({ maxArgumentCount }) =>\n      `\\`import()\\` requires exactly ${\n        maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n      }.`,\n  ),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  ImportJSONBindingNotDefault: _(\n    \"A JSON module can only be imported with `default`.\",\n  ),\n  IncompatibleRegExpUVFlags: _(\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  ),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _<{| radix: number |}>(\n    ({ radix }) => `Expected number in radix ${radix}.`,\n  ),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,\n  ),\n  InvalidIdentifier: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Invalid identifier ${identifierName}.`,\n  ),\n  InvalidLhs: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidLhsBinding: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  ),\n  InvalidOrUnexpectedToken: _<{| unexpected: string |}>(\n    ({ unexpected }) => `Unexpected character '${unexpected}'.`,\n  ),\n  InvalidParenthesizedAssignment: _(\n    \"Invalid parenthesized assignment pattern.\",\n  ),\n  InvalidPrivateFieldResolution: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Private name #${identifierName} is not defined.`,\n  ),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\n    \"Only properties and spread elements are allowed in record definitions.\",\n  ),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _<{| labelName: string |}>(\n    ({ labelName }) => `Label '${labelName}' is already declared.`,\n  ),\n  LetInLexicalBinding: _(\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  ),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\n    \"Only '=' operator can be used for specifying default value.\",\n  ),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _<{| missingPlugin: [string] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also), seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: _<{| missingPlugin: string[] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ),\n  ModuleAttributeDifferentFromType: _(\n    \"The only accepted module attribute is `type`.\",\n  ),\n  ModuleAttributeInvalidValue: _(\n    \"Only string literals are allowed as module attribute values.\",\n  ),\n  ModuleAttributesWithDuplicateKeys: _<{| key: string |}>(\n    ({ key }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ),\n  ModuleExportNameHasLoneSurrogate: _<{| surrogateCharCode: number |}>(\n    ({ surrogateCharCode }) =>\n      `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n        16,\n      )}'.`,\n  ),\n  ModuleExportUndefined: _<{| localName: string |}>(\n    ({ localName }) => `Export '${localName}' is not defined.`,\n  ),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ),\n  ObsoleteAwaitStar: _(\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  ),\n  OptionalChainingNoNew: _(\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  ),\n  OptionalChainingNoTemplate: _(\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  ),\n  OverrideOnConstructor: _(\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  ),\n  PrivateNameRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Duplicate private name #${identifierName}.`,\n  ),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  ),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  ),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _(\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  ),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\n    \"'import' and 'export' may only appear at the top level.\",\n  ),\n  UnexpectedKeyword: _<{| keyword: string |}>(\n    ({ keyword }) => `Unexpected keyword '${keyword}'.`,\n  ),\n  UnexpectedLeadingDecorator: _(\n    \"Leading decorators must be attached to a class declaration.\",\n  ),\n  UnexpectedLexicalDeclaration: _(\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  ),\n  UnexpectedNewTarget: _(\n    \"`new.target` can only be used in functions or class properties.\",\n  ),\n  UnexpectedNumericSeparator: _(\n    \"A numeric separator is only allowed between two digits.\",\n  ),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,\n  ),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _<{|\n    expected?: ?string,\n    unexpected?: ?string,\n  |}>(\n    ({ expected, unexpected }) =>\n      `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n        expected ? `, expected \"${expected}\"` : \"\"\n      }`,\n  ),\n  UnexpectedTokenUnaryExponentiation: _(\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  ),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\n    \"A decorated export must export a class declaration.\",\n  ),\n  UnsupportedDefaultExport: _(\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  ),\n  UnsupportedImport: _(\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  ),\n  UnsupportedMetaProperty: _<{|\n    target: string,\n    onlyValidPropertyName: string,\n  |}>(\n    ({ target, onlyValidPropertyName }) =>\n      `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  ),\n  UnsupportedParameterDecorator: _(\n    \"Decorators cannot be used to decorate parameters.\",\n  ),\n  UnsupportedPropertyDecorator: _(\n    \"Decorators cannot be used to decorate object literal properties.\",\n  ),\n  UnsupportedSuper: _(\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  ),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Identifier '${identifierName}' has already been declared.`,\n  ),\n  YieldBindingIdentifier: _(\n    \"Can not use 'yield' as identifier inside a generator.\",\n  ),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\n    \"Numeric separator can not be used after leading 0.\",\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: _<{| referenceName: string |}>(\n    ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,\n  ),\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: _<{| bindingName: string |}>(\n    ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,\n  ),\n\n  StrictFunction: _(\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  ),\n  StrictNumericEscape: _(\n    \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  ),\n  StrictOctalLiteral: _(\n    \"Legacy octal literals are not allowed in strict mode.\",\n  ),\n  StrictWith: _(\"'with' in strict mode.\"),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set<string>([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n]);\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter: _(\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  ),\n  PipeTopicRequiresHackPipes: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n  PipeTopicUnbound: _(\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  ),\n  PipeTopicUnconfiguredToken: _<{| token: string |}>(\n    ({ token }) =>\n      `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  ),\n  PipeTopicUnused: _(\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  ),\n  PipeUnparenthesizedBody: _<{| type: string |}>(\n    ({ type }) =>\n      `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n        type,\n      })}; please wrap it in parentheses.`,\n  ),\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow: _(\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  ),\n  PipelineBodySequenceExpression: _(\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  ),\n  PipelineHeadSequenceExpression: _(\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  ),\n  PipelineTopicUnused: _(\n    \"Pipeline is in topic style but does not use topic reference.\",\n  ),\n  PrimaryTopicNotAllowed: _(\n    \"Topic reference was used in a lexical context without topic binding.\",\n  ),\n  PrimaryTopicRequiresSmartPipeline: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n});\n","// @flow\n\nimport { Position } from \"./util/location\";\nimport type { NodeBase } from \"./types\";\nimport {\n  instantiate,\n  type ParseErrorCode,\n  ParseErrorCodes,\n  type ParseErrorCredentials,\n} from \"./parse-error/credentials\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: string;\n\n  missingPlugin?: string | string[];\n\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = ({\n  loc: Position,\n  details: ErrorDetails,\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails: Object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = { loc: Position, details: ErrorDetails };\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate<ParseError<ErrorDetails>>(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(overrides: { loc?: Position, details?: ErrorDetails } = {}) {\n          const loc = overrides.loc || {};\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get() {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    );\n  };\n}\n\n// This part is tricky. You'll probably notice from the name of this function\n// that it is supposed to return `ParseErrorCredentials`, but instead these.\n// declarations seem to instead imply that they return\n// `ParseErrorConstructor<ErrorDetails>` instead. This is because in Flow we\n// can't easily extract parameter types (either from functions, like with\n// Typescript's Parameters<f> utility type, or from generic types either). As\n// such, this function does double duty: packaging up the credentials during\n// its actual runtime operation, but pretending to return the\n// `ParseErrorConstructor<ErrorDetails>` that we won't actually have until later\n// to the type system, avoiding the need to do so with $ObjMap (which doesn't\n// work) in `ParseErrorEnum`. This hack won't be necessary when we switch to\n// Typescript.\ndeclare function toParseErrorCredentials<T: string>(\n  T,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<{||}>;\n\n// ESLint seems to erroneously think that Flow's overloading syntax is an\n// accidental redeclaration of the function:\n// https://github.com/babel/eslint-plugin-babel/issues/162\n// eslint-disable-next-line no-redeclare\ndeclare function toParseErrorCredentials<ErrorDetails>(\n  (ErrorDetails) => string,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<ErrorDetails>;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return {\n    toMessage:\n      typeof toMessageOrMessage === \"string\"\n        ? () => toMessageOrMessage\n        : toMessageOrMessage,\n    ...credentials,\n  };\n}\n\n// This is the templated form.\ndeclare function ParseErrorEnum(string[]): typeof ParseErrorEnum;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\ndeclare function ParseErrorEnum<T>(\n  toParseErrorCredentials: (typeof toParseErrorCredentials) => T,\n  syntaxPlugin?: string,\n): T;\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either error\n// messages, or `toMessage` functions that define additional necessary `details`\n// needed by the `ParseError`:\n//\n// ParseErrorEnum`optionalSyntaxPlugin` (_ => ({\n//   ErrorWithStaticMessage: _(\"message\"),\n//   ErrorWithDynamicMessage: _<{ type: string }>(({ type }) => `${type}`),\n// });\n//\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function ParseErrorEnum(argument, syntaxPlugin) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap =>\n      ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...partialCredentials[reasonCode],\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {|\n  ...ErrorDetails,\n  at: Position | NodeBase,\n|};\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(...arguments);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, start: number, startLoc: Position) {\n      super.resetStartLocation(node, start, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: ch => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: ch => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: ch => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: ch =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simplified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const isAllowedSibling =\n      radix === 16\n        ? isAllowedNumericSeparatorSibling.hex\n        : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n        ? isAllowedNumericSeparatorSibling.oct\n        : isAllowedNumericSeparatorSibling.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          Number.isNaN(next) ||\n          !isAllowedSibling(next) ||\n          forbiddenSiblings.has(prev) ||\n          forbiddenSiblings.has(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix,\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1),\n          });\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .slice(this.state.pos - 1, this.state.pos + 2)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos,\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | empty {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: string, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: string[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n}\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","// @flow\n\nimport { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\n\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{||}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{||}>,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: ([ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    { at: node }: { at: Node },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{||}>,\n    { at: node }: { at: Node },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParseError<any>),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  ),\n  AmbiguousDeclareModuleKind: _(\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  ),\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,\n  ),\n  DeclareClassElement: _(\n    \"The `declare` modifier can only appear on class fields.\",\n  ),\n  DeclareClassFieldInitializer: _(\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  ),\n  DuplicateDeclareModuleExports: _(\n    \"Duplicate `declare module.exports` statement.\",\n  ),\n  EnumBooleanMemberNotInitialized: _<{|\n    memberName: string,\n    enumName: string,\n  |}>(\n    ({ memberName, enumName }) =>\n      `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumDuplicateMemberName: _<{| memberName: string, enumName: string |}>(\n    ({ memberName, enumName }) =>\n      `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  ),\n  EnumInconsistentMemberValues: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  ),\n  EnumInvalidExplicitType: _<{| invalidEnumType: string, enumName: string |}>(\n    ({ invalidEnumType, enumName }) =>\n      `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidExplicitTypeUnknownSupplied: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName, explicitType }) =>\n      // $FlowIgnore (coercing null which never actually happens)\n      `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  ),\n  EnumInvalidMemberInitializerSymbolType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberInitializerUnknownType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberName: _<{|\n    enumName: string,\n    memberName: string,\n    suggestion: string,\n  |}>(\n    ({ enumName, memberName, suggestion }) =>\n      `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  ),\n  EnumNumberMemberNotInitialized: _<{|\n    enumName: string,\n    memberName: string,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumStringMemberInconsistentlyInitailized: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  ),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  ),\n  InexactInsideExact: _(\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  ),\n  InexactInsideNonObject: _(\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  ),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  ),\n  MissingTypeParamDefault: _(\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  ),\n  NestedDeclareModule: _(\n    \"`declare module` cannot be used inside another `declare module`.\",\n  ),\n  NestedFlowComment: _(\n    \"Cannot have a flow comment inside another flow comment.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    !process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {},\n  ),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\n    \"A type annotation is required for the `this` parameter.\",\n  ),\n  ThisParamBannedInConstructor: _(\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\n    \"The `this` parameter must be the first function parameter.\",\n  ),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeCastInPattern: _(\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  ),\n  UnexpectedExplicitInexactInObject: _(\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  ),\n  UnexpectedReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,\n  ),\n  UnexpectedReservedUnderscore: _(\n    \"`_` is only allowed as a type argument to call or new.\",\n  ),\n  UnexpectedSpaceBetweenModuloChecks: _(\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  ),\n  UnexpectedSpreadType: _(\n    \"Spread operator cannot appear in class or interface definitions.\",\n  ),\n  UnexpectedSubtractionOperand: _(\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  ),\n  UnexpectedTokenAfterTypeParameter: _(\n    \"Expected an arrow function after this type parameter declaration.\",\n  ),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  ),\n  UnsupportedDeclareExportKind: _<{|\n    unsupportedExportKind: string,\n    suggestion: string,\n  |}>(\n    ({ unsupportedExportKind, suggestion }) =>\n      `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  ),\n  UnsupportedStatementInDeclareModule: _(\n    \"Only declares and type imports are allowed inside declare module.\",\n  ),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\"),\n}));\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(...arguments);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string, __proto__: null } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  ),\n  MissingClosingTagElement: _<{| openingTagName: string |}>(\n    ({ openingTagName }) =>\n      `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  ),\n  MissingClosingTagFragment: _(\n    \"Expected corresponding JSX closing tag for <>.\",\n  ),\n  UnexpectedSequenceExpression: _(\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  ),\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: _<{| unexpected: string, HTMLEntity: string |}>(\n    ({ unexpected, HTMLEntity }) =>\n      `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  ),\n  UnsupportedJsxValue: _(\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  ),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            // $FlowIgnore\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              // $FlowIgnore\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _<{| methodName: string |}>(\n    ({ methodName }) =>\n      `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  ),\n  AbstractPropertyHasInitializer: _<{| propertyName: string |}>(\n    ({ propertyName }) =>\n      `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  ),\n  AccesorCannotDeclareThisParameter: _(\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  ),\n  AccesorCannotHaveTypeParameters: _(\n    \"An accessor cannot have type parameters.\",\n  ),\n  CannotFindName: _<{| name: string |}>(\n    ({ name }) => `Cannot find name '${name}'.`,\n  ),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\n    \"Class methods cannot have the 'readonly' modifier.\",\n  ),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ),\n  ConstructorHasTypeParameters: _(\n    \"Type parameters cannot appear on a constructor declaration.\",\n  ),\n  DeclareAccessor: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `'declare' is not allowed in ${kind}ters.`,\n  ),\n  DeclareClassFieldHasInitializer: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  DeclareFunctionHasImplementation: _(\n    \"An implementation cannot be declared in ambient contexts.\",\n  ),\n  DuplicateAccessibilityModifier: _<{| modifier: N.Accessibility |}>(\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line no-unused-vars\n    ({ modifier }) => `Accessibility modifier already seen.`,\n  ),\n  DuplicateModifier: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `Duplicate modifier: '${modifier}'.`,\n  ),\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: _<{| token: \"extends\" | \"implements\" |}>(\n    ({ token }) => `'${token}' list cannot be empty.`,\n  ),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\n    \"'export declare' must be followed by an ambient declaration.\",\n  ),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _<{| modifiers: [TsModifier, TsModifier] |}>(\n    ({ modifiers }) =>\n      `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  ),\n  IndexSignatureHasAbstract: _(\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  ),\n  IndexSignatureHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  IndexSignatureHasDeclare: _(\n    \"Index signatures cannot have the 'declare' modifier.\",\n  ),\n  IndexSignatureHasOverride: _(\n    \"'override' modifier cannot appear on an index signature.\",\n  ),\n  IndexSignatureHasStatic: _(\n    \"Index signatures cannot have the 'static' modifier.\",\n  ),\n  InitializerNotAllowedInAmbientContext: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  InvalidModifierOnTypeMember: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,\n  ),\n  InvalidModifierOnTypeParameter: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier cannot appear on a type parameter.`,\n  ),\n  InvalidModifierOnTypeParameterPositions: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  ),\n  InvalidModifiersOrder: _<{| orderedModifiers: [TsModifier, TsModifier] |}>(\n    ({ orderedModifiers }) =>\n      `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  ),\n  InvalidPropertyAccessAfterInstantiationExpression: _(\n    \"Invalid property access after an instantiation expression. \" +\n      \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  ),\n  InvalidTupleMemberLabel: _(\n    \"Tuple members must be labeled with a simple identifier.\",\n  ),\n  MissingInterfaceName: _(\n    \"'interface' declarations must be followed by an identifier.\",\n  ),\n  MixedLabeledAndUnlabeledElements: _(\n    \"Tuple members must all have names or all not have names.\",\n  ),\n  NonAbstractClassHasAbstractMethod: _(\n    \"Abstract methods can only appear within an abstract class.\",\n  ),\n  NonClassMethodPropertyHasAbstractModifer: _(\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  ),\n  OptionalTypeBeforeRequired: _(\n    \"A required element cannot follow an optional element.\",\n  ),\n  OverrideNotInSubClass: _(\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  ),\n  PrivateElementHasAbstract: _(\n    \"Private elements cannot have the 'abstract' modifier.\",\n  ),\n  PrivateElementHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  ReadonlyForMethodSignature: _(\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ),\n  ReservedArrowTypeParam: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ),\n  ReservedTypeAssertion: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  ),\n  SetAccesorCannotHaveOptionalParameter: _(\n    \"A 'set' accessor cannot have an optional parameter.\",\n  ),\n  SetAccesorCannotHaveRestParameter: _(\n    \"A 'set' accessor cannot have rest parameter.\",\n  ),\n  SetAccesorCannotHaveReturnType: _(\n    \"A 'set' accessor cannot have a return type annotation.\",\n  ),\n  SingleTypeParameterWithoutTrailingComma: _<{| typeParameterName: string |}>(\n    ({ typeParameterName }) =>\n      `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  ),\n  StaticBlockCannotHaveModifier: _(\n    \"Static class blocks cannot have any modifier.\",\n  ),\n  TypeAnnotationAfterAssign: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  ),\n  TypeModifierIsUsedInTypeExports: _(\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  ),\n  TypeModifierIsUsedInTypeImports: _(\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  ),\n  UnexpectedParameterModifier: _(\n    \"A parameter property is only allowed in a constructor implementation.\",\n  ),\n  UnexpectedReadonly: _(\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  ),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\n    \"Unexpected type cast in parameter position.\",\n  ),\n  UnsupportedImportTypeArgument: _(\n    \"Argument in a type import must be a string literal.\",\n  ),\n  UnsupportedParameterPropertyKind: _(\n    \"A parameter property may not be declared using a binding pattern.\",\n  ),\n  UnsupportedSignatureParameterKind: _<{| type: string |}>(\n    ({ type }) =>\n      `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(modifier: string): boolean %checks {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      stopOnStartOfClassStaticBlock?: boolean,\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any,\n    }): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: N.TsTypeParameter,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: ?(node: N.TsTypeParameter) => void,\n    ): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: ?(node: N.TsTypeParameter) => void) {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node: N.TsExpressionWithTypeArguments = this.startNode();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n      properties: { declare?: true } = {},\n    ): ?N.TsInterfaceDeclaration {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      properties: { const?: true, declare?: true } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // $FlowIgnore (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              // $FlowIgnore\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node: N.TsInstantiationExpression = this.startNodeAt(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node: N.TsEnumDeclaration = this.startNode();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(this.startNode());\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member: any).accessibility,\n          });\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: ?N.Declaration =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | ?N.TsInterfaceDeclaration {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\"),\n}));\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n    }\n\n    toAssignable(node: N.Node): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(...arguments);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  ObjectMember,\n  /*:: TsNamedTypeElementBase, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line no-unused-vars\n    binding: BindingTypes,\n  ) {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor,\n      binding?: BindingTypes,\n      checkClashes?: Set<string> | false,\n      strictModeChanged?: boolean,\n      allowingSloppyLetBinding?: boolean,\n      hasParenthesizedAncestor?: boolean,\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // $FlowIgnore\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.NewExpression): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(node: N.NewExpression): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // $FlowIgnore\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // $FlowIgnore\n                !!node.key\n                  ? node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      { at: node },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      { at: node },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node:\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n      | N.ImportDeclaration,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkJSONModuleImport(\n    node:\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n      | N.ImportDeclaration,\n  ) {\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      const { specifiers } = node;\n      if (node.specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier: N.Node, type: string) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value,\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","_","ImportMetaOutsideModule","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","clone","overrides","message","pos","toParseErrorCredentials","toMessageOrMessage","credentials","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","toParseErrorCredentialsMap","partialCredentials","ParseErrorConstructors","reasonCode","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","rest","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","raise","at","arguments","finishCallExpression","optional","callee","source","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetStartLocation","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","template","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","Token","Tokenizer","isLookahead","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","inClass","content","mods","char","includes","readInt","len","forceLen","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","Number","isNaN","errorRecovery","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","isUnparenthesizedInAssign","binding","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","isLast","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","strictModeChanged","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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","sourceRoot":""},"url":null},"file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/lib/index.js":{"lineLengths":[13,0,62,0,58,32,18,39,13,43,24,45,30,3,16,1,0,16,33,23,25,24,21,22,23,3,1,22,27,24,22,27,33,23,19,3,1,0,65,9,9,11,9,15,73,1,0,22,43,66,2,52,9,39,23,4,14,16,72,3,3,233,20,19,222,20,63,0,20,28,71,46,4,24,81,46,3,2,0,26,46,48,45,55,50,30,37,37,27,46,27,38,53,57,48,54,30,21,29,30,4,45,37,2,28,7,8,111,0,22,25,8,46,82,116,88,98,89,109,77,74,77,93,77,93,69,64,62,35,8,54,154,189,106,139,72,72,65,127,67,72,21,14,92,56,61,57,56,27,14,14,168,98,28,8,118,68,72,76,107,26,8,75,109,49,27,14,121,96,21,20,109,65,66,84,76,81,108,49,48,73,37,18,9,45,58,72,32,16,54,23,18,48,16,12,68,23,12,76,35,93,30,14,48,78,35,18,58,62,98,68,24,13,52,101,69,59,48,87,41,19,17,135,25,17,155,69,115,84,94,39,7,70,38,21,104,27,13,48,56,52,55,56,130,111,84,91,91,36,71,60,25,18,149,30,18,53,177,181,183,69,69,141,75,167,66,71,175,179,181,68,127,65,84,23,11,43,92,99,89,88,53,28,16,54,76,21,13,14,112,121,111,69,84,106,81,29,11,25,92,85,99,140,47,57,54,49,93,22,18,68,82,76,81,2,0,24,58,25,17,58,32,15,51,104,80,78,38,2,0,149,30,173,144,81,32,9,189,125,29,8,80,8,39,123,100,103,86,97,150,2,0,34,29,40,7,15,13,66,31,8,11,6,67,9,9,29,40,28,163,69,11,8,16,23,25,8,16,15,84,10,20,50,17,13,9,8,12,29,24,8,52,41,24,7,7,4,1,49,32,83,3,36,51,42,50,31,44,25,19,7,15,16,64,76,80,39,17,15,23,18,19,3,32,1,187,0,7,16,11,69,20,20,3,33,60,56,14,1,72,11,49,30,54,5,16,3,0,22,12,9,6,21,9,41,17,5,0,48,18,14,11,6,16,3,0,29,15,9,29,23,20,5,49,46,16,3,0,30,25,50,47,16,3,29,47,3,0,29,42,3,30,42,3,0,22,41,3,30,42,3,0,30,39,27,32,42,56,27,38,33,47,28,16,3,0,31,38,28,3,26,54,40,12,35,5,3,40,31,3,26,30,231,3,73,80,82,54,27,3,94,106,32,58,35,5,32,3,22,42,5,61,20,7,5,60,3,47,46,16,19,21,36,16,3,23,5,61,41,7,5,45,3,26,5,61,44,7,5,21,3,0,29,49,30,22,16,3,62,61,58,3,0,104,36,30,33,89,41,25,26,40,28,5,27,30,3,31,59,5,61,28,7,5,45,24,3,38,66,5,61,28,7,5,45,34,24,3,72,92,15,29,35,27,7,29,5,16,3,71,91,15,25,29,5,16,3,57,103,3,33,54,54,5,47,3,37,54,13,12,13,15,36,82,7,38,12,38,5,3,57,53,45,20,9,29,43,20,9,12,66,5,3,46,66,40,37,38,47,29,99,7,28,25,5,16,3,28,5,43,13,5,38,3,39,54,59,24,34,29,14,36,43,65,45,54,33,9,0,38,9,36,17,23,19,195,45,41,28,11,9,14,5,16,3,50,70,36,95,43,7,0,23,49,32,57,7,84,28,5,16,3,34,42,29,5,48,3,25,43,3,0,26,76,3,24,69,3,36,68,3,38,45,27,3,61,41,27,3,3,0,18,37,24,32,23,41,3,1,15,29,33,34,48,2,0,1,45,1,0,24,24,20,22,20,21,25,33,24,26,29,29,35,25,27,25,26,24,23,32,40,40,52,32,36,32,34,56,5,32,5,3,1,0,29,44,25,43,30,15,1,35,28,15,9,5,1,26,22,23,23,28,28,25,42,80,21,25,83,106,106,91,56,26,1,48,84,21,41,25,85,108,108,93,58,26,1,0,12,30,15,14,5,35,15,14,5,34,15,14,5,29,33,28,15,14,5,32,15,14,5,33,15,14,5,27,31,28,15,14,5,27,27,14,5,26,14,5,27,14,5,34,14,5,24,30,14,5,33,28,14,5,36,32,14,5,31,14,5,35,15,14,5,37,14,5,41,15,14,5,23,26,14,5,45,0,24,15,12,5,29,15,12,5,34,15,12,5,32,15,12,5,35,15,12,5,0,32,11,12,14,5,26,15,11,14,5,27,15,11,14,5,34,14,5,31,14,5,33,42,34,35,33,34,34,44,34,34,42,40,41,41,31,15,13,11,14,5,28,14,14,5,26,13,5,30,31,15,14,26,5,28,15,12,5,44,15,12,5,33,32,14,5,33,39,39,38,14,5,32,14,5,37,40,14,5,27,36,14,5,35,34,15,11,14,5,29,29,33,31,30,15,14,5,32,14,5,34,14,5,34,14,5,38,14,5,35,36,14,5,32,14,5,32,14,5,34,14,5,36,15,11,14,5,32,15,11,14,5,36,15,11,14,5,28,11,14,5,30,10,5,34,10,5,0,32,14,5,40,14,5,38,14,5,38,14,5,36,14,5,34,14,5,34,14,5,36,14,5,32,14,5,36,14,5,34,14,5,40,14,5,38,14,5,38,14,5,42,14,5,40,14,5,42,14,5,40,14,5,48,14,5,46,14,5,38,14,5,32,14,5,40,14,5,38,14,5,42,14,5,46,14,5,38,14,5,44,14,5,40,14,5,44,14,5,42,14,5,36,14,5,40,14,5,46,14,5,46,14,5,36,14,5,40,14,5,29,14,5,0,33,14,5,27,14,5,33,14,5,35,14,5,33,14,5,37,14,5,26,34,35,20,5,43,20,5,38,34,20,4,2,35,37,1,51,21,1,44,37,1,44,37,1,44,33,1,41,33,1,35,36,1,52,38,1,29,36,1,32,36,1,33,36,1,32,22,1,31,30,1,39,38,1,43,38,1,32,28,1,41,28,1,41,22,1,33,36,1,34,27,1,1,44,18,4,105,30,4,45,57,20,12,35,5,4,46,45,4,1,0,4306,2658,85,106,62,0,2067,1055,0,35,20,60,18,33,22,33,3,15,1,0,34,36,30,36,31,23,83,3,57,1,0,33,36,29,30,30,36,31,23,78,3,103,1,0,23,329,109,35,2,48,61,69,0,41,57,1,0,47,76,1,0,45,46,1,0,51,84,1,26,28,1,0,48,67,1,0,353,97,20,18,34,39,1,0,32,30,31,28,35,28,35,28,35,32,84,39,34,34,38,39,36,37,39,45,46,47,41,0,92,62,54,64,64,44,92,58,42,59,63,60,70,52,40,36,36,86,0,90,86,60,60,26,0,13,0,22,25,29,31,23,3,1,0,20,33,25,25,27,38,25,29,3,20,59,3,20,62,3,20,60,3,26,67,3,17,60,3,41,47,71,3,23,52,13,13,29,39,20,7,46,21,7,5,3,28,63,3,29,64,3,22,28,3,16,50,3,10,40,23,3,0,37,123,3,39,36,80,68,46,34,14,32,7,45,45,7,46,61,35,70,28,45,43,7,5,62,41,5,3,35,62,41,5,3,60,61,50,16,28,9,5,3,49,55,43,89,5,44,103,5,194,3,24,11,10,11,45,75,41,52,5,3,18,55,3,26,52,13,13,29,30,21,7,5,3,0,27,52,13,13,29,72,21,7,5,3,1,0,31,24,19,38,3,1,45,22,32,3,39,38,51,68,43,39,13,5,46,3,49,73,51,105,5,17,3,24,60,33,5,3,1,0,18,17,35,45,3,27,43,44,12,55,40,21,7,57,53,91,23,9,7,18,5,3,33,26,101,3,1,0,46,44,37,10,47,3,1,0,45,43,36,10,46,3,1,0,43,41,34,10,44,3,1,0,57,25,26,41,32,3,68,47,10,57,3,1,41,23,60,38,3,0,24,11,18,19,51,41,35,42,43,39,10,5,11,22,13,25,40,39,35,40,40,34,14,39,40,9,14,7,5,3,0,30,11,14,18,76,43,61,7,44,61,7,12,13,29,27,20,59,28,34,31,34,66,18,32,40,65,18,37,36,41,30,29,36,62,18,33,30,33,64,18,40,35,66,18,18,13,47,13,9,14,41,7,5,3,0,31,11,18,19,56,44,5,33,3,0,43,11,18,19,11,12,21,29,47,41,35,5,3,0,45,11,18,19,51,41,35,25,40,39,43,33,37,40,38,38,14,7,5,3,1,0,43,53,0,26,17,12,12,14,14,18,12,19,3,1,55,78,0,45,8,39,56,0,29,17,16,16,16,12,13,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,12,19,3,1,0,13,17,25,26,28,27,25,21,31,24,40,40,24,36,32,34,33,51,25,34,25,6,27,44,21,23,27,17,20,22,19,17,30,32,26,33,35,29,46,34,26,3,8,15,15,14,15,6,102,29,34,74,3,17,75,3,21,30,35,60,26,26,46,26,7,0,23,5,17,3,1,0,39,34,2,43,57,33,2,42,36,34,34,82,2,75,25,37,33,15,29,23,9,10,12,12,24,72,42,12,5,37,44,42,12,5,20,42,95,48,27,14,20,17,10,14,22,7,8,12,18,15,15,23,44,12,16,22,40,32,51,14,56,16,9,18,37,14,74,7,12,12,5,3,10,8,13,20,14,12,38,4,1,44,28,71,3,46,1,78,37,8,0,22,8,7,14,11,5,37,15,13,23,13,23,13,7,17,10,15,13,91,69,7,13,7,17,10,15,13,83,70,7,13,23,12,23,13,27,13,23,12,41,14,7,12,22,16,14,14,21,12,12,23,25,14,64,7,12,33,33,70,32,42,26,43,40,9,35,43,61,27,29,18,69,11,9,47,7,42,3,1,93,25,8,4,6,7,98,19,25,67,12,27,5,3,10,12,7,4,1,112,20,127,225,22,16,65,39,12,54,45,45,31,33,18,13,10,73,127,33,18,13,10,67,7,0,12,15,5,21,27,28,27,32,22,12,21,5,23,36,16,18,13,10,83,16,28,16,23,14,14,7,5,10,32,3,71,12,14,9,6,3,10,13,7,4,1,80,35,11,19,10,6,11,9,114,10,43,27,57,14,16,21,13,10,7,5,10,6,11,9,87,3,10,9,7,4,1,0,25,22,49,53,1,76,0,13,22,27,29,29,25,64,3,1,0,40,0,31,12,30,21,34,57,54,41,53,15,11,20,8,99,86,6,86,77,66,7,104,57,65,52,11,8,50,53,56,11,7,7,106,73,50,55,52,11,7,7,29,29,23,31,29,3,20,49,28,30,3,0,10,31,30,44,5,47,49,53,21,3,13,27,18,18,12,19,5,3,0,15,36,3,0,31,12,21,18,23,25,21,35,27,31,41,29,33,36,6,3,0,15,27,48,28,21,29,28,21,16,3,20,52,3,28,35,76,3,23,56,3,23,40,64,47,40,62,7,5,14,3,0,21,31,17,88,10,10,38,5,3,16,61,3,0,15,21,38,74,40,28,13,5,63,3,0,32,17,63,33,58,21,52,36,9,5,45,37,72,27,50,5,0,33,0,21,27,46,12,35,65,6,53,19,3,30,33,17,63,64,39,64,51,7,5,0,33,0,31,59,21,26,12,12,10,65,6,53,19,3,0,15,38,24,48,55,19,16,17,15,27,16,16,65,29,11,16,18,18,27,31,48,16,16,62,20,15,60,44,43,73,17,22,15,20,15,56,44,43,73,17,22,15,20,25,11,16,16,33,29,51,39,156,54,42,41,71,15,20,25,13,51,39,138,54,42,41,71,15,20,25,13,18,23,11,7,5,30,33,33,26,12,17,26,27,28,8,54,5,3,0,26,36,49,37,27,27,28,35,5,3,22,27,25,3,0,26,63,13,5,39,46,35,57,36,9,5,74,42,75,147,38,11,7,26,25,28,14,28,7,41,23,50,29,23,46,12,27,5,3,19,59,35,28,13,5,74,26,27,12,23,27,5,3,21,59,22,27,12,27,5,3,27,62,55,32,33,24,62,49,5,62,32,16,3,31,37,18,57,0,37,14,55,16,5,0,44,14,35,5,31,3,28,59,24,61,29,14,49,7,13,5,23,24,29,15,7,61,77,78,40,13,9,28,28,15,7,0,60,77,77,40,13,9,28,28,15,7,5,22,27,13,5,45,3,21,59,0,44,27,5,27,41,23,22,10,27,0,65,31,32,7,5,10,27,5,3,22,59,0,60,23,22,10,27,5,10,27,5,3,28,59,24,27,13,5,22,27,12,27,5,3,18,11,9,19,48,22,50,29,15,7,27,13,5,22,27,13,5,25,3,18,11,9,19,48,22,65,53,36,15,7,30,13,5,22,27,13,5,25,3,27,59,22,82,13,5,37,26,27,13,5,44,3,24,59,60,22,25,29,14,29,7,62,26,27,12,23,27,5,3,26,19,0,14,29,15,0,14,25,29,15,14,25,29,15,14,25,29,15,14,25,29,15,14,100,79,81,42,15,11,0,30,30,16,27,30,9,15,14,25,28,15,15,100,79,82,42,15,11,0,30,30,16,27,30,9,15,15,25,28,15,14,97,31,16,27,31,9,15,14,34,15,14,33,15,14,9,65,44,37,19,11,44,36,19,11,43,36,19,11,9,14,14,14,14,14,14,14,14,14,31,15,0,14,14,30,15,0,14,31,15,14,14,41,15,15,14,38,15,14,31,15,14,14,38,15,14,28,15,14,28,15,14,14,37,15,15,29,15,14,32,15,14,36,15,14,24,15,14,38,30,17,9,5,55,35,44,7,3,24,72,27,32,3,16,41,39,25,9,9,19,20,31,53,57,11,7,44,26,53,57,11,7,20,24,14,24,25,42,26,43,16,9,28,7,5,49,10,18,25,62,31,42,43,0,38,25,60,35,58,27,15,11,32,35,58,27,15,11,9,34,51,25,13,9,53,49,23,11,14,14,7,12,19,5,25,27,23,17,7,3,0,67,11,8,9,162,25,13,3,26,46,25,24,36,22,39,56,13,9,5,55,23,23,22,30,47,20,9,5,65,49,36,9,5,19,88,33,13,5,31,3,0,29,33,46,24,25,26,28,24,54,40,36,9,5,94,25,62,62,20,9,31,51,32,56,71,13,9,7,56,5,53,34,23,23,21,51,5,52,53,39,25,7,38,53,22,11,7,21,25,51,5,23,38,49,22,11,7,23,22,5,23,61,42,43,22,11,7,23,23,5,65,49,36,9,5,0,78,19,33,13,5,20,33,13,5,61,31,3,0,33,11,11,9,142,25,16,3,21,11,10,10,14,15,94,92,29,37,33,31,3,0,30,25,31,5,21,29,3,0,23,47,11,10,22,10,14,15,70,94,29,37,33,26,157,5,45,73,12,23,74,5,3,40,6,6,27,67,32,10,9,12,61,5,3,0,24,35,18,33,36,34,52,5,42,53,33,47,29,38,61,50,96,62,51,40,13,42,19,9,25,45,27,38,59,26,15,11,44,9,36,14,14,7,5,63,3,0,23,43,38,29,51,12,34,5,3,25,11,10,19,57,53,32,42,9,5,3,0,40,11,10,26,74,59,32,10,13,7,49,57,17,3,0,49,11,10,26,75,59,26,37,50,30,36,41,14,17,11,7,39,5,53,3,0,28,0,25,46,51,49,7,3,33,37,18,5,44,50,33,7,3,32,58,52,32,34,9,5,3,23,41,25,50,9,6,3,1,0,18,17,34,35,43,3,1,25,23,25,20,43,25,3,13,45,3,11,38,3,10,43,0,35,0,80,20,55,55,9,14,65,18,30,11,7,5,3,46,11,19,20,27,23,43,52,60,21,63,66,63,66,0,67,51,30,45,7,5,20,58,16,28,9,5,27,39,3,29,19,36,52,5,21,54,12,63,16,28,9,5,3,1,0,22,38,43,28,23,35,23,21,3,36,111,3,37,47,3,1,53,21,16,39,3,45,6,6,27,63,3,32,41,3,27,45,3,1,30,23,25,41,25,3,16,27,3,10,21,3,0,49,12,6,20,24,6,11,11,13,29,25,54,51,59,14,15,7,25,5,44,3,0,43,12,6,11,11,13,42,20,24,6,50,39,56,50,12,13,5,3,0,35,6,6,11,11,13,29,25,52,64,69,12,11,7,25,5,3,23,11,11,13,49,63,57,39,15,9,31,27,54,47,27,7,7,3,1,41,52,1,30,68,1,31,73,1,31,31,1,0,5,17,23,23,24,20,0,34,17,21,3,16,28,3,10,22,3,18,47,3,18,51,3,18,51,3,19,52,3,15,48,3,1,46,71,1,0,36,0,49,22,48,21,25,12,41,19,13,9,5,3,0,23,64,3,41,44,56,52,42,36,5,17,3,31,39,49,3,0,24,35,18,18,5,17,3,0,41,37,33,40,33,11,7,41,5,3,0,24,76,3,27,94,3,27,57,54,3,22,53,3,0,30,66,41,34,7,3,0,21,49,3,0,47,25,16,6,9,40,32,26,9,62,37,30,57,16,15,58,24,25,19,10,7,14,13,20,22,23,23,8,21,35,28,41,16,21,16,23,25,19,10,7,34,16,33,22,24,24,19,10,7,18,5,3,56,43,11,25,21,20,27,28,109,20,23,5,37,54,30,9,5,33,41,26,9,5,32,49,25,9,5,40,45,5,3,0,27,55,3,0,23,39,3,0,26,24,3,0,34,127,3,25,94,3,26,42,3,24,40,3,69,40,27,60,41,0,38,29,32,48,50,40,54,42,50,52,60,18,36,56,0,34,28,36,38,48,6,3,24,27,24,32,5,36,37,3,50,11,19,28,33,63,5,3,1,0,24,17,35,31,30,38,3,1,0,12,33,19,21,17,39,71,79,3,1,37,1,39,68,35,60,26,95,33,7,5,19,4,1,33,31,1,32,9,9,10,8,8,10,10,8,11,46,21,23,19,19,23,23,21,31,44,3,16,1,35,9,9,10,8,8,10,9,11,31,34,3,46,21,23,19,19,23,31,26,10,25,3,28,16,1,36,15,65,3,20,42,3,0,25,44,3,0,26,67,3,0,36,21,28,26,58,62,16,3,38,32,30,60,3,61,28,26,58,3,0,50,58,3,1,0,178,0,41,110,199,24,16,58,81,102,81,37,15,12,147,29,15,12,132,34,12,194,29,20,12,144,44,12,130,45,13,15,16,140,44,13,14,101,45,13,14,145,27,13,15,14,168,36,13,14,106,47,12,129,72,106,208,100,101,67,129,133,90,79,36,93,6,40,5,72,60,89,132,72,85,75,141,92,108,28,16,52,89,94,91,83,105,167,34,26,14,103,107,55,3,0,38,248,1,34,68,1,37,57,1,27,30,28,22,31,2,0,32,19,19,41,59,3,24,1,51,0,68,24,19,32,3,21,28,3,22,77,3,22,51,3,26,53,42,31,7,5,40,3,23,40,60,55,33,43,35,14,50,7,5,37,3,33,40,29,27,38,34,16,3,24,34,42,16,31,56,65,21,9,5,23,43,22,56,12,56,5,3,42,40,29,20,20,25,25,36,44,12,34,36,27,46,7,5,29,3,31,16,43,49,3,34,16,48,38,43,25,73,12,37,5,20,51,33,29,30,20,88,87,73,30,21,82,52,3,40,25,46,32,49,32,49,41,27,56,14,27,54,42,13,9,49,7,40,50,40,51,40,50,32,72,12,30,5,3,34,16,60,70,21,52,3,32,34,26,38,12,39,5,50,36,19,28,38,27,20,57,70,42,13,9,36,14,83,57,7,26,5,22,19,48,20,32,33,40,34,61,27,13,9,20,63,30,64,27,13,9,28,61,27,13,9,26,31,7,7,35,50,3,57,20,23,45,67,14,48,25,7,26,63,12,114,39,67,34,39,46,11,7,27,23,23,31,67,29,65,34,22,31,31,31,44,53,42,31,33,9,42,20,7,5,28,3,39,16,31,57,21,57,3,35,16,51,39,20,3,36,16,58,40,20,3,35,16,37,53,3,0,48,65,100,25,69,12,33,5,22,25,21,23,10,60,41,5,33,18,10,59,29,5,33,18,10,63,29,5,42,27,24,25,26,25,7,3,31,34,54,25,71,12,33,5,53,3,28,37,57,3,28,23,59,31,9,5,3,50,41,97,19,24,7,3,55,79,41,3,0,28,62,74,25,69,12,33,5,51,21,46,3,38,31,61,74,25,69,12,33,5,0,26,25,57,5,25,19,56,5,21,47,3,0,50,45,34,46,60,27,29,38,25,19,42,12,27,56,26,11,7,5,50,3,39,40,34,21,29,0,44,18,12,24,5,32,8,73,38,34,31,7,28,24,7,30,20,34,61,3,41,34,40,21,29,20,64,42,29,45,28,24,7,5,58,20,34,63,3,50,34,40,21,29,20,29,68,28,24,7,5,20,34,63,3,28,34,31,22,23,10,60,29,5,42,25,24,25,24,25,7,60,3,32,99,3,56,27,0,39,50,49,12,21,38,5,19,49,29,54,3,51,27,48,19,19,43,25,28,87,12,26,25,29,7,51,5,59,3,38,21,21,31,21,25,69,5,20,25,56,28,28,24,7,5,48,63,28,24,7,5,23,57,5,20,54,59,3,51,39,27,62,59,3,23,16,15,16,15,16,6,40,29,39,34,30,28,33,17,14,24,38,21,19,19,12,21,19,20,5,28,35,27,31,33,36,49,43,61,22,46,30,9,7,50,43,0,61,22,26,9,7,48,24,36,41,9,26,25,48,11,93,16,93,9,52,36,41,9,23,46,9,92,14,26,62,45,59,36,24,11,9,169,37,25,55,16,51,9,7,37,64,66,29,11,7,5,26,0,22,34,5,67,34,15,3,105,23,96,27,27,57,42,13,35,53,42,13,9,23,50,24,13,9,20,7,25,53,40,11,7,34,39,7,21,47,22,11,7,43,63,12,51,29,41,23,27,45,27,36,41,9,23,46,9,89,47,49,9,81,63,31,13,9,14,47,28,27,26,9,53,33,7,31,57,5,3,0,41,55,80,30,121,31,9,5,32,91,20,9,5,57,49,20,9,5,3,29,77,24,5,3,50,18,80,62,26,47,33,58,63,5,16,3,38,44,31,66,25,71,5,58,3,25,34,20,48,57,3,24,34,20,19,60,44,31,22,5,19,56,3,37,20,25,30,34,32,42,43,29,53,18,11,7,42,25,24,21,60,20,13,9,7,55,12,44,5,21,29,41,54,3,44,50,21,26,31,54,3,44,20,21,25,52,24,28,24,7,5,48,58,28,24,7,5,23,52,5,12,13,11,11,6,3,49,22,17,58,18,21,62,19,60,19,60,20,61,20,61,20,61,14,41,55,5,3,0,26,41,34,12,13,30,64,30,13,41,29,28,28,28,28,11,13,41,29,27,28,28,29,11,13,46,41,62,20,14,71,24,49,33,29,30,24,24,47,63,14,20,0,49,69,48,57,18,33,11,9,28,48,38,64,0,117,28,24,18,25,11,9,19,98,16,51,9,33,29,30,24,24,47,35,63,15,82,14,14,36,20,69,14,39,22,32,99,11,32,99,11,69,35,13,9,32,15,82,15,82,14,20,59,14,20,66,14,20,59,14,20,61,14,42,14,46,56,22,53,56,39,49,11,88,9,5,28,3,26,41,43,42,77,46,36,72,21,39,32,20,60,14,31,46,23,40,35,33,45,16,33,37,9,7,5,16,3,25,34,23,55,61,12,41,5,3,40,45,57,53,69,23,23,45,33,61,5,17,3,31,34,17,59,24,26,65,5,96,3,24,34,17,50,24,26,56,5,89,3,19,40,29,43,34,16,3,42,62,43,42,55,12,34,5,3,29,34,58,51,3,62,105,25,60,35,5,17,3,29,57,72,27,3,23,24,25,34,37,31,14,32,7,18,51,5,20,3,0,66,30,110,5,58,3,60,25,40,31,68,101,5,66,3,0,29,54,41,55,38,20,45,7,67,36,18,49,5,49,72,29,5,16,3,0,52,37,36,121,45,9,54,40,47,42,47,44,55,9,7,5,66,3,0,34,11,10,19,94,37,5,48,3,30,11,10,19,94,36,5,44,3,34,60,36,18,49,5,48,3,57,37,44,46,26,22,22,22,61,20,7,5,20,37,51,44,9,17,12,45,68,39,47,31,27,41,50,43,9,10,21,16,50,68,7,39,58,28,11,7,41,27,39,41,10,21,16,50,7,5,51,45,20,21,33,116,58,3,35,64,54,35,47,12,17,12,6,3,0,50,25,22,32,31,52,54,43,16,28,9,30,57,36,35,7,5,26,63,26,5,97,3,31,20,26,100,51,41,22,3,49,15,74,66,23,49,12,23,5,18,3,34,48,23,27,34,5,25,54,37,67,65,5,16,3,33,250,13,5,40,3,33,53,89,51,5,16,3,32,33,31,47,18,26,59,36,20,14,56,7,40,31,47,18,62,40,31,47,18,54,67,32,47,18,60,12,48,5,3,23,47,65,31,18,18,18,5,17,3,44,11,14,19,72,53,32,5,24,3,47,54,25,69,5,3,46,11,14,19,33,66,15,7,28,5,53,25,126,52,22,11,32,61,26,11,7,5,3,20,59,3,18,35,33,0,55,44,37,32,9,5,36,3,0,26,59,39,33,67,53,50,24,36,7,34,88,26,33,12,42,5,3,33,45,59,12,49,5,3,37,100,54,5,36,3,0,55,47,31,73,53,7,5,62,3,0,51,47,22,31,174,50,33,11,7,5,20,3,69,89,0,61,43,5,16,3,47,94,3,0,28,25,59,5,42,3,35,25,59,5,49,3,0,19,51,3,0,21,53,3,34,67,3,0,94,26,49,5,27,25,71,5,101,41,35,61,61,20,11,7,15,58,26,41,61,61,20,11,7,5,3,67,26,49,5,27,25,71,5,74,3,0,25,32,44,76,5,33,18,47,10,38,59,29,75,16,37,9,67,29,5,3,35,42,61,28,30,61,58,19,11,43,58,19,11,7,5,3,41,45,3,0,103,24,47,5,25,23,0,40,64,45,5,125,0,25,63,5,18,3,39,23,40,50,19,11,7,36,58,19,11,7,28,5,25,60,41,58,17,9,5,52,49,17,9,5,33,17,3,37,57,115,52,31,9,5,16,3,34,35,50,5,49,3,31,38,53,60,40,9,5,3,52,120,70,3,0,42,30,20,25,22,40,20,5,15,34,13,12,13,0,43,39,7,68,20,31,7,5,56,3,0,71,18,16,42,33,43,39,35,48,37,7,5,26,69,50,87,38,49,52,14,40,36,49,7,12,86,56,49,14,31,58,26,40,13,9,40,36,7,35,49,14,25,62,7,5,63,54,66,21,9,5,54,84,5,69,84,5,68,3,22,30,14,42,14,40,5,3,0,45,27,61,69,5,52,3,0,26,33,25,62,37,5,3,0,49,25,66,43,55,60,5,63,3,0,27,59,3,0,57,13,21,12,71,33,100,0,38,0,13,15,21,57,79,22,7,5,63,23,42,25,44,34,66,93,85,66,24,11,0,116,0,73,61,45,62,31,16,33,23,90,45,33,84,32,15,11,28,9,0,37,7,0,48,35,24,7,28,37,31,7,65,42,0,70,26,9,5,71,3,0,20,25,42,68,45,42,33,70,62,57,47,24,9,37,0,54,0,107,5,34,3,28,60,3,44,74,27,12,53,5,3,81,93,13,5,0,50,54,53,28,11,7,5,88,3,50,121,3,44,117,18,46,25,69,53,87,39,111,0,60,96,59,23,37,26,7,24,38,27,7,40,5,58,3,59,55,48,20,35,20,7,18,46,25,70,22,68,27,51,71,46,25,42,81,24,71,49,32,9,83,9,24,56,27,7,5,73,3,24,31,21,52,92,5,31,3,47,44,35,39,61,3,31,59,66,40,26,23,13,5,38,3,28,59,39,26,13,5,35,3,32,56,36,54,36,9,5,20,3,22,67,38,56,33,11,7,38,49,24,38,41,7,13,5,76,3,21,11,9,19,38,28,62,34,5,71,75,35,43,5,0,117,44,5,0,35,39,5,0,17,3,30,57,21,52,36,9,5,3,0,49,13,14,6,60,14,17,14,7,3,59,262,13,21,3,48,13,14,6,59,14,15,16,7,3,60,12,6,70,15,14,7,3,24,41,60,30,15,9,69,28,20,29,37,28,14,11,18,28,25,12,9,15,9,68,28,20,29,37,28,14,11,18,28,25,12,9,14,14,9,67,28,20,30,37,28,14,11,18,28,25,12,9,14,16,26,23,10,5,3,23,36,42,61,19,9,6,12,9,10,6,3,65,11,18,16,32,13,5,40,63,5,3,19,13,16,6,32,21,25,24,24,26,6,34,28,25,33,14,7,42,13,11,12,35,33,30,17,7,38,54,17,21,72,18,11,7,38,56,17,21,18,11,7,32,23,17,21,18,8,25,26,23,11,81,41,90,18,11,22,11,80,41,88,18,11,22,11,80,41,88,18,11,23,11,80,11,20,11,35,29,81,22,28,80,22,22,98,13,11,7,27,24,7,5,12,14,23,6,3,63,12,6,42,30,47,32,69,48,73,18,11,7,30,12,46,73,18,11,7,32,5,3,29,12,6,46,46,75,32,16,9,5,11,11,19,16,96,54,32,17,30,9,5,17,3,26,29,33,57,14,7,19,11,14,23,30,15,18,7,47,27,21,33,46,23,56,20,33,45,23,55,20,33,100,18,11,23,55,20,48,23,55,14,9,31,30,27,59,12,36,57,55,55,63,67,27,45,104,22,15,27,59,72,60,79,25,42,17,13,50,27,60,72,60,78,25,42,17,13,49,27,59,18,65,26,22,15,27,11,9,5,3,34,38,17,56,52,3,0,25,39,45,56,50,5,17,3,39,71,3,3,0,18,18,17,11,17,10,10,17,18,17,18,19,16,19,17,16,17,17,18,16,16,16,17,16,19,17,17,18,18,17,19,18,17,17,18,19,19,19,19,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,18,19,19,19,18,17,19,18,18,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,19,19,19,19,18,17,19,18,17,18,18,19,19,17,17,17,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,18,16,20,16,16,16,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,19,18,16,20,16,16,16,18,21,18,16,17,17,19,17,16,16,16,18,18,18,18,18,18,18,18,19,19,17,19,19,18,18,19,19,18,18,17,18,19,17,18,20,17,17,17,17,17,18,17,17,17,17,17,19,17,18,18,18,17,18,15,17,16,18,19,18,17,18,16,16,15,16,16,16,19,16,17,18,15,18,15,15,16,16,17,17,17,18,19,17,17,18,18,19,19,17,17,16,19,18,19,17,2,0,39,83,30,18,74,78,139,21,15,14,103,88,55,130,3,0,29,103,1,0,38,40,23,3,44,58,3,46,91,3,0,62,1,66,0,18,17,36,14,42,60,33,11,7,55,19,16,17,52,61,31,43,13,46,11,62,44,16,62,38,38,16,16,17,0,16,30,64,45,40,18,29,11,7,5,3,33,53,12,21,68,23,42,12,36,5,25,42,15,3,24,17,38,14,42,53,33,11,7,55,30,22,60,36,36,33,60,42,36,14,25,7,5,58,38,3,19,38,53,23,21,56,19,25,7,70,77,25,47,7,12,20,23,115,25,7,17,64,38,25,21,24,9,7,5,0,30,15,3,0,17,11,33,8,51,48,74,3,0,24,34,26,35,49,50,12,24,5,16,50,3,0,28,41,43,35,44,26,42,54,3,0,25,41,45,44,18,5,26,49,28,51,61,5,16,3,0,28,13,30,13,32,37,20,68,60,50,20,13,9,20,15,15,36,14,57,33,11,5,3,0,29,60,78,3,0,29,16,45,34,41,19,51,3,0,54,24,55,12,48,35,5,37,41,19,59,3,0,23,34,24,35,18,22,53,36,43,21,57,5,46,69,49,3,0,38,44,24,57,5,43,54,3,41,26,49,48,5,33,36,21,54,3,0,38,44,24,57,5,43,21,54,3,0,31,44,24,67,30,38,26,34,19,43,24,31,71,29,13,60,18,19,48,18,17,13,44,43,26,35,62,22,84,15,20,13,18,36,9,7,97,57,28,11,77,56,29,66,11,78,100,58,31,68,13,9,7,5,37,44,44,12,43,43,5,29,25,64,31,9,5,115,3,0,21,41,16,44,3,26,11,13,19,45,3,0,38,26,60,33,36,80,29,36,12,54,5,3,15,41,53,3,26,38,35,33,5,63,36,34,7,24,25,37,7,69,40,7,5,107,23,35,5,40,3,27,11,14,10,19,42,42,44,30,33,30,46,76,22,85,14,38,45,7,12,71,5,3,3,0,37,24,19,27,27,32,29,40,3,1,0,51,24,19,27,3,22,38,0,38,3,16,35,40,5,23,3,10,31,35,30,5,17,3,32,41,47,18,5,34,41,56,7,5,17,3,39,45,39,52,18,30,11,7,64,13,5,38,50,43,41,13,5,46,39,45,70,45,7,28,5,64,75,64,3,49,32,45,67,52,36,7,18,5,68,36,49,14,21,7,5,64,18,5,63,3,24,11,10,11,37,39,40,39,78,5,31,3,1,0,89,21,18,46,3,11,1,20,11,35,3,1,45,37,14,94,36,16,95,99,78,82,77,79,180,94,21,8,51,87,96,33,4,12,47,23,12,45,29,9,43,60,62,100,73,94,27,13,85,85,36,12,82,83,88,81,93,33,12,65,36,12,68,45,12,106,27,20,92,214,85,86,95,98,127,86,134,102,85,36,12,82,114,139,125,95,84,91,45,21,123,81,145,125,142,142,103,101,69,79,87,104,39,8,104,3,0,37,18,15,28,19,32,18,31,17,30,18,31,18,31,18,31,18,31,21,34,19,32,12,23,3,1,39,85,1,44,49,1,80,21,34,3,20,46,3,30,164,3,34,16,43,3,0,68,72,23,5,38,52,76,25,7,74,24,7,5,21,3,0,20,13,21,24,34,56,6,60,51,52,18,43,11,7,6,57,87,52,18,33,11,7,6,14,13,16,21,156,27,41,37,63,25,20,13,16,65,63,65,44,9,53,33,50,25,20,13,9,34,54,14,61,50,25,20,13,16,65,65,67,67,66,65,9,34,7,82,35,23,18,11,7,5,3,28,19,25,25,29,35,29,31,29,39,30,5,35,3,35,22,44,34,5,18,3,65,99,3,0,86,22,30,14,42,14,7,28,37,28,25,7,27,25,51,17,7,42,14,7,26,24,7,23,5,30,51,5,18,3,90,26,20,23,14,24,7,5,86,18,21,12,22,5,18,3,23,34,20,20,27,58,31,9,5,0,42,20,23,48,5,25,56,5,49,3,48,58,26,48,25,60,56,5,18,3,26,34,45,58,56,5,52,3,33,16,43,29,60,25,52,3,25,34,16,47,3,22,34,20,25,47,12,47,5,58,56,5,48,3,31,27,21,38,109,60,7,3,0,30,27,21,27,41,69,7,3,79,34,25,48,50,47,52,3,44,25,56,5,3,41,34,44,18,12,24,5,33,15,6,72,92,35,48,16,9,5,43,70,5,63,3,0,43,51,0,35,43,63,20,65,30,88,41,88,5,3,36,58,147,64,22,28,11,7,21,7,3,32,52,22,5,3,38,35,38,39,3,37,16,45,18,28,5,17,3,34,96,23,5,19,38,53,30,0,19,27,49,41,38,53,3,52,43,25,43,21,57,18,11,7,29,42,62,38,11,7,39,40,37,45,34,43,45,40,13,55,68,42,15,11,9,41,45,45,40,13,16,54,49,68,42,15,11,80,72,42,15,11,54,68,42,15,11,9,36,63,37,13,9,14,31,7,58,12,31,45,51,47,40,62,5,3,23,34,43,77,5,25,34,18,45,84,14,52,66,7,5,27,21,37,106,7,52,14,17,5,34,150,32,36,5,72,3,24,34,51,50,3,30,19,87,19,19,3,27,16,23,36,5,33,18,5,25,19,5,16,33,19,5,16,26,3,32,34,48,53,52,3,23,34,19,25,39,18,33,41,27,5,19,59,71,19,25,39,18,22,30,27,5,48,21,19,49,3,22,34,125,0,36,31,46,27,13,12,22,146,57,25,11,7,136,0,27,34,49,37,7,59,100,42,63,25,11,7,7,48,3,29,0,11,14,19,30,34,34,33,18,53,38,107,42,14,54,18,11,33,7,51,64,26,58,45,65,5,15,50,37,53,5,16,3,30,34,20,45,20,56,3,52,34,39,33,32,18,5,0,80,39,3,28,34,27,32,17,17,17,16,16,39,16,34,7,9,50,3,32,34,46,50,3,31,53,45,3,40,51,66,56,12,25,5,3,25,30,15,15,15,14,14,45,14,39,40,45,65,36,11,48,56,9,14,14,57,14,39,14,40,13,126,13,39,14,47,14,14,49,14,9,17,16,25,70,131,76,44,26,53,13,47,11,9,5,28,3,30,42,58,26,48,32,23,52,14,48,31,44,23,60,7,5,16,3,25,34,38,16,29,61,34,44,12,5,51,3,42,39,25,25,15,14,49,18,11,5,3,22,34,31,43,57,91,75,48,3,35,23,92,76,26,7,5,3,33,93,185,3,72,34,50,21,8,41,33,52,22,5,23,39,3,37,118,3,30,115,3,29,25,18,5,100,3,26,63,18,18,5,24,13,14,21,47,11,38,52,25,21,7,5,24,18,13,14,21,47,11,44,52,26,21,7,5,17,3,42,16,43,18,5,38,81,20,7,27,20,29,22,9,7,5,17,3,53,32,33,31,36,85,38,74,54,49,30,37,71,16,67,43,9,45,54,7,121,35,23,54,9,0,52,31,35,68,54,7,0,53,49,33,29,66,52,7,3,45,86,3,30,69,3,20,39,3,32,38,66,18,16,5,3,33,34,19,5,47,16,65,19,5,22,53,39,31,9,5,16,3,64,25,36,44,7,50,3,0,17,30,50,104,18,5,44,26,104,20,84,20,85,54,3,36,66,3,31,41,69,5,25,72,55,78,5,43,3,26,73,50,31,9,5,34,47,18,79,7,20,45,52,3,32,49,84,36,49,27,58,7,68,7,32,52,29,13,9,5,25,3,54,50,31,48,45,39,55,12,21,49,31,9,5,95,23,59,5,34,72,57,59,3,37,37,48,47,97,22,67,38,20,59,7,32,7,21,59,3,21,42,41,9,18,15,38,5,3,0,16,40,29,9,18,15,36,5,3,43,94,56,9,18,15,90,5,3,40,94,57,9,18,15,90,5,3,29,71,3,32,60,3,25,53,3,25,32,11,32,7,3,23,34,104,23,57,5,49,3,49,44,48,31,37,82,19,95,19,54,3,24,34,34,19,74,22,50,3,61,37,18,55,5,23,37,60,24,12,40,34,44,28,24,5,56,3,49,33,25,39,33,59,12,24,5,24,40,34,44,28,24,12,23,5,56,3,50,38,37,56,20,58,93,53,27,9,5,43,21,62,3,33,69,3,28,118,3,36,34,31,20,27,30,5,44,20,62,3,0,18,37,20,23,15,3,25,41,20,57,52,23,3,17,37,23,51,20,12,25,23,5,3,27,34,13,5,36,13,32,21,19,5,0,42,29,28,64,7,29,28,50,7,30,50,23,11,7,30,66,7,49,69,30,78,9,0,24,50,22,23,11,7,30,63,23,11,34,7,41,75,7,7,3,0,33,83,3,54,24,21,9,59,28,39,31,11,16,9,20,28,44,38,27,28,24,47,28,32,61,9,14,14,75,5,3,0,53,20,22,105,67,9,14,20,47,32,70,58,66,11,9,14,23,85,64,9,14,18,85,56,9,14,5,3,31,15,53,18,18,5,36,3,49,26,23,5,72,45,47,46,57,38,71,22,18,7,66,15,23,5,55,3,0,38,34,23,5,39,3,26,34,37,30,22,97,8,35,47,16,9,5,20,65,3,26,54,3,0,30,50,44,3,55,41,22,25,25,39,26,29,17,84,9,45,35,35,80,58,22,11,7,5,42,44,61,48,44,30,35,7,58,43,43,74,63,16,11,7,25,56,5,28,35,5,15,3,27,123,3,60,25,70,5,168,68,49,5,78,61,16,9,25,78,7,5,66,3,37,32,53,12,46,5,3,37,27,75,55,33,11,7,7,3,28,15,46,20,3,69,89,42,53,5,16,3,50,58,44,18,59,42,71,5,31,60,20,26,20,7,56,18,5,0,43,31,52,58,82,29,32,11,9,70,35,48,58,17,9,47,84,48,24,9,39,50,29,72,0,58,46,42,43,11,76,9,42,12,27,27,98,17,9,48,31,44,66,9,33,50,7,19,131,82,35,13,9,22,7,5,64,3,24,22,31,11,12,13,130,50,38,5,3,44,20,150,50,29,49,20,29,28,50,38,30,15,11,45,9,34,9,86,26,30,35,5,58,3,63,39,72,5,3,31,38,53,58,40,9,5,3,0,28,21,30,80,35,35,26,26,26,33,20,33,7,68,57,7,5,47,0,43,39,65,67,22,9,5,22,3,33,25,18,70,33,20,14,34,7,61,30,26,50,23,59,40,24,33,39,23,67,12,66,20,33,14,34,7,49,5,3,21,66,3,34,33,35,18,26,46,5,0,26,72,32,5,48,3,66,11,22,19,105,46,16,9,10,36,26,0,52,68,18,11,250,98,18,11,7,5,23,3,44,63,36,22,48,19,9,5,33,59,5,33,72,32,5,58,3,25,68,3,41,39,41,49,7,32,7,3,29,70,3,46,114,27,23,34,41,42,69,7,52,43,20,20,57,62,40,13,9,55,14,85,7,6,25,64,12,41,5,3,68,54,14,31,28,56,20,11,7,33,61,21,40,11,7,27,55,20,11,7,28,56,20,11,7,13,5,57,62,18,9,5,26,33,52,20,11,7,5,0,75,3,46,34,47,50,51,24,9,5,49,50,24,9,5,3,0,52,45,72,74,3,0,34,49,48,3,0,57,64,73,5,79,23,25,76,7,18,5,52,23,3,0,34,48,23,27,34,5,25,54,37,65,67,5,16,3,32,65,78,5,0,41,46,88,68,31,9,5,60,113,34,118,31,5,20,53,33,5,23,3,45,16,65,13,5,99,96,61,3,38,25,25,29,32,29,7,5,49,41,3,28,44,100,60,31,9,5,42,13,11,15,59,32,122,9,5,42,3,35,24,54,16,9,5,0,29,59,17,36,9,5,44,49,3,36,44,24,53,16,9,5,50,3,94,59,42,57,26,9,5,0,11,22,10,15,56,44,19,12,9,5,63,101,3,67,59,63,74,3,48,48,69,55,3,25,32,64,73,5,34,65,5,3,103,59,61,117,3,45,59,61,52,3,0,26,33,89,27,5,49,15,36,37,5,3,0,49,25,53,5,63,3,57,69,0,14,12,17,71,33,100,0,38,0,13,15,21,57,79,22,7,5,67,73,5,0,67,23,42,39,52,79,119,16,7,0,104,62,7,43,18,14,0,41,76,24,5,15,37,0,105,48,5,46,33,22,5,21,35,76,24,5,59,38,27,5,63,40,83,137,3,38,20,171,51,16,9,5,3,0,50,51,41,12,66,5,3,20,25,0,45,73,66,26,9,33,27,56,38,7,5,34,3,0,39,23,94,48,19,11,7,28,5,49,42,33,17,3,33,24,34,61,33,20,14,51,5,3,37,24,37,62,14,28,35,33,29,20,105,20,13,16,62,20,13,9,50,14,34,66,58,9,14,40,5,3,52,35,28,35,33,29,37,50,14,14,40,5,3,45,24,28,35,29,33,59,14,14,56,5,3,0,57,21,33,39,40,100,107,100,76,3,22,30,14,42,14,40,5,3,38,43,68,27,62,44,20,7,32,5,52,3,30,94,18,19,12,46,5,3,0,19,51,3,21,71,3,37,57,115,54,31,9,5,16,3,0,26,28,24,36,7,24,36,7,5,40,3,0,18,11,10,19,22,26,26,29,26,26,5,3,15,11,10,19,22,26,27,16,5,16,3,55,47,31,75,53,7,5,62,3,29,57,72,27,3,28,25,65,5,42,3,27,59,3,29,69,3,41,43,57,47,61,5,55,3,45,70,61,33,71,55,3,27,48,49,15,34,35,5,17,3,26,60,39,9,18,15,56,5,3,45,58,49,9,61,15,54,5,3,48,25,27,86,40,0,42,29,71,18,11,54,7,12,32,5,3,96,118,26,48,42,20,15,13,19,62,21,124,11,7,5,18,3,30,44,25,3,33,55,3,11,45,41,5,25,3,19,45,41,5,33,3,73,39,75,54,5,30,87,3,88,16,47,83,59,5,35,169,3,80,56,57,37,18,33,33,35,0,32,45,34,48,58,34,29,87,36,16,31,36,9,63,34,85,14,32,27,7,61,30,21,46,37,80,9,14,48,7,5,55,114,15,9,5,33,35,59,56,54,92,5,30,62,5,19,110,5,3,3,44,59,9,13,12,17,130,17,3,62,1,56,52,59,40,62,1,0,56,51,53,3,0,84,34,26,36,18,27,0,46,27,23,56,5,3,41,76,37,0,68,3,0,26,74,35,5,40,3,0,38,91,3,28,81,3,63,29,72,5,3,0,22,72,3,47,87,3,29,84,36,12,38,5,3,0,38,51,18,5,0,39,33,18,5,17,3,38,64,45,3,0,40,80,56,5,25,24,62,18,67,55,5,21,26,53,3,71,128,3,30,83,3,45,70,16,40,60,22,63,30,46,23,69,43,14,65,33,11,7,12,55,5,32,105,39,3,33,60,65,52,27,25,76,61,5,0,43,39,37,77,47,3,30,25,41,52,93,22,9,7,5,44,3,42,56,18,5,56,3,21,11,16,13,50,42,52,5,28,33,3,21,60,53,25,52,73,23,56,5,0,56,34,79,23,69,0,64,5,30,43,21,54,3,23,0,79,3,0,19,60,53,36,9,5,3,3,0,76,22,25,54,36,18,47,48,61,50,29,28,9,7,43,5,3,0,38,79,3,3,0,45,117,52,59,28,32,58,12,44,40,21,7,39,58,23,9,7,18,5,5,1,49,41,32,32,12,29,5,5,61,29,3,14,1,66,49,54,35,41,50,89,5,100,88,69,5,100,88,69,5,3,71,67,3,80,76,3,47,78,49,76,116,5,69,24,8,30,47,84,7,46,83,7,84,47,69,151,7,52,162,7,59,144,5,3,47,5,51,89,7,106,63,186,7,5,3,214,157,3,89,124,43,16,3,1,0,22,9,6,7,13,14,14,2,51,0,24,23,28,17,15,35,36,37,33,32,14,19,16,16,40,23,21,2,0,27,21,50,79,3,17,1,0,87,47,105,2,36,0,37,34,34,117,58,18,50,104,20,13,63,61,20,13,9,14,59,18,11,7,5,24,24,27,26,31,25,14,30,36,94,27,42,36,69,126,50,45,15,11,9,14,28,9,17,16,17,19,40,86,11,42,16,9,27,9,159,9,29,35,130,14,34,36,52,33,13,9,40,29,44,14,37,48,14,5,3,0,57,39,116,20,9,47,32,32,45,36,20,46,18,11,7,12,37,5,3,0,55,36,36,30,25,41,33,33,46,38,14,38,7,39,22,48,19,13,38,48,32,13,9,7,5,3,33,24,24,27,26,31,25,20,30,9,50,53,124,13,9,28,45,27,48,29,94,34,37,37,50,30,38,26,14,21,5,3,0,28,24,20,3,55,57,34,70,49,7,5,3,0,36,34,16,81,50,3,0,22,34,16,44,48,3,0,22,30,13,9,40,22,61,55,9,13,45,5,0,34,3,0,70,20,21,30,18,22,14,24,7,41,24,35,14,34,78,55,29,16,9,14,30,61,60,35,13,9,32,49,9,76,7,5,16,3,0,34,16,43,34,48,3,0,26,34,11,11,14,19,22,49,30,58,65,41,12,35,5,24,77,3,0,55,42,44,61,28,35,5,15,3,0,39,17,3,0,37,25,80,68,35,44,21,48,54,3,19,28,12,19,32,30,30,44,31,33,6,10,3,0,25,17,24,25,30,63,36,6,26,33,0,48,38,34,58,24,11,7,13,5,43,93,13,12,21,25,37,40,26,13,16,33,9,7,13,5,222,34,29,99,35,23,58,35,33,13,29,9,9,13,5,129,172,0,53,18,31,27,18,23,35,28,61,11,7,5,3,118,142,38,48,13,32,11,14,55,13,30,11,7,5,48,46,10,9,5,37,54,5,3,50,75,3,45,24,37,66,14,24,30,14,29,30,32,14,57,18,11,5,3,30,26,19,5,105,29,7,16,3,1,0,43,0,61,86,21,13,5,25,66,31,21,42,17,11,15,7,26,34,60,63,11,16,45,19,13,9,7,27,5,3,48,86,3,0,19,30,21,40,27,24,5,37,40,36,30,32,5,16,3,0,52,21,85,5,80,3,0,44,41,60,25,46,32,28,74,7,46,57,5,16,3,0,67,96,3,0,64,93,3,0,64,25,165,3,0,57,41,33,36,37,29,59,9,20,7,5,28,30,34,12,51,33,5,11,10,19,49,53,5,63,25,55,5,45,46,40,31,27,38,25,42,115,52,9,0,123,56,9,0,113,62,51,9,14,25,7,18,43,28,57,9,18,37,60,5,16,3,0,46,41,57,56,60,18,5,70,3,34,24,23,46,23,55,22,47,60,5,16,3,49,97,3,0,37,41,57,68,60,18,5,48,3,0,44,35,0,48,95,48,19,31,11,7,60,5,31,75,45,27,24,48,54,24,11,64,9,52,25,41,47,35,23,45,9,20,62,29,14,66,71,37,15,11,9,57,115,39,87,62,35,13,9,69,7,5,16,3,0,34,41,17,14,71,22,55,46,15,23,55,70,60,41,19,15,107,15,24,62,56,15,9,0,14,55,5,3,0,38,41,118,3,23,20,11,14,19,41,72,15,0,100,50,21,23,9,5,56,42,20,9,5,16,3,36,25,61,25,9,5,3,0,50,41,42,43,18,45,59,18,5,34,34,41,39,25,27,46,7,38,18,55,60,42,34,40,43,20,13,56,49,20,13,9,7,20,24,48,9,56,7,5,34,39,18,13,12,21,138,51,60,22,11,41,7,5,16,3,0,50,17,40,53,69,9,18,5,41,61,76,75,46,39,26,27,18,28,60,9,5,16,3,0,44,41,57,57,60,18,5,48,3,44,19,33,55,17,6,8,65,0,36,26,16,3,0,50,11,10,19,34,60,39,71,5,25,22,55,26,20,7,50,18,5,37,83,12,35,49,75,14,26,20,7,5,3,0,58,44,23,29,19,45,21,33,34,46,22,11,7,76,46,12,49,5,36,31,63,12,55,5,3,0,45,44,23,16,41,22,92,3,0,68,72,35,45,16,0,44,23,11,22,25,14,26,55,51,5,30,31,5,19,61,12,107,33,5,76,71,24,58,47,34,102,12,28,62,36,7,47,5,66,24,3,52,67,3,0,56,44,20,42,36,53,20,9,5,61,3,30,142,78,3,40,40,40,9,52,50,11,9,7,69,44,19,108,11,14,43,45,57,21,15,11,9,7,5,89,3,107,20,21,80,50,30,18,22,14,24,32,108,64,44,15,11,29,59,11,22,16,9,7,86,5,74,16,3,27,56,3,49,20,49,20,134,29,49,5,39,59,5,16,3,0,21,41,70,3,0,38,13,26,11,10,19,19,14,33,14,32,20,29,52,9,30,48,42,13,9,47,14,32,20,55,14,9,55,9,14,14,9,28,59,9,15,58,15,57,15,58,15,57,14,39,14,46,14,47,14,9,78,69,9,13,13,9,81,9,13,9,74,9,13,13,9,82,9,13,9,76,9,14,50,14,44,14,94,14,42,14,14,41,0,14,9,34,22,29,62,51,59,18,54,24,15,11,9,15,9,50,36,44,13,41,9,14,9,65,9,14,9,65,9,14,14,9,50,9,14,14,14,9,84,29,58,18,36,11,9,14,9,76,47,31,64,18,18,36,11,9,14,38,108,48,11,78,53,44,82,19,18,27,30,57,26,81,49,52,83,22,26,15,37,57,66,13,11,75,24,84,11,20,16,34,9,5,3,0,70,78,23,39,41,23,23,80,52,12,30,5,3,0,37,34,41,38,0,16,0,78,3,0,65,82,0,83,23,60,19,66,34,22,11,7,0,36,45,12,59,21,40,9,5,3,0,70,27,18,9,54,49,14,9,19,32,14,61,22,11,5,3,0,38,71,44,26,39,52,36,9,5,20,57,3,0,26,39,18,46,5,25,16,40,27,18,40,36,28,12,36,5,34,49,3,0,16,34,16,98,42,16,9,81,42,16,9,5,63,43,16,9,5,42,3,22,34,32,60,34,16,46,48,3,33,34,0,16,0,52,81,18,28,42,51,26,7,56,5,36,3,47,21,47,47,61,50,26,26,43,9,5,49,3,0,33,75,16,0,33,27,52,16,11,7,36,5,52,3,41,43,77,23,16,39,3,29,34,54,3,29,53,3,30,54,3,29,53,3,30,54,3,29,65,33,29,16,3,30,34,23,16,51,3,22,34,16,48,3,0,50,41,12,16,52,72,80,45,50,46,24,55,21,23,30,29,18,22,14,127,29,54,16,9,7,27,55,45,88,44,16,9,14,94,7,5,49,20,66,74,47,100,58,47,34,60,23,5,32,27,50,5,70,56,58,46,30,44,33,49,46,12,24,5,41,9,3,41,55,55,62,95,24,5,55,44,71,3,0,28,38,3,20,23,18,5,3,22,13,16,3,25,34,16,25,76,18,68,66,48,22,11,7,22,5,31,3,0,18,30,23,42,34,28,12,26,5,50,3,24,41,40,53,23,9,51,48,36,9,30,48,31,9,5,3,0,34,11,12,15,10,11,19,32,79,25,22,58,89,11,7,5,34,39,36,18,72,63,6,23,16,66,109,24,3,0,27,34,26,53,27,26,62,38,69,5,52,3,0,31,34,3,0,68,19,42,5,80,50,41,21,34,25,16,32,18,22,14,24,32,43,16,16,9,7,15,22,43,14,65,71,7,86,50,18,11,7,0,27,47,7,0,33,5,16,74,34,20,29,26,32,5,39,3,37,66,79,3,0,34,129,3,0,48,24,25,41,57,33,11,7,0,30,47,7,5,34,24,27,17,25,47,32,5,28,35,22,5,24,30,37,5,35,47,47,66,78,31,65,23,52,35,37,7,51,26,52,28,29,29,50,41,25,13,22,9,37,7,5,112,3,45,41,3,0,40,25,3,0,35,16,70,61,39,89,18,9,5,125,49,18,9,5,3,0,72,21,49,56,49,26,5,51,39,27,25,88,5,3,0,71,27,23,127,53,5,59,77,22,81,34,55,42,64,72,11,16,58,34,13,9,81,14,47,7,28,53,5,3,103,167,33,16,3,0,48,22,27,48,21,12,13,13,13,21,14,45,41,14,23,19,50,18,19,49,18,19,49,18,19,50,18,19,13,56,48,65,68,17,22,59,35,19,15,44,20,13,18,36,9,7,21,25,30,7,5,20,3,0,31,19,27,25,3,0,104,37,33,41,132,65,51,75,26,22,24,3,0,69,18,42,5,80,50,34,16,76,10,74,82,3,0,65,51,46,49,24,5,32,37,72,17,47,70,5,46,39,26,22,66,60,3,62,59,25,3,60,50,39,3,0,62,59,53,23,42,60,12,42,42,29,0,73,46,33,63,50,59,15,70,24,35,13,9,66,0,134,0,43,73,9,9,28,36,5,32,3,27,38,3,29,56,59,5,16,3,36,46,55,30,30,6,38,29,29,26,21,25,9,5,3,0,71,20,21,30,18,22,14,24,32,29,59,11,22,16,9,7,73,5,16,3,72,12,25,24,44,39,25,11,7,17,32,53,91,32,46,30,58,33,11,7,36,18,57,12,83,5,15,3,0,28,34,51,45,3,32,21,35,47,3,32,13,11,15,10,19,43,30,12,30,5,67,18,27,31,7,12,68,5,16,16,3,63,27,13,5,35,13,5,27,36,51,22,11,15,7,34,36,51,22,11,15,7,37,64,22,11,15,7,60,20,9,38,55,45,22,11,15,7,5,43,44,21,21,9,13,5,123,44,49,21,26,9,5,3,20,45,75,18,5,17,3,0,24,44,97,14,7,23,44,16,9,5,76,36,48,14,38,7,5,32,55,5,52,3,22,50,11,10,19,12,117,36,50,6,3,0,16,34,83,14,7,16,27,24,40,32,32,16,17,15,16,15,15,16,16,33,16,45,7,5,31,29,52,3,0,52,45,23,10,47,59,26,11,7,5,3,54,44,50,34,63,12,50,56,38,66,5,3,33,30,30,81,24,20,14,21,5,3,0,48,25,52,31,9,5,0,56,46,20,9,5,3,0,37,59,31,34,25,6,9,24,15,55,5,3,0,48,45,23,10,61,33,36,27,8,11,26,17,57,7,12,24,5,3,44,60,32,9,24,15,56,5,3,24,48,45,25,45,11,26,17,30,7,5,22,3,27,48,46,27,46,11,26,17,30,7,5,22,3,0,28,46,3,45,65,3,43,103,3,33,41,51,80,49,82,74,15,3,0,27,38,34,16,25,31,5,56,16,0,53,30,9,58,15,21,5,53,3,0,34,10,1,0,19,16,4,17,18,4,25,16,17,24,16,10,2,26,19,23,22,30,25,2,41,53,0,44,43,28,11,10,14,35,7,27,17,16,18,18,15,20,39,74,41,39,23,25,28,32,30,25,40,25,30,21,33,27,14,14,19,9,36,17,16,18,18,15,20,41,79,25,47,36,41,25,27,32,34,37,15,18,36,40,25,27,32,34,37,15,11,81,28,41,80,71,34,41,25,40,23,46,29,15,18,41,80,71,34,41,26,40,23,46,29,15,11,53,39,33,32,36,38,41,24,17,19,9,7,42,5,3,16,1,48,0,32,46,40,30,64,5,41,3,74,36,59,50,104,78,50,13,19,11,7,5,24,22,60,12,119,5,27,3,0,25,27,33,43,32,45,51,79,58,0,48,53,72,47,21,3,31,26,18,5,34,34,16,57,3,11,33,19,5,42,3,38,32,48,55,79,55,23,9,7,18,27,18,12,19,5,3,30,35,3,0,29,39,45,95,3,0,35,39,45,56,3,22,39,59,19,12,54,18,5,3,0,21,199,3,0,28,160,3,64,154,3,0,20,69,3,0,29,26,25,46,5,57,3,44,38,34,77,93,66,0,24,14,60,14,61,14,49,14,48,14,44,14,51,32,34,47,37,15,49,47,37,15,11,9,103,14,49,81,14,43,14,47,14,47,14,46,14,44,15,110,16,9,56,60,57,35,13,39,59,35,13,9,53,14,9,39,18,11,45,51,30,73,82,20,13,11,9,14,9,34,61,37,15,11,9,14,9,40,52,9,14,46,14,45,13,33,14,46,14,9,61,41,37,18,11,9,14,9,71,55,37,15,11,22,0,21,33,44,111,44,13,18,56,261,44,13,11,47,24,9,14,9,39,36,72,39,17,13,24,106,11,9,5,0,39,40,85,56,19,12,67,5,3,33,70,46,16,9,5,3,35,57,106,3,0,63,26,45,69,77,5,21,3,29,26,3,32,26,8,45,29,25,25,26,7,50,49,33,11,7,49,59,31,9,5,22,3,20,62,34,16,39,43,15,27,45,20,38,24,52,51,66,113,67,30,13,9,14,43,30,50,29,32,82,52,18,55,11,32,59,9,66,7,12,51,5,46,3,38,23,46,25,68,44,53,5,16,3,46,16,34,24,12,42,23,5,44,83,3,38,10,52,39,63,72,41,7,5,41,68,47,17,12,9,5,3,32,16,21,54,3,27,20,39,20,15,3,0,31,16,38,0,15,49,27,28,20,45,17,53,3,0,27,16,38,23,58,43,5,34,20,25,29,33,7,39,5,48,84,159,59,40,36,18,42,68,37,39,39,18,11,7,82,52,7,29,33,7,39,5,0,50,55,65,43,18,26,37,18,11,7,10,74,39,18,11,7,5,36,58,36,65,28,13,14,9,9,34,21,12,60,5,27,31,5,37,3,0,63,16,177,3,0,26,16,45,63,10,90,48,3,30,80,40,31,9,5,16,0,34,27,12,45,23,5,52,3,0,30,16,53,34,19,40,34,0,12,43,45,38,52,43,28,20,21,44,16,27,57,44,15,11,28,26,9,24,14,18,61,16,28,9,7,5,22,48,16,28,52,3,29,16,39,44,36,9,5,43,21,51,3,27,42,47,54,27,11,27,8,28,36,7,17,3,27,16,35,24,25,38,18,27,24,52,24,14,28,38,7,0,19,51,37,24,60,5,61,43,43,16,9,5,49,3,0,66,16,62,21,56,3,0,29,16,45,38,0,15,49,27,28,51,3,28,28,37,31,9,5,16,47,0,15,49,27,50,3,29,16,51,3,0,55,44,37,47,19,30,11,7,5,90,61,41,48,48,26,14,14,7,5,28,22,17,38,7,138,28,22,53,3,38,15,27,21,56,3,0,86,34,26,38,5,19,32,36,5,74,32,24,5,51,3,26,131,3,73,32,44,117,3,0,81,40,39,35,30,85,46,42,55,37,82,42,33,11,19,9,34,40,7,22,5,26,57,5,21,28,5,16,3,0,24,21,26,63,26,65,20,0,15,49,27,22,28,49,3,0,35,35,16,18,53,12,36,5,190,49,17,59,9,5,44,37,17,19,30,9,9,5,21,83,20,0,15,49,27,22,28,80,3,0,64,48,21,14,36,34,116,59,102,60,41,33,13,85,60,41,25,13,9,7,69,31,5,16,3,26,39,24,11,34,8,55,7,17,3,0,38,61,3,0,61,76,68,79,56,37,25,31,62,33,11,7,18,28,5,24,48,5,72,46,37,65,25,39,5,42,0,51,106,7,26,22,47,45,5,66,16,3,30,91,3,45,20,63,71,32,3,37,25,0,186,3,0,45,16,0,40,29,53,31,66,87,3,21,61,3,19,26,3,34,86,40,3,0,44,28,19,28,19,6,24,39,24,19,0,51,30,27,38,57,42,15,11,19,9,29,49,19,9,40,0,32,41,65,26,9,56,12,40,28,39,51,22,13,9,7,7,34,16,0,28,50,31,9,5,27,51,3,0,51,43,0,31,28,0,29,30,23,28,74,18,40,26,0,28,21,26,57,18,5,48,17,3,46,44,19,65,15,7,24,54,15,7,5,74,3,68,32,33,30,31,32,32,38,29,49,23,29,44,41,26,75,15,7,54,51,30,11,7,79,13,5,87,38,51,59,52,31,29,22,76,15,7,0,70,36,26,42,0,68,51,19,13,9,79,52,19,13,9,36,48,7,100,40,22,62,14,54,7,82,50,39,34,52,7,29,40,41,54,22,81,14,56,49,32,13,9,87,7,124,50,29,40,47,22,76,14,56,52,32,13,9,82,7,49,85,50,50,0,40,45,73,41,22,62,14,54,7,12,24,5,3,0,33,11,11,11,19,83,42,31,9,5,23,36,57,33,11,7,42,23,17,5,42,3,44,27,69,40,27,32,34,64,26,22,34,64,88,47,18,9,5,3,38,98,48,20,9,5,55,3,45,54,30,113,3,57,39,27,70,50,17,11,7,5,55,30,20,115,5,3,94,127,3,67,106,30,233,54,3,48,98,3,0,31,18,0,35,32,21,57,3,0,28,32,21,50,3,36,32,21,58,3,0,26,48,53,32,70,32,26,22,3,73,45,39,24,61,7,12,39,23,14,51,33,11,7,5,3,0,25,71,3,0,33,61,10,58,60,10,76,10,85,49,35,40,23,61,18,11,7,39,59,5,63,10,129,37,5,23,42,29,23,61,18,11,7,49,12,62,5,60,29,25,59,121,71,30,61,18,11,7,62,5,23,25,55,31,45,58,30,61,18,11,7,42,64,5,35,3,0,23,24,3,42,42,45,41,54,79,18,5,17,3,44,32,49,69,18,56,83,18,5,17,3,41,24,49,54,72,25,30,47,29,7,18,5,17,3,37,46,27,25,47,29,7,59,18,5,17,3,21,45,39,114,3,34,34,25,18,100,40,18,18,126,5,25,47,5,25,105,50,33,11,7,114,5,59,57,31,9,5,47,21,15,3,0,25,9,25,66,18,5,41,3,30,11,10,19,34,66,21,7,70,15,24,29,79,55,23,9,7,33,19,5,39,60,94,18,5,36,86,58,5,17,3,33,33,45,29,59,23,37,41,7,24,24,5,21,3,34,11,10,19,22,64,41,75,58,35,13,9,20,7,5,110,3,52,21,22,52,50,33,47,126,100,62,29,15,11,9,61,50,17,20,24,93,60,43,19,19,26,46,56,30,39,26,17,20,79,49,13,11,9,36,110,41,56,52,69,68,50,11,9,7,5,3,26,37,50,47,43,36,7,46,41,19,38,9,7,48,40,45,43,51,39,5,3,43,51,37,51,18,11,14,44,19,20,11,7,5,45,3,0,41,21,21,0,19,26,18,22,14,24,31,7,53,39,36,48,93,5,17,3,38,33,5,33,51,26,53,32,50,5,52,3,0,27,26,63,58,22,61,21,55,11,7,20,5,38,3,28,34,36,12,13,13,114,9,5,17,3,31,22,27,97,55,42,11,7,98,57,42,11,7,5,3,31,80,13,18,15,31,71,23,53,39,60,42,11,39,111,11,11,53,58,50,13,9,7,5,3,36,35,33,41,38,40,30,36,16,104,47,38,11,9,35,34,7,5,29,44,18,25,52,26,5,3,0,21,25,27,44,69,52,76,71,32,5,43,57,21,35,12,59,23,37,7,5,37,37,21,54,3,23,44,32,3,0,34,46,3,52,45,70,3,70,37,20,26,7,44,3,0,24,21,32,8,26,14,7,36,0,39,35,62,34,22,11,7,29,28,52,14,46,7,22,29,62,33,11,7,61,59,27,17,3,0,32,58,44,18,12,56,18,5,21,33,8,36,44,37,61,22,11,7,42,62,23,28,11,7,36,22,29,62,33,11,7,61,47,23,27,17,3,32,65,44,18,12,56,18,5,16,44,16,17,3,42,46,87,18,5,17,3,39,25,41,18,32,82,18,5,17,3,36,21,19,26,18,22,14,27,59,35,13,9,24,31,7,41,47,53,56,173,44,5,3,0,51,50,5,33,47,12,13,16,20,29,56,24,36,11,7,77,29,52,7,5,81,3,0,22,64,3,1,0,38,0,31,34,26,27,28,52,43,3,0,21,24,3,11,30,34,37,21,23,38,36,16,3,1,30,30,33,74,65,3,19,1,0,32,15,88,41,9,36,47,33,37,19,7,47,13,40,51,28,14,42,7,17,27,11,38,49,27,24,5,10,45,3,1,42,43,34,31,3,32,1,57,24,59,74,3,20,1,48,36,19,43,37,42,3,33,1,28,0,45,90,35,34,13,17,38,38,5,32,3,13,1,0,22,42,28,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/location.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/credentials.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/module-errors.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/to-node-description.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/standard-errors.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parse-error.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/estree.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/context.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/types.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/identifier.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/scopeflags.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/scope.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/flow/scope.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/base.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/comments.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/whitespace.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/state.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/babel-helper-string-parser/src/index.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/tokenizer/index.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/class-scope.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/expression-scope.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/util/production-parameter.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/util.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/node.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/flow/index.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/jsx/xhtml.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/jsx/index.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/typescript/scope.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/typescript/index.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/placeholders.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugins/v8intrinsic.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/plugin-utils.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/options.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/lval.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/expression.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/statement.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/parser/index.ts","file:///home/jycouet/udev/gh/lib/houdini/node_modules/.pnpm/@babel+parser@7.20.7/node_modules/@babel/parser/src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* isHangingDeclaration */ false,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n            /* decorators */ null,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, { at: node });\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrFunctionDeclaration(false);\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.allowingSloppyLetBinding\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const lookahead = this.lookahead();\n    if (lookahead.type === tt._of && !lookahead.containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  parseStatementOrFunctionDeclaration(\n    this: Parser,\n    disallowLabeledFunction: boolean,\n  ) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowFunctionDeclaration |\n        (disallowLabeledFunction ? 0 : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowDeclaration) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (!allowFunctionDeclaration) {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.hasFollowingLineBreak() ||\n          this.state.containsEsc ||\n          !this.hasFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      !!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      classNode.decorators = maybeDecorators;\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing =\n      this.isContextual(tt._using) && !this.hasFollowingLineBreak();\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingBindingAtom()) ||\n      (startsWithUsing &&\n        this.hasFollowingBindingIdentifier() &&\n        this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrFunctionDeclaration(\n      // https://tc39.es/ecma262/#sec-if-statement-static-semantics-early-errors\n      true,\n    );\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrFunctionDeclaration(true)\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrFunctionDeclaration(false)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== tt.comma) {\n        // import module { x } ...\n        // import module \"foo\"\n        // They are invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries AssertEntries}\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","SourceTypeModuleError","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","SyntaxError","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","_excluded2","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartLoc","minPrec","isSatisfies","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","ParseFunctionFlag","ParseStatementFlag","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasFollowingBindingIdentifier","startsUsingForOf","parseModuleItem","AllowImportExport","AllowDeclaration","AllowFunctionDeclaration","AllowLabeledFunction","parseStatementListItem","disallowLabeledFunction","parseStatement","StatementOnly","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithUsing","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","Declaration","HangingDeclaration","Async","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","Expression","hangingDeclaration","isDeclaration","NullableId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseMaybeImportReflection","isImportReflection","nextNextTokenFirstChar","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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AC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC,CAAA;AAEj+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EA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","sourceRoot":""},"url":null}}}