name: Publish Release
on:
    # When Release Pull Request is merged
    pull_request:
        branches:
            - main
    types: [closed]

env:
    CI: true
jobs:
    publish:
        name: Publish
        runs-on: ubuntu-18.04
        # only publish if the PR was labeled with one of the versions
        if: ${{ contains(github.event.pull_request.labels.*.name, 'Major Version') || contains(github.event.pull_request.labels.*.name, 'Minor Version') || contains(github.event.pull_request.labels.*.name, 'Patch Version')}}
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Attach Head
              run: |
                  git checkout ${{ github.event.pull_request.base.ref }}

            - name: Setup Node 15
              uses: actions/setup-node@v1
              with:
                  node-version: 15
                  registry-url: 'https://npm.pkg.github.com'

            # run git actions as a bot
            - name: Git Identity
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Install and Build
              run: |
                  yarn install
                  yarn build
                  git checkout yarn.lock

            # ${BUMP}
            - name: Set Bump
              shell: bash -ex {0}
              run: |
                  if [ ${{ contains(github.event.pull_request.labels.*.name, 'Major Version') }} = "true" ] ; then
                    BUMP=major
                    BUMP_EMOJI=ðŸš€
                  elif [ ${{ contains(github.event.pull_request.labels.*.name, 'Minor Version') }} = "true" ] ; then
                    BUMP=minor
                    BUMP_EMOJI=ðŸ“¦
                  elif [ ${{ contains(github.event.pull_request.labels.*.name, 'Patch Version') }} = "true" ] ; then
                    BUMP=patch
                    BUMP_EMOJI=ðŸ”§
                  fi
                  echo "BUMP=${BUMP}" >> $GITHUB_ENV
                  echo "BUMP_EMOJI=${BUMP_EMOJI}" >> $GITHUB_ENV

            # define ${CURRENT_VERSION}
            - name: Set Current Version
              shell: bash -ex {0}
              run: |
                  CURRENT_VERSION=$(node -p 'require("./package.json").version')
                  echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

            - name: Authenticate with Registry
              run: |
                  echo "@apollo-elements:registry=http://registry.npmjs.org/" > .npmrc
                  echo "registry=http://registry.npmjs.org/" >> .npmrc
                  echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
                  npm whoami
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

            # publish new package versions to npm
            - name: Publish
              run: |
                  yarn lerna publish ${BUMP} --yes --message "$BUMP_EMOJI %s"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # create the release in github
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ env.CURRENT_VERSION }}
                  # Copy Pull Request's tile and body to Release Note
                  release_name: ${{ github.event.pull_request.title }}
                  body: |
                      ${{ github.event.pull_request.body }}
                  draft: false
                  prerelease: false
