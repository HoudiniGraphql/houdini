package config

type Config struct {
	// A glob pointing to all files that houdini should process.
	Include string `json:"include"`

	// A pattern used to remove matches from the include pattern.
	Exclude string `json:"exclude"`

	/*
		The path from the root of your project to a static representation of your schema (must end with .graphql, .gql, or .graphqls)

		Default: ./schema.graphql
	*/
	SchemaPath string `json:"schema"`

	/*
		A path to a file that contains all of the internal fragments and schema elements generated by houdini

		Default: <root>/.houdini/graphql/houdini.graphql
	*/
	DefinitionsPath string `json:"definitionsPath"`

	/**
	 * The number of queries that must occur before a value is removed from the cache. For more information: https://www.houdinigraphql.com/guides/caching-data
	 *
	 * Default: 10
	 */
	CacheBufferSize int `json:"cacheBufferSize"`

	/**
	 * The default cache policy to use for queries. For more information: https://www.houdinigraphql.com/guides/caching-data
	 */
	DefaultCachePolicy CachePolicy `json:"defaultCachePolicy"`

	// Specifies whether or not the runtime should always use partial data
	DefaultPartial bool `json:"defaultPartial"`

	/* Specifies whether mutations should append or prepend list
	 *
	 * Default: append
	 */
	DefaultListPosition ListPosition `json:"defaultListPosition"`

	/**
	 * Specifies whether mutation should apply a specific target list. When you set `all`, it's like adding the directive `@allLists` to all _insert fragment (default: `null`)
	 *
	 * Default: null
	 */
	DefaultListTarget string `json:"defaultListTarget"`

	/**
	 * Specifies whether the default paginate mode is Infinite or SinglePage
	 *
	 * Default: Infinite
	 */
	DefaultPaginateMode PaginateMode `json:"defaultPaginateMode"`

	/**
	 * Prevents the runtime from deduplicating pagination requests
	 */
	SupressPaginationDeduplication bool `json:"supressPaginationDeduplication"`

	/**
	 * A list of fields to use when computing a recordâ€™s id. The default value is ['id']. For more information: https://www.houdinigraphql.com/guides/caching-data#custom-ids
	 */
	DefaultKeys []string `json:"defaultKeys"`

	/**
	 * An object that customizes the resolution behavior for a specific type. For more information: https://www.houdinigraphql.com/guides/caching-data#custom-ids
	 */
	// TODO
	Types map[string]interface{} `json:"types"`

	/**
	* A flag to specify the default fragment masking behavior.
	*
	* Default: true
	 */
	MaskFragments bool `json:"maskFragments"`

	/**
	 * Configure the dev environment to watch a remote schema for changes
	 */
	WatchSchema *WatchSchemaConfig `json:"watchSchema"`

	/**
	 * Specifies the the persisted queries path and file. (default: `<rootDir>/persisted_queries.json`)
	 */
	PersistedQueriesPath string `json:"persistedQueriesPath"`

	/**
	 * The relative path from your houdini config file pointing to your application.
	 *
	 * Default: process.cwd()
	 */
	ProjectDir string `json:"projectDir"`

	/**
	 * The relative path from your project directory pointing to your output directory.
	 *
	 * Default: .houdini
	 */
	RuntimeDir string `json:"runtimeDir"`

	/**
	 * Configuration for the router
	 */
	Router *RouterConfig `json:"router"`

	// TODO: runtime scalars

	Plugins map[string]map[string]any `json:"plugins"`
}

type CachePolicy string

const (
	CachePolicyCacheOnly       CachePolicy = "CacheOnly"
	CachePolicyNetworkOnly     CachePolicy = "NetworkOnly"
	CachePolicyCacheAndNetwork CachePolicy = "CacheAndNetwork"
	CachePolicyCacheOrNetwork  CachePolicy = "CacheOrNetwork"
	CachePolicyNoCache         CachePolicy = "NoCache"
)

type ListPosition string

const (
	ListPositionAppend  ListPosition = "append"
	ListPositionPrepend ListPosition = "prepend"
)

type PaginateMode string

const (
	PaginateModeInfinite   PaginateMode = "Infinite"
	PaginateModeSinglePage PaginateMode = "SinglePage"
)

type WatchSchemaConfig struct {
	/**
	 * A url to use to pull the schema. For more information: https://www.houdinigraphql.com/api/cli#generate
	 */
	Url string `json:"url"`

	/**
	 * sets the amount of time between each request in milliseconds (default 2 seconds).
	 * To limit the schema introspection to just on the start of the server, set interval to 0.
	 * To disable the schema introspection, set interval to null.
	 */
	Interval int `json:"interval"`

	/**
	 * Sets a custom timeout in milliseconds which is used to cancel fetching the schema. If the timeout is reached
	 * before the remote API has responded, the request is cancelled and an error is displayed.
	 * The default is 30 seconds (30000 milliseconds)
	 */
	Timeout int `json:"timeout"`

	/**
	 * An object containing the environment variables you want passed onto the api when polling for a new schema.
	 * The keys dictate the header names. If the value is a string starting with "env:" the corresponding environment variable will be used
	 * directly.
	 */
	Headers map[string]string `json:"headers"`
}

type RouterConfig struct {
	ApiEndpoint string        `json:"apiEndpoint"`
	Auth        *AuthStrategy `json:"auth"`
}

type AuthStrategy struct {
	Redirect    string   `json:"redirect"`
	Mutation    string   `json:"mutation"`
	SessionKeys []string `json:"sessionKeys"`
	URL         string   `json:"url"`
}
