"""
Date custom scalar type
"""
scalar DateTime
scalar File

"""
Can be Value1 or Value2.
"""
enum MyEnum {
	"The first value"
	Value1
	"The second value"
	Value2 @deprecated(reason: "Use Value1 instead")
}

enum TypeOfUser {
	NICE
	COOL
}

enum ForceReturn {
	"Normal"
	NORMAL
	"No value"
	NULL
	"Some error"
	ERROR
}

type Mutation {
	addUser(
		"""The users birth date"""
		birthDate: DateTime!
		name: String!
		snapshot: String!
		enumValue: MyEnum
		types: [TypeOfUser!]
		delay: Int
		force: ForceReturn
	): User
	addNonNullUser(
		birthDate: DateTime!
		name: String!
		snapshot: String!
		enumValue: MyEnum
		types: [TypeOfUser!]
		delay: Int
		force: ForceReturn
	): User!
	updateUser(id: ID!, name: String, snapshot: String!, birthDate: DateTime, delay: Int): User!
	singleUpload(file: File!): String!
	multipleUpload(files: [File!]!): [String!]!
	addCity(name: String!): City!
	addLibrary(city: ID!, name: String!): Library!
	addBook(library: ID!, title: String!): Book!
	deleteCity(city: ID!): City!
	deleteLibrary(library: ID!): Library!
	deleteBook(book: ID!, delay: Int, force: ForceReturn): Book
	updateRentedBook(userId: String!, bookId: Int!, rate: Int!): RentedBook
	createA(a: String!): A!
	createB(b: String!): B!
}

"""
A node.
"""
interface Node {
	id: ID!
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

input UserNameFilter {
	name: String!
}

union UnionAorB = A | B

type Query {
	aOrB: [UnionAorB!]!
	avgYearsBirthDate: Float!
	node(id: ID!): Node
	user(id: ID!, snapshot: String!, tmp: Boolean, delay: Int, forceNullDate: Boolean): User!
	usersConnection(
		after: String
		before: String
		first: Int
		last: Int
		snapshot: String!
	): UserConnection!
	usersList(limit: Int = 4, offset: Int, snapshot: String!): [User!]!
	userNodes(limit: Int = 4, offset: Int, snapshot: String!): UserNodes!
	userSearch(filter: UserNameFilter!, snapshot: String!): [User!]!
	session: String
	cities: [City]!
	city(id: ID!, delay: Int): City
	userNodesResult(snapshot: String!, forceMessage: Boolean!): UserNodesResult!
	userResult(id: ID!, snapshot: String!, forceMessage: Boolean!): UserResult!
	rentedBooks: [RentedBook!]!
	animals: AnimalConnection!
	monkeys: MonkeyConnection!
	"""
	Get a monkey by its id
	"""
	monkey(id: ID!): Monkey
}

type Subscription {
	userUpdate(id: ID!, snapshot: String): User
}

type User implements Node {
	birthDate: DateTime
	friendsConnection(after: String, before: String, first: Int, last: Int): UserConnection!
	"This is the same list as what's used globally. its here to tests fragments"
	usersConnection(after: String, before: String, first: Int, last: Int): UserConnection!
	usersConnectionSnapshot(
		after: String
		before: String
		first: Int
		last: Int
		snapshot: String!
	): UserConnection!
	"This is the same list as what's used globally. its here to tests fragments"
	userSearch(filter: UserNameFilter!, snapshot: String!): [User!]!
	friendsList(limit: Int, offset: Int): [User!]!
	id: ID!
	name: String!
	enumValue: MyEnum
	types: [TypeOfUser!]!
	testField(someParam: Boolean!): String
}

interface Animal implements Node {
	id: ID!
	name: String!
}

"""
A monkey.
"""
type Monkey implements Node & Animal {
	id: ID!
	name: String!
	"""
	Whether the monkey has a banana or not
	"""
	hasBanana: Boolean!
	"""
	Whether the monkey has a banana or not
	"""
	oldHasBanana: Boolean @deprecated(reason: "Use hasBanana")
}

interface AnimalConnection {
	edges: [AnimalEdge!]!
	pageInfo: PageInfo!
}

interface AnimalEdge {
	cursor: String
	node: Animal
}

type MonkeyConnection implements AnimalConnection {
	edges: [MonkeyEdge!]!
	pageInfo: PageInfo!
}

type MonkeyEdge implements AnimalEdge {
	cursor: String
	node: Monkey
}

type UserConnection {
	edges: [UserEdge!]!
	pageInfo: PageInfo!
}

type UserEdge {
	cursor: String
	node: User
}

type UserNodes {
	totalCount: Int
	nodes: [User!]!
}

type Book {
	id: ID!
	title: String!
}

type Library {
	id: ID!
	name: String!
	books: [Book]!
}

type City {
	id: ID!
	name: String!
	libraries: [Library]!
}

type RentedBook {
	userId: String!
	bookId: Int!
	rate: Int!
}

type A {
	id: ID!
	a: String!
}

type B {
	id: ID!
	b: String!
}

union UserNodesResult = UserNodes | Message1
union UserResult = User | Message1

type Message1 {
	message: String!
}
