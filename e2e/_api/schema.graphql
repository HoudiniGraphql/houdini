"""
Date custom scalar type
"""
scalar DateTime
scalar File

enum MyEnum {
	Value1
	Value2
}

enum TypeOfUser {
	NICE
	COOL
}

type Mutation {
	addUser(
		birthDate: DateTime!
		name: String!
		snapshot: String!
		delay: Int
		enumValue: MyEnum
		types: [TypeOfUser!]
	): User!
	updateUser(id: ID!, name: String, snapshot: String!, birthDate: DateTime, delay: Int): User!
	singleUpload(file: File!): String!
	multipleUpload(files: [File!]!): [String!]!
	addCity(name: String!): City!
	addLibrary(city: ID!, name: String!): Library!
	addBook(library: ID!, title: String!): Book!
	deleteCity(city: ID!): City!
	deleteLibrary(library: ID!): Library!
	deleteBook(book: ID!): Book!
}

interface Node {
	id: ID!
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

type Query {
	avgYearsBirthDate: Float!
	node(id: ID!): Node
	user(id: ID!, snapshot: String!, tmp: Boolean, delay: Int, forceNullDate: Boolean): User!
	usersConnection(
		after: String
		before: String
		first: Int
		last: Int
		snapshot: String!
	): UserConnection!
	usersList(limit: Int = 4, offset: Int, snapshot: String!): [User!]!
	userNodes(limit: Int = 4, offset: Int, snapshot: String!): UserNodes!
	session: String
	cities: [City]!
}

type Subscription {
	userUpdate(id: ID!, snapshot: String): User
}

type User implements Node {
	birthDate: DateTime
	friendsConnection(after: String, before: String, first: Int, last: Int): UserConnection!
	friendsList(limit: Int, offset: Int): [User!]!
	id: ID!
	name: String!
	enumValue: MyEnum
	types: [TypeOfUser!]!
}

type UserConnection {
	edges: [UserEdge!]!
	pageInfo: PageInfo!
}

type UserEdge {
	cursor: String
	node: User
}

type UserNodes {
	totalCount: Int
	nodes: [User!]!
}

type Book {
	id: ID!
	title: String!
}

type Library {
	id: ID!
	name: String!
	books: [Book]!
}

type City {
	id: ID!
	name: String!
	libraries: [Library]!
}
