interface Animal implements Node {
	id: ID!
	name: String!
}

interface AnimalConnection {
	edges: [AnimalEdge!]!
	pageInfo: PageInfo!
}

interface AnimalEdge {
	cursor: String
	node: Animal
}

type Book {
	id: ID!
	title: String!
}

type City {
	id: ID!
	libraries: [Library]!
	name: String!
}

"""
Date custom scalar type
"""
scalar DateTime

scalar File

type Library {
	books: [Book]!
	id: ID!
	name: String!
}

type Message1 {
	message: String!
}

type Monkey implements Animal & Node {
	hasBanana: Boolean!
	id: ID!
	name: String!
}

type MonkeyConnection implements AnimalConnection {
	edges: [MonkeyEdge!]!
	pageInfo: PageInfo!
}

type MonkeyEdge implements AnimalEdge {
	cursor: String
	node: Monkey
}

type Mutation {
	addBook(library: ID!, title: String!): Book!
	addCity(name: String!): City!
	addLibrary(city: ID!, name: String!): Library!
	addUser(
		birthDate: DateTime!
		delay: Int
		enumValue: MyEnum
		name: String!
		snapshot: String!
		types: [TypeOfUser!]
	): User!
	deleteBook(book: ID!): Book!
	deleteCity(city: ID!): City!
	deleteLibrary(library: ID!): Library!
	multipleUpload(files: [File!]!): [String!]!
	singleUpload(file: File!): String!
	updateRentedBook(bookId: Int!, rate: Int!, userId: String!): RentedBook
	updateUser(birthDate: DateTime, delay: Int, id: ID!, name: String, snapshot: String!): User!
}

enum MyEnum {
	Value1
	Value2
}

interface Node {
	id: ID!
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

type Query {
	animals: AnimalConnection!
	avgYearsBirthDate: Float!
	cities: [City]!
	hello: String!
	monkeys: MonkeyConnection!
	node(id: ID!): Node
	rentedBooks: [RentedBook!]!
	session: String
	user(delay: Int, forceNullDate: Boolean, id: ID!, snapshot: String!, tmp: Boolean): User!
	userNodes(limit: Int = 4, offset: Int, snapshot: String!): UserNodes!
	userNodesResult(forceMessage: Boolean!, snapshot: String!): UserNodesResult!
	userResult(forceMessage: Boolean!, id: ID!, snapshot: String!): UserResult!
	usersConnection(
		after: String
		before: String
		first: Int
		last: Int
		snapshot: String!
	): UserConnection!
	usersList(limit: Int = 4, offset: Int, snapshot: String!): [User!]!
}

type RentedBook {
	bookId: Int!
	rate: Int!
	userId: String!
}

type Subscription {
	userUpdate(id: ID!, snapshot: String): User
}

enum TypeOfUser {
	COOL
	NICE
}

type User implements Node {
	birthDate: DateTime
	enumValue: MyEnum
	friendsConnection(after: String, before: String, first: Int, last: Int): UserConnection!
	friendsList(limit: Int, offset: Int): [User!]!
	id: ID!
	name: String!
	types: [TypeOfUser!]!

	"""
	This is the same list as what's used globally. its here to tests fragments
	"""
	usersConnection(after: String, before: String, first: Int, last: Int): UserConnection!
}

type UserConnection {
	edges: [UserEdge!]!
	pageInfo: PageInfo!
}

type UserEdge {
	cursor: String
	node: User
}

type UserNodes {
	nodes: [User!]!
	totalCount: Int
}

union UserNodesResult = Message1 | UserNodes

union UserResult = Message1 | User
