class t{constructor(t,e){this.fetch=t,this.socket=e}sendRequest(t,e,s){return this.fetch.call(t,e,s)}}let e=null;function s(t){e=t}function r(){return e}async function n(t,{text:e,variables:s},n){const i=r();return i?await i.sendRequest(t,{text:e,variables:s},n):{data:{},errors:[{message:"could not find houdini environment"}]}}class i{constructor(t){this.continue=!0,this.returnValue={},this.context=t}error(t,e){this.continue=!1,this.returnValue={error:e,status:t}}redirect(t,e){this.continue=!1,this.returnValue={redirect:e,status:t}}fetch(t,e){return this.context.fetch(t,e)}graphqlErrors(t){return console.log("registering graphql errors",t),this.error(500,t.map((({message:t})=>t)).join("\n"))}computeInput(t,e){return"kit"===t?e(this.context):e.call(this,this.context.page,this.context.session)}}export{t as E,i as R,n as f,r as g,s};
