// src/lib/loadOutline.js
import fs from 'fs/promises'
import { compile } from 'mdsvex'
import { parse } from 'node-html-parser'
import path from 'path'
import rehypeAutolinkHeadings from 'rehype-autolink-headings'
import rehypeSlug from 'rehype-slug'
async function loadOutline() {
	const routeDir = path.resolve('src', 'routes')
	const content = Object.fromEntries(
		(
			await Promise.all(
				(
					await fs.readdir(routeDir)
				).map(async (category) => {
					const categoryDir = path.join(routeDir, category)
					if (!(await fs.lstat(categoryDir)).isDirectory()) {
						return null
					}
					const list = { length: 0 }
					for (let file of await fs.readdir(categoryDir)) {
						let filepath = path.join(categoryDir, file)
						if (file.startsWith('_')) {
							continue
						}
						const contents = await fs.readFile(filepath, 'utf-8')
						const { data, code } = await compile(contents, {
							rehypePlugins: [rehypeSlug, rehypeAutolinkHeadings]
						})
						const metadata = data.fm
						if (typeof metadata.sidebar === 'boolean' && !metadata.sidebar) {
							continue
						}
						const parsed = parse(code)
						const subcategories = parsed
							.querySelectorAll('h2')
							.map((h2) => ({
								text: h2.text,
								id: h2.attributes.id
							}))
							.filter((subcat) => !subcat.text.toLowerCase().endsWith('s next?'))
						const fileName = file.split('.').slice(0, -1).join('.')
						list[metadata.index] = {
							title: metadata.title,
							slug: `/${category}/${fileName}`,
							filepath,
							subcategories
						}
					}
					list.length = Object.keys(list).length - 1
					return [category, Array.from(list)]
				})
			)
		).filter(Boolean)
	)
	return Object.fromEntries(
		['intro', 'guides', 'api'].map((category) => {
			const files = content[category]
			return [
				category,
				{
					name:
						{
							intro: 'Get started',
							guides: 'Guides',
							api: 'API'
						}[category] || category,
					index: files[0],
					files: files.map((file, i) => ({
						...file,
						previous: files[i - 1],
						next: files[i + 1]
					}))
				}
			]
		})
	)
}

// src/lib/loadContent.js
import fs2 from 'fs/promises'
import { compile as compile2 } from 'mdsvex'
import { parse as parse2, HTMLElement } from 'node-html-parser'
import path2 from 'path'
import rehypeAutolinkHeadings2 from 'rehype-autolink-headings'
import rehypeSlug2 from 'rehype-slug'
async function loadContent() {
	const content = await loadOutline()
	return (
		await Promise.all(
			Object.entries(content).flatMap(([sectionName, section]) =>
				section.files.flatMap(async (file) => {
					if (file.name === 'intro') {
						return []
					}
					const passages = []
					const contents = await fs2.readFile(file.filepath, 'utf-8')
					const { code } = await compile2(contents, {
						rehypePlugins: [rehypeSlug2, rehypeAutolinkHeadings2]
					})
					const parsed = parse2(code)
					let breadcrumb = []
					let content2 = ''
					let parentHeader = 0
					for (const tag of parsed.querySelectorAll('h1, h2, h3, p')) {
						if (!tag.tagName.startsWith('H')) {
							content2 += tag.text + ' '
							continue
						}
						if (content2) {
							const passage = {
								breadcrumb: [
									sectionName[0].toLocaleUpperCase() + sectionName.slice(1),
									...breadcrumb.map((ele) => ele.text || ele)
								],
								content: content2.replace(/\n/g, ' '),
								href: file.slug
							}
							if (breadcrumb.length > 1) {
								passage.href += `#${breadcrumb[breadcrumb.length - 1].attributes.id}`
							}
							passages.push(passage)
							content2 = ''
						}
						if (tag.tagName === 'H1') {
							parentHeader = 1
							breadcrumb = [tag]
						} else if (tag.tagName === 'H2') {
							parentHeader = 2
							breadcrumb = [breadcrumb[0], tag]
						} else if (tag.tagName === 'H3') {
							parentHeader = 3
							if (parentHeader === 1) {
								breadcrumb = [breadcrumb[0], tag]
							}
							if (parentHeader === 2) {
								breadcrumb = [breadcrumb[0], breadcrumb[1], tag]
							}
						}
					}
					return passages
				})
			)
		)
	).flat()
}

// vite.config.js
import { sveltekit } from '@sveltejs/kit/vite'
import path3 from 'path'
import { replaceCodePlugin } from 'vite-plugin-replace'
var config = {
	resolve: {
		alias: {
			'~': path3.resolve('./src')
		}
	},
	plugins: [
		sveltekit(),
		replaceCodePlugin({
			replacements: [
				{ from: 'REPLACE_WITH_OUTLINE', to: JSON.stringify(await loadOutline()) },
				{ from: 'REPLACE_WITH_CONTENT', to: JSON.stringify(await loadContent()) }
			]
		})
	]
}
var vite_config_default = config
export { vite_config_default as default }
//# sourceMappingURL=data:application/json;base64,
