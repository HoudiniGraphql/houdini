---
sidebar: false
layout: blank
---

Adding and removing records from a list is done by mixing together a few different generated fragments
and directives. In order to tell the compiler which lists are targets for these operations, you have to
mark them with the `@list` directive and provide a unique name:

```graphql
query AllItems {
	items @list(name: "All_Items") {
		id
	}
}
```

Some things worth mentioning:

- It's recommended to name these lists with a different casing convention than the rest of your
  application to distinguish the generated fragments from those in your codebase.
- Sometimes the runtime needs a little help to hunt down the list you want to mutate. For more information on how to use `@parentID` to help, [see the GraphQL docs](/api/graphql#parentidvalue-string).

### Inserting a record

With this field tagged, any mutation that returns an `Item` can be used to insert items in this list:

```graphql
mutation NewItem($input: AddItemInput!) {
	addItem(input: $input) {
		item {
			...All_Items_insert
		}
	}
}
```

### Removing a record

Any mutation that returns an `Item` can also be used to remove an item from the list:

```graphql
mutation RemoveItem($input: RemoveItemInput!) {
	removeItem(input: $input) {
		item {
			...All_Items_remove
		}
	}
}
```

### Toggling a record

Any mutation that returns an `Item` can also be used to toggle an elements membership of the list. If the item is already in the list, it will be removed; otherwise, it will be added.

```graphql
mutation ToggleItem($input: ToggleItemInput!) {
	toggleItem(input: $input) {
		item {
			...All_Items_toggle
		}
	}
}
```

### Deleting a record

Sometimes it can be tedious to remove a record from every single list that mentions it.
For these situations, Houdini provides a directive that can be used to mark a field in
the mutation response holding the ID of a record to delete from all lists.

```graphql
mutation DeleteItem($id: ID!) {
	deleteItem(id: $id) {
		itemID @Item_delete
	}
}
```

### Conditionals

Sometimes you only want to add or remove a record from a list when an argument has a particular value.
For example, in a todo list you might not want to add the result to the list if the view is only showing the completed items. To support this, houdini provides the `@when` and `@when_not` directives. These filters apply to the values of arguments passed to the field marked with `@list`.

```graphql
mutation NewItem($input: AddItemInput!) {
	addItem(input: $input) {
		item {
			...All_Items_insert @when_not(completed: true)
		}
	}
}
```
