---
sidebar: false
layout: blank
---

## Configuring the client

Houdini can work with any websocket client as long as you can provide an object that satisfies
the `SubscriptionHandler` interface as the second argument to the HoudiniClient's constructor. Keep in mind
that WebSocket connections only exist between the browser and your API, therefor you must remember to
pass `null` when configuring your environment on the rendering server.

### Using `graphql-ws`

If your API supports the [`graphql-ws`](https://github.com/enisdenjo/graphql-ws) protocol, you can create a
client and pass it directly:

```typescript
// client.ts

import { createClient } from 'graphql-ws'
import { browser } from '$app/env'

// in sapper, this would be something like `(process as any).browser`
let socketClient = browser
	? new createClient({
			url: 'ws://api.url'
	  })
	: null

export default new HoudiniClient(fetchQuery, socketClient)
```

### Using `subscriptions-transport-ws`

If you are using the deprecated `subscriptions-transport-ws` library and associated protocol,
you will have to slightly modify the above block:

```typescript
// client.ts

import { SubscriptionClient } from 'subscriptions-transport-ws'
import { browser } from '$app/env'

let socketClient: SubscriptionHandler | null = null
if (browser) {
	// instantiate the transport client
	const client = new SubscriptionClient('ws://api.url', {
		reconnect: true
	})

	// wrap the client in something houdini can use
	socketClient = {
		subscribe(payload, handlers) {
			// send the request
			const { unsubscribe } = client.request(payload).subscribe(handlers)

			// return the function to unsubscribe
			return unsubscribe
		}
	}
}

export default new HoudiniClient(fetchQuery, socketClient)
```

### Server-Side Events

If your server supports the latest Server-Side events, you can use them to power your subscriptions:

```javascript
import { SubscriptionClient } from 'subscriptions-transport-ws'
import { browser } from '$app/env'

let socketClient: SubscriptionHandler | null = null
if (browser) {
	socketClient = {
		subscribe(payload, handlers) {
			const url = new URL('/api/graplhql', location.href)
			url.searchParams.append('query', payload.query)
			url.searchParams.append('variables', JSON.stringify(payload.variables))

			const eventSource = new EventSource(url)

			eventSource.addEventListener('message', (ev) => handlers.next(JSON.parse(ev.data)))

			return () => eventSource.close()
		}
	}
}

export default new HoudiniClient(fetchQuery, socketClient)
```
