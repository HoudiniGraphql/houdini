---
title: Query
index: 1
description: Queries in Houdini
---

<script>
    import { HeaderWithMode } from '~/components'
    import { Highlight, HighlightAuto } from 'svelte-highlight'
    import { Transformation } from '~/components'
    import { graphql } from '~/lib/highlight'
</script>

<HeaderWithMode title="Query" />

Load data from the server and subscribe to any changes of fields we detect from mutations, subscriptions, and other queries.

```svelte
<script>
	import { query, graphql } from '$houdini'
	const { data, refetch, loading, error } = query(graphql`
		query MyQuery {
			myField
		}
	`)
</script>
```

### Inputs

1. A string tagged with `graphql` containing a single document with one named query

### Return Values

`query` returns a single object with the following keys:

- `data` is a store containing the result of the query. It's value will update as mutations, subscriptions, and other queries provide more recent information.
- `refetch` is a function that will refetch the query with a new set of arguments.
- `loading` is a store containing the loading state (`true` or `false`) for a query found outside of a route component (ie, not defined in `src/routes`)
- `errors` is a store containing any error values that occur for a query found outside of a route component (ie, not defined in `src/routes`)
- `partial` is a store containing a boolean that indicates if the result has a partial match

## Query Variables

At the moment, query variables are declared as a function in the module context of your component.
This function must be named after your query and in a sapper application, it takes the same arguments
that are passed to the `preload` function described in the [Sapper](https://sapper.svelte.dev/docs#Pages)
documentation. In a SvelteKit project, this function takes the same arguments passed to the `load` function
described in the [SvelteKit](https://kit.svelte.dev/docs#Loading) docs. Regardless of the framework, you can return
the value from `this.error` and `this.redirect` in order to change the behavior of the response. Here is a
modified example [from the source repository](https://github.com/HoudiniGraphql/houdini/tree/main/example):

```svelte
<script context="module" lang="ts">
	// This is the function for the AllItems query.
	// Query variable functions must be named <QueryName>Variables.
	export function AllItemsVariables(event): AllItems$input {
		// make sure we recognize the value
		if (!['active', 'completed'].includes(event.params.filter)) {
			return this.error(400, 'invalid filter')
		}

		return {
			completed: event.params.filter === 'completed'
		}
	}
</script>

<!-- src/routes/[filter].svelte -->
<script lang="ts">
	import { query, graphql, type AllItems } from '$houdini'

	// load the items
	const { data } = query<AllItems>(graphql`
		query AllItems($completed: Boolean) {
			items(completed: $completed) {
				id
				text
			}
		}
	`)
</script>

{#each $data.items as item}
	<div>{item.text}</div>
{/each}
```

## Loading State

In short, the recommendation is to rely on the `isFetching` store instead of using the `$navigating` store or similar mechanisms
provided by Sapper or SvelteKit. The reason for this is that those stores have a hard time capturing the state of the transition
when a load function is [not always blocking](/api/query/store#fetching-data).

## Hooks

Sometimes you will need to add additional logic to a component's query. For example, you might want to
check if the current session is valid before a query is sent to the server. In order to support this,
Houdini will look for hook functions defined in the module context which can be used to perform
any logic you need.

Hooks can be used to pass data to components as well as populate your SvelteKit route's `stuff` by returning an
object with `props` or `stuff` keys.

### `beforeLoad`

Called before Houdini executes load queries against the server. You can expect the same
arguments as SvelteKit's [`load`](https://kit.svelte.dev/docs#loading) hook.

```svelte
<script context="module">
    // It has access to the same arguments,
    // this.error, and this.redirect as the variable functions
    export function beforeLoad({page, session}){
        if(!session.authenticated){
            return this.redirect(302, '/login')
        }

    	return {
            props: {
                message: "Number of items:"
            }
        }
    }
</script>

<script>
    import { query, graphql } from '$houdini'

    export let message

    // load the items
    const { data } = query(graphql`
        query AllItems {
            items {
                id
            }
        }
    `)
</script>

{message}: {$data.items.length}
```

### `afterLoad`

Called after Houdini executes load queries against the server. You can expect the same
arguments as SvelteKit's [`load`](https://kit.svelte.dev/docs#loading) hook, plus an additional
`data` property referencing query result data. Keep in mind that if you define this hook, Houdini
will have to block requests to the route in order to wait for the result. For more information about
blocking during navigation, check out [this section](/api/query/store#server-side-blocking) of the query store
docs.

```svelte
<script context="module">
    export function MyProfileVariables({ page: { params: { id } } }) {
        return { id }
    }
    export function afterLoad({ data }){
        if(!data.MyProfile){
            return this.error(404)
        }

        return {
            props: {
                message: "Hello I'm"
            }
        }
    }
</script>

<script>
    import { query, graphql } from '$houdini'

    export let message

    // load the items
    const { data } = query(graphql`
        query MyProfile {
            profile(id) {
                name
            }
        }
    `)
</script>

{message} {$data.profile.name}
```

## Paginated Queries

Paginated queries must use the `paginatedQuery` function exported from your runtime and contain the `@paginate` directive on the appropriate field. For more information on Houdini's support for pagination, please visit the [Pagination guide](/guides/pagination).

```svelte
<script>
	import { paginatedQuery, graphql } from '$houdini'
	const { data, loadNextPage } = paginatedQuery(graphql`
		query UserList {
			friends(last: 10) @paginate {
				edges {
					node {
						id
					}
				}
			}
		}
	`)
</script>
```

### Return Values

`paginatedQuery` returns the same values as `query` with a few additions:

- `loadNextPage` is an async function that loads the next page. It takes one optional argument: the page size to load for the next request.
- `loadPreviousPage` is an async function that loads the previous page. It takes one optional argument: the page size to load for the next request.
- `loading` is a store containing a boolean value that tracks the loading state of the pagination requests
- `pageInfo` is a store that contains the page info (`hasPreviousPage`, `hasNextPage`, etc.) Only valid for cursor-based pagination.
- `partial` is a store containing a boolean that indicates if the result has a partial match
