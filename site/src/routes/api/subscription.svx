---
title: Subscription
index: 4
description: Subscriptions in Houdini
---

# Subscriptions

Listen for real-time updates from your server using GraphQL Subscriptions.

```svelte
<script>
	import { graphql, subscription } from '$houdini'

	// this information should usually come from a fragment
	export let itemID

	// will start listening onMount (browser only)
	subscription(
		graphql`
			subscription ItemUpdate($id: ID!) {
				itemUpdate(id: $id) {
					item {
						id
						completed
						text
					}
				}
			}
		`,
		{ id: itemID }
	)
</script>
```

### Inputs

1. A string tagged with `graphql` containing a single document with one named subscription
2. An object containing any arguments for the subscription

### Return Values

`subscription` returns a store containing the latest version of the subscription value

Note: mutations usually do best when combined with at least one fragment grabbing
the information needed for the mutation (for an example of this pattern, see below.)

## External Documents

Subscriptions defined in external documents can be trigger using the subscription store's `listen` method:

```svelte

<script>
	import { graphql, subscription } from '$houdini'

	// this information should usually come from a fragment
	export let itemID

	const store = graphql`
		subscription ItemUpdate($id: ID!) {
			itemUpdate(id: $id) {
				item {
					id
					completed
					text
				}
			}
		}
	`
</script>

<button on:click={() => store.listen({ itemID })}>
listen
</button>
```

## List Operations

Subscription bodies can contain all of the list operations described in [this document](/api/mutation#lists).

## Configuring the client

Houdini can work with any websocket client as long as you can provide an object that satisfies
the `SubscriptionHandler` interface as the second argument to the HoudiniClient's constructor. Keep in mind
that WebSocket connections only exist between the browser and your API, therefor you must remember to
pass `null` when configuring your environment on the rendering server.

### Using `graphql-ws`

If your API supports the [`graphql-ws`](https://github.com/enisdenjo/graphql-ws) protocol, you can create a
client and pass it directly:

```typescript
// client.ts

import { createClient } from 'graphql-ws'
import { browser } from '$app/env'

let socketClient = browser
	? new createClient({
			url: 'ws://api.url'
	  })
	: null

export default new HoudiniClient(fetchQuery, socketClient)
```

### Using `subscriptions-transport-ws`

If you are using the deprecated `subscriptions-transport-ws` library and associated protocol,
you will have to slightly modify the above block:

```typescript
// client.ts

import { SubscriptionClient } from 'subscriptions-transport-ws'
import { browser } from '$app/env'

let socketClient: SubscriptionHandler | null = null
if (browser) {
	// instantiate the transport client
	const client = new SubscriptionClient('ws://api.url', {
		reconnect: true
	})

	// wrap the client in something houdini can use
	socketClient = {
		subscribe(payload, handlers) {
			// send the request
			const { unsubscribe } = client.request(payload).subscribe(handlers)

			// return the function to unsubscribe
			return unsubscribe
		}
	}
}

export default new HoudiniClient(fetchQuery, socketClient)
```

### Server-Side Events

If your server supports the latest Server-Side events, you can use them to power your subscriptions:

```javascript
import { SubscriptionClient } from 'subscriptions-transport-ws'
import { browser } from '$app/env'

let socketClient: SubscriptionHandler | null = null
if (browser) {
	socketClient = {
		subscribe(payload, handlers) {
			const url = new URL('/api/graplhql', location.href)
			url.searchParams.append('query', payload.query)
			url.searchParams.append('variables', JSON.stringify(payload.variables))

			const eventSource = new EventSource(url)

			eventSource.addEventListener('message', (ev) => handlers.next(JSON.parse(ev.data)))

			return () => eventSource.close()
		}
	}
}

export default new HoudiniClient(fetchQuery, socketClient)
```
