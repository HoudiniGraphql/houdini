---
title: Codegen Plugins
description: An overview of Houdini's Codegen Plugins
---

<script>
    import FullDiagram  from '~/diagrams/full.svelte'
</script>

# Codegen Plugins

Codegen plugins allow you to add additional behavior to Houdini's static processing. This includes
integrating into the core code generation pipeline as well as transforming files (usually to take advantage
of what was generated).

> This is an advanced topic and requires a deep understanding of Houdini. Please make
> sure you've at least seen the example at the bottom of the
> [Architecture Guide](/guides/architecture).
> If something isn't clicking or if you have any questions, please
> [join us on discord](https://discord.gg/Gd8vfvxpsD) and ask!

For information on adding a plugin to your project, checkout the
[Config reference](/api/config#adding-plugins)

## Defining a Plugin

A plugin is defined as an asynchronous function that returns
an object with a fixed set of keys defining the "hooks" that
the plugin uses to perform its goal:

```javascript:title=src/plugins/myPlugins.js
/** @type { import("houdini").Plugin }*/
const generateSomething = async () =>  {
    return {
        generate({ documents }) {
            // generate something for every document in the project
        }
    }
}
```

### Typesafe Config Values

When defining a plugin, your users will likely want type definitions for the
configuration values you ask for. You can easily provide these definitions by
extending the `HoudiniPluginConfig` type the `houdini` module:

```typescript:title=my-custom-plugin/src/index.ts
declare module 'houdini' {
	interface HoudiniPluginConfig {
		'my-custom-plugin': CustomPluginConfig
	}
}

export type CustomPluginConfig = {
    aValue: string
}
```

With that defined, a user can now include your plugins declarations and reference
`aValue` in their config:

```javascript:title=houdini.config.js
/// <references types="my-custom-plugin">

export default {
    plugins: {
        'my-custom-plugin': {
            aValue: 'myValue',
        }
    }
}
```

## Publishing a Plugin

## Code Generation Hooks

<FullDiagram />

### `extensions`

### `extract_documents`

### `schema`

### `transform_before_validate`

### `validate`

### `transform_before_validate`

### `artifact_data`

### `artifact_selection`

### `artifact_end`

### `hash`

### `graphql_tag_return`

### `index_file`

### `generate`

### `transform_runtime`

## Transform Hooks

### `transform_file`

## Miscellaneous Hooks

### `config`

### `env`

### `after_load`

### `include`
