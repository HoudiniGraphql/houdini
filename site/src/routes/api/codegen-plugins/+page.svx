---
title: Codegen Plugins
description: An overview of Houdini's Codegen Plugins
---

<script>
    import { ExtractDiagram, ValidateDiagram, SetupDiagram, GenerateDiagram } from '~/routes/_diagrams'
</script>

# Codegen Plugins

Codegen plugins allow you to add additional behavior to Houdini's static processing. This includes
integrating into the core code generation pipeline as well as transforming files (usually to take advantage
of what was generated).

> This is an advanced topic and requires a deep understanding of Houdini. Please make
> sure you've at least seen the example at the bottom of the
> [Architecture Guide](/guides/architecture).
> If something isn't clicking or if you have any questions, please
> [join us on discord](https://discord.gg/Gd8vfvxpsD) and ask!

For information on adding a plugin to your project, checkout the
[Config reference](/api/config#adding-plugins).

## Defining a Plugin

A codegen plugin is defined as an asynchronous function that returns
an object with a fixed set of keys, defining the "hooks" that you want
to use:

```javascript:title=src/plugins/myPlugins.js
/** @type { import("houdini").Plugin }*/
const generateSomething = async () =>  {
    return {
        generate({ documents }) {
            // generate something for every document in the project
        }
    }
}
```

For a summary of the hooks you can use, check out the [Generation Pipeline](#generation-pipeline)
section below.

### Accepting configuration

Most of time, your plugin will need to accept configuration from the user. To support this, Houdini
users are asked to pass objects in their config file which are then passed to your function:

```javascript:title=houdini.config.js
export default {
    plugins: {
        './src/plugins/myPlugins.js': {
            aValue: 'myValue',
        }
    }
}
```
```javascript:title=src/plugins/myPlugins.js
/** @type { import("houdini").Plugin }*/
const generateSomething = async ({ aValue }) =>  {
    return {
        generate({ documents }) {
            // do something with aValue
        }
    }
}
```


#### Typesafe Config Values

If you use typescript, you probably want type definitions for your configuration
values. The best way to set that up is by
extending the `HoudiniPluginConfig` in the `houdini` module to map your plugin's
name with your custom config type. This will merge your
definition with the one Houdini uses internally:

```typescript:title=my-custom-plugin/src/index.ts
declare module 'houdini' {
	interface HoudiniPluginConfig {
		'my-custom-plugin': CustomPluginConfig
	}
}

export type CustomPluginConfig = {
    aValue: string
}
```

With that defined, a user can now include add a reference to your plugin's declarations and rely on
your custom type in their config file:

```javascript:title=houdini.config.js
/// <references types="my-custom-plugin">

/** @type { import('houdini').ConfigFile } */
export default {
    plugins: {
        'my-custom-plugin': {
            aValue: 'myValue',
        }
    }
}
```

## Publishing a Plugin

## Plugin Setup

Every pipeline begins with a common set of hooks that allow you to setup
and configure the system. This can include loading environment variables, or
updating any configuration values.

<SetupDiagram style="max-width: 250px; margin: 0 auto;" />

#### `config`

- Type:

#### `env`

#### `after_load`

## Generation Pipeline

The code generation pipeline is broken up into 3 parts:
- [Extract and Parse](#extract-and-parse) does so much. its pretty much the best.
- [Validate and Transform](#validate-and-transform) does so much. its pretty much the best.
- [Generate](#generate) does so much. its pretty much the best.



### Extract and Parse

<ExtractDiagram style="max-width: 600px; margin: 0 auto;"/>

#### `extensions`

#### `include`

#### `exclude`

#### `extract_documents`

#### `schema`

### Transform and Validate

<ValidateDiagram style="max-width: 600px; margin: 0 auto;"/>

#### `transform_before_validate`

#### `validate`

#### `transform_before_validate`

### Generate

<GenerateDiagram style="max-width: 600px; margin: 0 auto;"/>

#### `transform_before_generate`

#### `artifact_data`

#### `artifact_selection`

#### `artifact_end`

#### `hash`

#### `graphql_tag_return`

#### `index_file`

#### `generate`

#### `transform_runtime`

## Transform Hooks

#### `transform_file`

