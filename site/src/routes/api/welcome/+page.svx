---
title: API Reference
description: A listing of every top-level export from the Houdini runtime
---

<script>
    import { APIShowcase } from '~/components'

    const queryExample = `const store = graphql(\`
    query AllTodoItems {
        items {
            text
        }
    }
\`)`

const mutationExample = `const addFriend = graphql(\`
    mutation FollowFriend {
        followFriend(id: 1) {
            friend {
                followed_by_viewer
            }
        }
    }
\`)`

const graphqlExample = `const setFavorite = graphql(\`
    mutation SetFavorite {
        setFavoriteRecipe(id: 1) {
            recipe {
                ...Favorites_insert
            }
        }
    }
\`)`

const fragmentExample = `$: data = fragment(user, graphql(\`
    fragment UserAvatar on User {
        firstName
        lastName
        email
    }
\`))`

const configExample = `export default {
    apiUrl: 'http://localhost:4000',
    plugins: {
        'houdini-svelte': {}
    }
}`

const subscriptionExample = `graphql(\`
    subscription PostLiked {
        postLiked {
            post {
                like_count
            }
        }
    }
\`)`

const cacheExample = `
    const user = cache.get("User", {
        id: 3
    })

    user.write({
        fragment: graphql(\`
            fragment Update on User {
                firstName
            }
        \`),
        data: {
            firstName: "Harry"
        }
    })
`

const clientExample = `
    new HoudiniClient({
        url: "...",
        fetchParams({ session }) {
            return {
                headers: { }
            }
        }
    })
`

const clientPluginExample = `
    () => ({
        start(ctx, { next }) {
            console.log("hello world")
            next(ctx)
        }
    })
`

const cliExample = `houdini generate --pull-schema`

const pluginExample = `// vite.config.js
import houdini from 'houdini/vite'

export default {
    plugins: [houdini(), ...],
}
`
</script>

# Houdini API Reference

Every GraphQL document in your Houdini application is driven by a Svelte store with specific methods for performing each task.

## GraphQL Documents

<APIShowcase
title="query"
description="Fetch data from the server"
href="/api/query"
example={queryExample}
/>

<APIShowcase
title="fragment"
description="Reuse part of a query"
href="/api/fragments"
example={fragmentExample}
/>

<APIShowcase
title="mutation"
description="Send updates to the server and keep the local cache up to date"
href="/api/mutation"
example={mutationExample}
/>

<APIShowcase
title="subscription"
description="Real-time updates"
href="/api/subscription"
example={subscriptionExample}
/>

## Runtime APIs

<APIShowcase
title="Extra Bits"
description="A summary of the custom things houdini lets you do in your graphql documents"
href="/api/graphql"
example={graphqlExample}
/>

<APIShowcase
title="HoudiniClient"
description="An overview of the options you can pass to the HoudiniClient constructor"
href="/api/client"
example={clientExample}
/>

<APIShowcase
title="Cache API"
description="An overview of the programmatic cache API (for imperative updates)"
href="/api/cache"
example={cacheExample}
/>

<APIShowcase
title="Client Plugins"
description="Everything you could want to know about HoudiniClient Plugins"
href="/api/client-plugins"
example={clientPluginExample}
/>

## Setup

<APIShowcase
title="Config"
description="The config file format"
href="/api/config"
example={configExample}
/>

<APIShowcase
title="Vite Plugin"
description="A powerful tool to enable Houdini's declarative API in your svelte+vite projects"
href="/api/vite"
example={pluginExample}
/>

<APIShowcase
title="Command Line"
description="Command line tool commands and arguments"
href="/api/cli"
example={cliExample}
language="bash"
/>
