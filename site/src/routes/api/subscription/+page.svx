---
title: Subscription
description: Subscriptions in Houdini
---

# Subscription

Listen for real-time updates from your server using GraphQL Subscriptions.

```svelte:title=SubscriptionExample.svelte&typescriptToggle=true
<script lang="ts">
  import { graphql } from '$houdini'

  // this information should usually come from a fragment
  export let itemID: string

  // will start listening onMount (browser only)
  const updates = graphql(`
    subscription ItemUpdate($id: ID!) {
      itemUpdate(id: $id) {
        item {
          id
          completed
          text
        }
      }
    }
  `)


  $: updates.listen({ id: itemID })
</script>

latest value: {$updates.itemUpdate.item.text}
```

Subscriptions can be defined like any other document and are triggered using the subscription store's `listen` method:

## List Operations

Subscription bodies can contain all of the list operations described in [this document](/api/mutation#lists).

## Configuring the client

Houdini can work with any websocket client as long as you can provide an a function that returns an object that
satisfies the `SubscriptionHandler` interface to the `subscriptions` plugin you can import from `$houdini/plugins`.

### Using `graphql-ws`

If your API supports the [`graphql-ws`](https://github.com/enisdenjo/graphql-ws) protocol, you can create a
client and pass it directly:

```typescript:title=src/client.ts&typescriptToggle=true
import { createClient } from 'graphql-ws'
import { subscription } from '$houdini/plugins'

// prettier-ignore
export default new HoudiniClient({
  url: "...",
  plugins: [
    subscription(() => new createClient({
      url: 'ws://api.url'
    }))
  ]
})
```

### Using `subscriptions-transport-ws`

If you are using the deprecated `subscriptions-transport-ws` library and associated protocol,
you will have to slightly modify the above block:

```typescript:title=src/client.ts&typescriptToggle=true
import { SubscriptionClient } from 'subscriptions-transport-ws'
import { browser } from '$app/environment'
import { subscription } from '$houdini/plugins'

  // prettier-ignore
function createClient() {
  // instantiate the transport client
  const client = new SubscriptionClient('ws://api.url', {
    reconnect: true,
  })

  // wrap the client in something houdini can use
  return {
    subscribe(payload, handlers) {
      // send the request
      const { unsubscribe } = client.request(payload).subscribe(handlers)

      // return the function to unsubscribe
      return unsubscribe
    },
  }
}

export default new HoudiniClient({
  url: "...",
  plugins: [
    subscription(createClient)
  ]
})
```

### Server-Side Events

If your server supports the latest Server-Side events, you can use them to power your subscriptions:

```typescript:title=src/client.ts&typescriptToggle=true
import { SubscriptionClient } from 'subscriptions-transport-ws'
import { browser } from '$app/environment'
import { subscription } from '$houdini/plugins'

  // prettier-ignore
function sseSockets() {
  return {
    subscribe(payload, handlers) {
      const url = new URL('/api/graphql', location.href)
      url.searchParams.append('query', payload.query)
      url.searchParams.append('variables', JSON.stringify(payload.variables))

      const eventSource = new EventSource(url)

      eventSource.addEventListener('message', (ev) => handlers.next(JSON.parse(ev.data)))

      return () => eventSource.close()
    },
  }
}

export default new HoudiniClient({
  url: "...",
  plugins: [
    subscription(sseSockets)
  ]
})
```

## Authentication

Subscriptions integrate with the rest of the session logic provided by houdini. When
your session value, `fetchParams` or `metadata` changes a new subscription client will
be created based on that new information. You can use this information to pass connection
parameters to your subscription client. For example, authenticating `graphql-ws` would look
something like:

```typescript:title=src/client.ts&typescriptToggle=true
import { createClient } from 'graphql-ws'
import { subscription } from '$houdini/plugins'

// prettier-ignore
export default new HoudiniClient({
  url: "...",
  plugins: [
    subscription(({ session }) => new createClient({
      url: 'ws://api.url',
      connectionParams: () => {
        return {
          headers: {
            Authorization: `Bearer ${session.token}`,
          },
        }
      },
    }))
  ]
})
```
