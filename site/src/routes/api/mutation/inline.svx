---
title: Mutation
index: 3
description: Mutations in Houdini
---

<script>
    import { HeaderWithMode } from '~/components'
	import ListOperations from '~/sections/list-operations.svx'
</script>

<HeaderWithMode title="Mutation" />

Send a mutation to the server and updating your client-side cache with any changes.

```svelte
<script>
	import { mutation, graphql } from '$houdini'

	let itemID

	const uncheckItem = mutation(graphql`
		mutation UncheckItem($id: ID!) {
			uncheckItem(item: $id) {
				item {
					id
					completed
				}
			}
		}
	`)
</script>

<button on:click={() => uncheckItem({ id: itemID })}> Uncheck Item </button>
```

### Inputs

1. A string tagged with `graphql` containing a single document with one named mutation

### Return Values

`mutation` returns an asynchronous function that invokes the specified mutation with the inputs specified by the first argument to the handler. The second argument to the result of `mutation` can be used to configure its behavior. The following values can be provided:

- `optimisticResponse` specifies a value to use instead of waiting for the server to return a value. For more information, see the [optimistic responses](#optimistic-responses) section.

### Notes

- mutations usually do best when combined with at least one fragment grabbing
  the information needed for the mutation (for an example of this pattern, see below.)

## Updating fields

When a mutation is responsible for updating fields of entities, houdini
should take care of the details for you as long as you request the updated data alongside the
record's id.

Take for example, an `TodoItemRow` component:

```svelte
<script lang="ts">
	import { fragment, mutation, graphql, TodoItemRow } from '$houdini'

	export let item: TodoItemRow

	// the resulting store will stay up to date whenever `checkItem`
	// is triggered
	const data = fragment(
		graphql`
			fragment TodoItemRow on TodoItem {
				id
				text
				completed
			}
		`,
		item
	)

	const checkItem = mutation<CompleteItem>(graphql`
		mutation CompleteItem($id: ID!) {
			checkItem(item: $id) {
				item {
					id
					completed
				}
			}
		}
	`)
</script>

<li class:completed={$data.completed}>
	<input
		name={$data.text}
		class="toggle"
		type="checkbox"
		checked={$data.completed}
		on:click={handleClick}
	/>
	<label for={$data.text}>{$data.text}</label>
	<button class="destroy" on:click={() => deleteItem({ id: $data.id })} />
</li>
```

## Lists

<ListOperations />

## Optimistic Responses

A lot of the time we know the value that a mutation will trigger assuming everything goes right. For example, a `toggleItem` mutation in a todo list will invert the value of the `checked` field of a particular item. In these situations, we don't have to wait for a mutation to resolve in order to apply the update to the cache. Instead, we can assume that it will succeed and provide an "optimistic response" for the mutation with the second argument to a mutation handler:

```svelte
<script>
	import { mutation, graphql } from '$houdini'

	export let itemID

	const toggleItem = mutation(graphql`
		mutation ToggleItem($id: ID!) {
			toggleItem {
				item {
					id
					checked
				}
			}
		}
	`)
</script>

<button
	on:click={() => {
		toggleItem(
			{ id: itemID },
			{
				optimisticResponse: {
					toggleItem: {
						item: {
							id: '1',
							checked: true
						}
					}
				}
			}
		)
	}}
>
	toggle item
</button>
```

When the mutation resolves, the old values will be erased entirely and the new values will be committed to the cache. If instead the mutation fails, the optimistic changes will be reverted and the handler's promise will reject with the error message as usual.

Remember to always request and specify an `id` when dealing with optimistic responses so that the cache can make sure to update the correct records. Also, it's worth mentioning that you don't have to provide a complete response for an optimistic value, the cache will write whatever information you give it (as long as its found in the mutation body).
