---
title: Mutation
index: 3
description: Mutations in Houdini
---

<script>
    import { HeaderWithMode } from '~/components'
    import mode from '~/lib/mode'
	import ListOperations from '~/sections/list-operations.svx'
</script>

<HeaderWithMode title="Mutation" />

A mutation store provides a `mutate` method that triggers the mutation and provides the latest
mutation response as the store value:

```svelte
<script>
	import UncheckItemStore from '$houdini/stores/UncheckItem'
    import { getHoudiniContext } from '$houdini/runtime'

	let itemID

    const context = getHoudiniContext()
</script>

<button
    on:click={() => UncheckItemStore.mutate({
        context,
        variables: { id: itemID }
    })}
>
    Uncheck Item
</button>
```

### Store Value

The store's value is an object with the following keys:

- `data`: the latest response of the mutation
- `errors`: a nullable list of errors from the mutation
- `isFetching`: a boolean to track the fetching state of the mutation
- `isOptimisticResponse` a boolean indicating if the response is optimistic
- `variables`: the last set of variables used to trigger the mutation

### Triggering a Mutation

Triggering a mutation is done with the `mutate` method on the store as seen above. `mutate` returns a promise that resolves with an object matching the store's value
(described above) and takes the following inputs:

- `context`: optional. An opaque object of information necessary for the mutation. Only required if your environment needs `session` in its fetch function
- `variables`: an object with the variables to use for the mutation
- `optimisticResponse`: an object containing the optimistic response for the mutation. [See below](/api/mutation/store#optimistic-responses).

## Updating fields

When a mutation is responsible for updating fields of entities, houdini
should take care of the details for you as long as you request the updated data alongside the
record's id.

## Lists

<ListOperations />

## Optimistic Responses

A lot of the time we know the value that a mutation will trigger assuming everything goes right. For example, a `toggleItem` mutation in a todo list will invert the value of the `checked` field of a particular item. In these situations, we don't have to wait for a mutation to resolve in order to apply the update to the cache. Instead, we can assume that it will succeed and provide an "optimistic response" for the mutation with the second argument to a mutation handler:

```svelte
<script>
	import ToggleItem  from '$houdini/stores/ToggleItem'

	export let itemID
</script>

<button
	on:click={() => {
		ToggleItemStore.mutate({
            variables: { id: itemID },
            optimisticResponse: {
                toggleItem: {
                    item: {
                        id: '1',
                        checked: true
                    }
                }
            }
        })
	}}
>
	toggle item
</button>
```

When the mutation resolves, the old values will be erased entirely and the new values will be committed to the cache. If instead the mutation fails, the optimistic changes will be reverted and the handler's promise will reject with the error message as usual.

Remember to always request and specify an `id` when dealing with optimistic responses so that the cache can make sure to update the correct records. Also, it's worth mentioning that you don't have to provide a complete response for an optimistic value, the cache will write whatever information you give it (as long as its found in the mutation body).
