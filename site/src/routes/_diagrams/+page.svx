---
title: Hello
---

<script lang="ts">
	import mermaid from 'mermaid'
    import { onMount } from 'svelte'
    import { colors } from './colors.ts'

    onMount(() => {
        mermaid.initialize({ startOnLoad: true,
            'theme': 'base',
            'themeVariables': {
                'lineColor': colors.lineColor[0],
                'edgeLabelBackground': colors.canvasColor[0],
                textColor: colors.textColor[0],
                primaryBorderColor: colors.borderColor[0],
                primaryColor: colors.backgroundColor[0],
                primaryTextColor: colors.textColor[0],
            }
        })
        mermaid.init({
            startOnLoad: true
        })
    })
</script>

```mermaid
graph LR
    config[config] --> env
    env[env] --> after_load
    after_load[after_load]
    click config "#config" "config hook"
    click env "#env" "env hook"
    click after_load "#after_load" "after_load hook"

```

```mermaid
graph LR
    extensions[extensions] --> include
    include[include] --> exclude
    exclude[exclude] --> extract
    extract[extract_documents] --- collect
    schema[schema] --- collect
    collect((Parse <br> Documents))
```

```mermaid
graph LR
    t_before_v[transform_before_validate] --> validate
    validate[validate] --> t_after_v
    t_after_v[transform_after_validate]
```

```mermaid
graph TD

    t_before_g[transform_before_generate] --> gen_sq_center

    gen_sq_center --> gen_sq_left
    gen_sq_left[ ]

    gen_sq_left --> index_file
    index_file

    gen_sq_left --> graphql_tag_return
    graphql_tag_return

    gen_sq_center[ ] --> |For every document|artifact_data
    artifact_data --> artifact_hash
    artifact_hash[hash] --> artifact_selection
    artifact_selection --> artifact_e
    artifact_e[artifact_end]


    gen_sq_center --> gen_sq_right
    gen_sq_right[ ]

    gen_sq_right --> generate
    generate

    gen_sq_right --> include_runtime
    include_runtime --> transform_runtime
```
