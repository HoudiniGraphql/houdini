---
title: Hello
---

<script lang="ts">
	import mermaid from 'mermaid'
    import { onMount } from 'svelte'
    import { colors } from './colors.ts'

    onMount(() => {
        mermaid.initialize({ startOnLoad: true,
            'theme': 'base',
            'themeVariables': {
                lineColor: colors.lineColor[0],
                edgeLabelBackground: colors.canvasColor[0],
                textColor: colors.textColor[0],
                primaryBorderColor: colors.borderColor[0],
                primaryColor: colors.backgroundColor[0],
                primaryTextColor: colors.textColor[0],
                secondaryTextColor: colors.textColor[0],
                clusterBkg: colors.subgraphBackground[0],
                clusterBorder: colors.borderColor[0],
                labelTextColor: colors.textColor[0],
            }
        })
        mermaid.init({
            startOnLoad: true
        })
    })
</script>

```mermaid
graph LR
    order[order] --> config
    config[config] --> env
    env[env] --> afterLoad
    afterLoad[afterLoad]
    click order "#order" "order hook"
    click config "#config" "config hook"
    click env "#env" "env hook"
    click afterLoad "#afterload" "afterLoad hook"

```

```mermaid
graph LR
    extensions[extensions] --> include
    include[include] --> exclude
    exclude[exclude] --> extract
    extract[extractDocuments] --- collect
    schema[schema] --- collect
    collect((Parse <br> Documents))
    click extensions "#extensions" "extensions hook"
    click include "#include" "include hook"
    click exclude "#exclude" "exclude hook"
    click extract "#extractdocuments" "extractDocuments hook"
    click schema "#schema" "schema hook"
```

```mermaid
graph LR
    t_before_v[beforeValidate] --> validate
    validate[validate] --> t_after_v
    t_after_v[afterValidate]

    click t_before_v "#beforevalidate" "beforeValidate hook"
    click validate "#validate" "validate hook"
    click t_after_v "#aftervalidate" "afterValidate hook"
```

```mermaid
flowchart TD
    subgraph " "
        direction LR

        artifactData --> artifact_hash
        artifact_hash[hash] --> artifact_e
        artifact_e[artifactEnd]
    end
    t_before_g[beforeGenerate]

    sq[ ]

    generate
    includeRuntime
    transformRuntime

    indexFile
    graphqlTagReturn
    clientPlugins

    t_before_g --> |For every document|artifactData

    artifact_e --> sq

    sq --> generate
    sq --> includeRuntime
    sq --> indexFile
    sq --> graphqlTagReturn
    sq --> clientPlugins

    includeRuntime --> transformRuntime

    click t_before_g "#beforegenerate" "beforeGenerate hook"
    click artifactData "#artifactdata" "artifactData hook"
    click artifact_hash "#hash" "hash hook"
    click indexFile "#indexFile" "indexfile hook"
    click graphqlTagReturn "#graphqltagreturn" "graphqlTagReturn hook"
    click artifact_e "#artifactend" "artifactEnd hook"
    click generate "#generate" "generate hook"
    click includeRuntime "#includeruntime" "includeRuntime hook"
    click transformRuntime "#transformruntime" "transformRuntime hook"
    click clientPlugins "#clientplugins" "clientPlugins hook"

```
