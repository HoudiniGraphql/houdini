---
title: Authentication
index: 9
description: A guide to authentication in Houdini
---

# Authentication

Houdini's support for user sessions comes in 2 parts. First, you need to add a `hook.js` file that defines the
session for that user:

```typescript
import houdiniClient from './houdiniClient'

/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	const user = await getUserInformation(event.request.headers.get('cookie'))

	houdiniClient.setSession(event, { user })

	return await resolve(event)
}
```

With that in place, you can now access the user information with the `session` parameter passed to your client's network function:

```typescript
// client.ts
import type { RequestHandlerArgs } from '$houdini'
import { HoudiniClient } from '$houdini'

async function fetchQuery({
	fetch,
	text = '',
	variables = {},
	session,
	metadata
}: RequestHandlerArgs) {
	const result = await fetch(import.meta.env.VITE_API_URL, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			Authorization: `Bearer ${session?.user.token}`
		},
		body: JSON.stringify({
			query: text,
			variables
		})
	})

	// extract and assign the json body of the response to a variable
	const json = await result.json()

	return json
}

export default new HoudiniClient(fetchQuery)
```

You can also type your Session & Metadata as follow in `src/app.d.ts`:

```typescript
/// <reference types="@sveltejs/kit" />
declare namespace App {
	interface Session {
		token?: string | null
	}

	interface Metadata {
		logResult?: boolean | null
	}
}
```
