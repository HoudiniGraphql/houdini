---
title: Loading States
description: An overview of the tools that houdini provides to help construct loading states for your application.
---

<script>
    import LoadingPokedex from '~/components/pokedex/LoadingState.svelte'
</script>

# Loading States

At some point, your users are going to be waiting for data to load from the server. This could be because they
don't live in a place with state-of-the-art internet service or maybe they just stepped into a tunnel. Regardless,
you are going to want to show them _something_ while your request loads.

This guide will go over all of the tools that Houdini provides to help you build interfaces for your loading states.

## A Concrete Example

Before we get too far, let's look at a concrete example so we can have a goal in mind. For this guide,
we're going to be building a loading screen for the Pok√©dex that we constructed in the [Getting Started](/intro) guide:

<p>
    <LoadingPokedex />
</p>

For the sake of this guide, you can imagine that the Pokedex is built using the following route:

```graphql:title=src/routes/[[id]]/+page.qgl
query SpeciesInfo($id: Int = 1) {
    species(id: $id) {
        name
        description
        evolutionChain {
            edges {
                node {
                    name
                    ...Sprite
                }
            }
        }

        ...Sprite
        ...EvolutionChain
        ...NavButtons
    }
}
```

```svelte:title=src/routes/[[id]]/+page.svelte&typescriptToggle=true
<script lang="ts">
    import type { PageData } from './$houdini'
    // prettier-ignore
    import {
        Container,
        Panel,
        Sprite,
        Display,
        MoveList,
        NavButtons,
        Number,
    } from '~/components'

    export let data: PageData

    let { SpeciesInfo } = data
    $: ({ SpeciesInfo } = data)

    $: species = SpeciesInfo.data.species
</script>

<Container>
    <Panel slot="left">
        <Display>
            {species.name}
        </Display>
        <Sprite {species} />
        <Display>
            {species.description}
        </Display>
    </Panel>
    <Panel slot="right">
        <div class="evolution-chain">
            {#each species.evolutionChain.edges as { node }, i }
                <div class="evolution-form">
                    <Number value={number + 1} />
                    <Sprite style="height: 96px;" species={node} />
                    <Display>
                        {node.name}
                    </Display>
                </div>
            {/each}
        </div>
        <MoveList {species} />
        <NavButtons {species} />
    </Panel>
</Container>
```

Just in case it's not clear: the `evolutionChain` list corresponds to the 3 columns
in the top right of the loading screen above. If it helps, you can look at a deployed
version of the application [here](http://houdini-intro.pages.dev).
