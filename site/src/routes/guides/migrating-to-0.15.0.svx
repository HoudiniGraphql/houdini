---
title: Migrating to 0.15.0
index: 9
description: A guide to migrating your application to Houdini v0.15.0
---

# Migrating to 0.15.0

Lot's changed in `v0.15.0`. Hopefully this guide should help you understand those changes as well as show you what you should
update to work with the new features. If you just want to skip straight to the deprecation warnings you might be seeing in your terminal,
here are a few links:

- [Config Values](#config-values)
- [Environment](#environment)
- [Session and Fetch](#session-and-fetch)
- [@parentID](#parentid)

## What Changed

The biggest feature introduced with `0.15.0` is a new way of interacting with graphql documents
in your houdini projects. Instead of only being able to specify your documents directly in your
component files, you can now specify them in external files and houdini will generate a store for you
to interact with. For more information about the new store-based API, please check out the
[Working with GraphQL](/guides/working-with-graphql) guide.

## Config Values

The `quiet` configuration value has been changed in favor of the [new logging parameters](/api/config). In order to replicate the
previous behavior, you should use the `quiet` log level:

```javascript
// houdini.config.js

export default {
	// ...
	logLevel: 'quiet'
}
```

## Environment

In an effort to make Houdini's names work better with other libraries you might have in your application (for example, as part of
[KitQL](https://www.kitql.dev)), Houdini's `Environment` is now called `HoudiniClient`. All you need to do to use this is to
import `HoudiniClient` from your runtime and instantiate it as you used to do with `Environment`.

Beyond just the name there was also a change in the way you configure your runtime to use your environment. Now,
instead of `setEnvironment(client)` you should just use `client.init()`.

## Session and Fetch

The `session` and `fetch` arguments are now passed to your client's network function in the same object as `text`. You should update
your client definition to look something like:

```typescript
async function fetchQuery({ fetch, session, text, variables }) {
	const result = await fetch('http://localhost:4000/graphql', {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			Authorization: `Bearer ${session?.token}`
		},
		body: JSON.stringify({
			query: text,
			variables
		})
	})

	return await result.json()
}
```

## @parentID

This one is kind of subtle. If you never used `@parentID` before, you can ignore this. However, if you
_are_ using it in your application then you will need need to pass a different value than what you previous used.
Instead of passing the target of the fragment, you now need to pass the ID of the object with the field
marked with `@list` or `@paginate`. For example, in this query:

```graphql
query MyFriendsBandList {
	viewer {
		friends {
			favoriteBands @list(name: "User_Favorites") {
				name
			}
		}
	}
}
```

If you want to add a band to the list of a specific user, you need to pass the `id` field of the
user found in the `friend` list.
