---
title: Typescript
index: 5
description: An overview of Houdini's support for Typescript
---

# Typescript

Houdini is written in typescript and will generate types for all of your documents and special functions you define for houdini.

## Configuration

In order to setup your project to take full advantage of Houdini's generated types, you need to change your tsconfig file to look like the following:

```json
{
	"compilerOptions": {
		"rootDirs": [".", "./.svelte-kit/types", "./.$houdini/types"]
	}
}
```

## SvelteKit Routes

When working with Houdini's [generated load functions](/api/kit#generating-route-loads), you can import type definition for your variable functions and hooks from `./$houdini` (a relative import):

```typescript
/// src/routes/myProifle/+page.ts

import { graphql } from '$houdini'
import type { AfterLoad } from './$houdini'

export const houdini_load = graphql`
	query MyProfile {
		viewer {
			id
		}
	}
`

export const afterLoad: AfterLoad = ({ data }) => {
	return {
		computedValue: data.MyProfile.viewer.id + '_new'
	}
}
```

Your `PageData` component will also come from `./$houdini` since SvelteKit's generated type definitions don't know about the generated load:

```svelte
// src/routes/myProfile/+page.svelte

<script>
    import { PageData } from './$houdini'

	export let data: PageData

	$({ MyProfile } = data)
</script>

{$MyProfile.data.viewer.id}: {data.computedValue}
```

## Inline Documents

All of the inline document functions take a type parameter describing the shape of the result. You can import the generated types for your documents
from `$houdini` and pass it in:

```svelte
<script lang="typescript">
	import { query, graphql, AllItems } from '$houdini'

	// load the items
	const { data } = query<AllItems>(graphql`
		query AllItems {
			items {
				id
				text
			}
		}
	`)
</script>

{#each $data.items as item}
	<div>{item.text}</div>
{/each}
```

## Inline Stores

If you are working with inline stores, you will have to add your types explicitly:

```typescript
import type { AllItemsStore, graphql } from '$houdini'

const store: AllItemsStore = graphql`
	query AllItems {
		items {
			id
			text
		}
	}
`
```
